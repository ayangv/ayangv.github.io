<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhisheng的博客</title>
  
  <subtitle>坑要一个个填，路要一步步走！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-01T04:16:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhisheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</title>
    <link href="http://yoursite.com/2018/09/18/flink-install/"/>
    <id>http://yoursite.com/2018/09/18/flink-install/</id>
    <published>2018-09-17T16:00:00.000Z</published>
    <updated>2018-10-01T04:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fvsli4dkgzj31hc0zfass.jpg" alt="009"></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、安装查看 Java 的版本号，推荐使用 Java 8。</p><h3 id="安装-Flink"><a href="#安装-Flink" class="headerlink" title="安装 Flink"></a>安装 Flink</h3><p>2、在 Mac OS X 上安装 Flink 是非常方便的。推荐通过 homebrew 来安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-flink</span><br></pre></td></tr></table></figure><p>3、检查安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink --version</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Version: 1.6.0, Commit ID: ff472b4</span><br></pre></td></tr></table></figure><p>4、启动 flink </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">进入安装目录：</span><br><span class="line"></span><br><span class="line">cd /usr/local/Cellar/apache-flink/1.6.0/libexec/bin</span><br><span class="line"></span><br><span class="line">执行下面命令</span><br><span class="line"></span><br><span class="line">./start-cluster.sh</span><br><span class="line"></span><br><span class="line">启动日志：</span><br><span class="line"></span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host zhisheng.</span><br><span class="line">Starting taskexecutor daemon on host zhisheng.</span><br></pre></td></tr></table></figure><p>接着就可以进入 web 页面(<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a>) 查看</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtbrqnqcj31ao0iamz8.jpg" alt="1flink-web"></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>1、新建一个 maven 项目</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtdwzs0lj30sf0j7ae9.jpg" alt="flink-demo"></p><p>创建一个 SocketTextStreamWordCount 文件，加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String hostname = args[<span class="number">0</span>];</span><br><span class="line">        Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up the streaming execution environment</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        sum.print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">"Java WordCount from SocketTextStream Example"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            String[] tokens = s.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String token: tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着进入工程目录，使用以下命令打包。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvdth7y4k1j31b40gxwi9.jpg" alt="2build"></p><p>然后我们开启监听 9000 端口: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9000</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtiq9l78j30nd04h3yp.jpg" alt="监听"></p><p>最后进入 flink 安装目录 bin 下执行以下命令跑程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c com.zhisheng.flink.SocketTextStreamWordCount /Users/zhisheng/IdeaProjects/flink/word-count/target/original-word-count-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure><p>注意换成你自己项目的路径。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtl0aml1j31kw05hgn9.jpg" alt="4run"></p><p>执行完上述命令后，我们可以在 webUI 中看到正在运行的程序：</p><p> <img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtmqzvc8j31a10d7q41.jpg" alt="5running-job"></p><p>我们可以在 nc 监听端口中输入 text，比如：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtrr7bvhj30mn08lt97.jpg" alt="nc"></p><p>然后我们通过 tail 命令看一下输出的 log 文件，来观察统计结果。进入目录 apache-flink/1.6.0/libexec/log，执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f flink-zhisheng-taskexecutor-0-zhisheng.out</span><br></pre></td></tr></table></figure><p> 注意：切换成你自己的路径和查看自己的目录。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtw41tyoj31kw0bf0vd.jpg" alt="result"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文描述了如何在 Mac 电脑上安装 Flink，及运行它。接着通过一个简单的 Flink 程序来介绍如何构建及运行Flink 程序。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/09/18/flink-install</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fvsli4dkgzj31hc0zfass.jpg&quot; alt=&quot;009&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://yoursite.com/tags/Flink/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Go 并发——实现协程同步的几种方式</title>
    <link href="http://yoursite.com/2018/08/30/go-sync/"/>
    <id>http://yoursite.com/2018/08/30/go-sync/</id>
    <published>2018-08-29T16:00:00.000Z</published>
    <updated>2018-08-30T14:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fus2khvi22j31hc0zfahk.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java 中有一系列的线程同步的方法，go 里面有 goroutine（协程），先看下下面的代码执行的结果是什么呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上代码很可能看不到输出。</p><p>因为有可能这两个协程还没得到执行，主协程就已经结束了，而主协程结束时会结束所有其他协程，所以导致代码运行的结果什么都没有。</p><p>估计不少新接触 go 的童鞋都会对此郁闷😒，可能会问那么该如何等待主协程中创建的协程执行完毕之后再结束主协程呢？</p><p>下面说几种可以解决的方法：</p><h3 id="Sleep-一段时间"><a href="#Sleep-一段时间" class="headerlink" title="Sleep 一段时间"></a>Sleep 一段时间</h3><p>在 main 方法退出之前 sleep 一段时间就<strong>可能</strong>会出现结果了，如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 睡眠1秒，等待上面两个协程结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个简单的协程执行消耗的时间很短的，所以你会发现现在就有结果出现了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Goroutine 1</span><br><span class="line">Goroutine 2</span><br></pre></td></tr></table></figure><p>为什么上面我要说 “可能会出现” ？</p><p>因为 sleep 这个时间目前是设置的 1s，如果我这两个协程里面执行了很复杂的逻辑操作（时间大于 1s），那么就会发现依旧也是无结果打印出来的。</p><p>那么就可以发现这种方式得到问题所在了：<strong>我们无法确定需要睡眠多久</strong></p><p>上面那种方式有问题，go 里面其实也可以用管道来实现同步的。</p><h3 id="管道实现同步"><a href="#管道实现同步" class="headerlink" title="管道实现同步"></a>管道实现同步</h3><p>那么用管道怎么实现同步呢？show code：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    count := <span class="number">2</span> <span class="comment">// count 表示活动的协程个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 协程结束，发出信号</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 协程结束，发出信号</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">range</span> ch &#123;</span><br><span class="line">        <span class="comment">// 每次从ch中接收数据，表明一个活动的协程结束</span></span><br><span class="line">        count--</span><br><span class="line">        <span class="comment">// 当所有活动的协程都结束时，关闭管道</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">close</span>(ch)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是一种比较完美的解决方案， goroutine / channel 它们也是在 go 里面经常搭配在一起的一对。</p><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h3><p>其实 go 里面也提供了更简单的方式 —— 使用 sync.WaitGroup。</p><p>WaitGroup 顾名思义，就是用来等待一组操作完成的。WaitGroup 内部实现了一个计数器，用来记录未完成的操作个数，它提供了三个方法：</p><ul><li>Add() 用来添加计数</li><li>Done() 用来在操作结束时调用，使计数减一</li><li>Wait() 用来等待所有的操作结束，即计数变为 0，该函数会在计数不为 0 时等待，在计数为 0 时立即返回</li></ul><p>继续 show code：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>) <span class="comment">// 因为有两个动作，所以增加2个计数</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">        wg.Done() <span class="comment">// 操作完成，减少一个计数</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">        wg.Done() <span class="comment">// 操作完成，减少一个计数</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    wg.Wait() <span class="comment">// 等待，直到计数为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现也是可以看到运行结果的，是不是发现这种方式是很简单的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>多看别人写的代码；多想想为啥要这样写；多查自己不理解的地方；多写 demo 测试；多写文章总结。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>本文地址为：<a href="http://www.54tianzhisheng.cn/2018/08/30/go-sync/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/30/go-sync/</a> ，转载请注明原文出处！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fus2khvi22j31hc0zfahk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>教你如何在 IDEA 远程 Debug ElasticSearch</title>
    <link href="http://yoursite.com/2018/08/14/idea-remote-debug-elasticsearch/"/>
    <id>http://yoursite.com/2018/08/14/idea-remote-debug-elasticsearch/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-10-01T04:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fu9jy37ktlj31hc0zkdnx.jpg" alt="007"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>之前在<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">源码阅读环境搭建文章</a>中写过我遇到的一个问题迟迟没有解决，也一直困扰着我。问题如下，在启动的时候解决掉其他异常和报错后，最后剩下这个错误一直解决不了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2018</span>-<span class="number">08</span>-<span class="number">01</span>T09:<span class="number">44</span>:<span class="number">27</span>,<span class="number">370</span>][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [] fatal error in thread [main], exiting</span><br><span class="line">java.lang.NoClassDefFoundError: org/elasticsearch/plugins/ExtendedPluginsClassLoader</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:<span class="number">632</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:<span class="number">557</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:<span class="number">162</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:<span class="number">311</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:<span class="number">252</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap$<span class="number">5</span>.&lt;init&gt;(Bootstrap.java:<span class="number">213</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:<span class="number">213</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:<span class="number">326</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:<span class="number">136</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:<span class="number">127</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:<span class="number">86</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:<span class="number">124</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.main(Command.java:<span class="number">90</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class="number">93</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class="number">86</span>) ~[main/:?]</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.elasticsearch.plugins.ExtendedPluginsClassLoader</span><br><span class="line">    at jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:<span class="number">582</span>) ~[?:?]</span><br><span class="line">    at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:<span class="number">190</span>) ~[?:?]</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">499</span>) ~[?:?]</span><br><span class="line">    ... <span class="number">15</span> more</span><br></pre></td></tr></table></figure><p>网上的解决办法也试了很多遍，包括自己也在 <a href="https://github.com/elastic/elasticsearch/issues/30774" target="_blank" rel="noopener">GitHub issue</a> 提问了，也没能解决。然后后面自己分享文章在掘金也发现有人和我有同样的问题。</p><p>下面讲讲另一种可以让你继续看源码的方法。</p><h3 id="远程-Debug"><a href="#远程-Debug" class="headerlink" title="远程 Debug"></a>远程 Debug</h3><p>前提条件是你之前已经把项目导入进 IDEA 了，如果你还没了解，请看之前的文章，这里不重复了。</p><h4 id="启动一个实例"><a href="#启动一个实例" class="headerlink" title="启动一个实例"></a>启动一个实例</h4><p>在你 git 拉取下的代码，切换你要阅读的分支代码后，执行下面这条命令启动一个 debug 的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew run --debug-jvm</span><br></pre></td></tr></table></figure><p>启动等会后，就可以看到启动好后的端口号为 8000 了。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fu9gcjbddyj31dv0fd7al.jpg" alt="启动debug实例"></p><h4 id="配置-IDEA"><a href="#配置-IDEA" class="headerlink" title="配置 IDEA"></a>配置 IDEA</h4><p>新建一个远程的 debug：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu9gchtqvrj30v10lwgp8.jpg" alt="idea-remote"></p><p>配置如下图：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fu9gchfmn9j30v10lwgnz.jpg" alt="remote-settings"></p><p>接下来点击 OK 就好了。</p><p>然后点击下面的 debug 图标：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fu9gcirlstj30o107o75i.jpg" alt="debug"></p><p>启动后如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fu9gddmwktj30ou09r74p.jpg" alt="2018-08-14_19-18-11"></p><p>这时就可以发现是可以把整个流程全启动了，也不会报什么错误！</p><p>流程全启动后，你会发现终端的日志都打印出来了（注意：这时不是打印在你的 IDEA 控制台）</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu9gcgggq1j31kw0uk4qp.jpg" alt="2018-08-14_19-21-48"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到问题，多思考，多搜索，多想办法解决！这样才能够不断的提升你解决问题的能力！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请务必注明文章出处为：</p><p><a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/</a></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/" target="_blank" rel="noopener">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/0069RVTdly1fu9jy37ktlj31hc0zkdnx.jpg&quot; alt=&quot;007&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程（下）</title>
    <link href="http://yoursite.com/2018/08/12/es-code03/"/>
    <id>http://yoursite.com/2018/08/12/es-code03/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2018-08-14T13:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu8gbvoubfj31hc0vlqdt.jpg" alt="006"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/12/es-code03/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/12/es-code03/</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p><a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">上篇文章</a>写完了 ES 流程启动的一部分，main 方法都入口，以及创建 Elasticsearch 运行的必须环境以及相关配置，接着就是创建该环境的节点了。</p><h3 id="Node-的创建"><a href="#Node-的创建" class="headerlink" title="Node 的创建"></a>Node 的创建</h3><p>看下新建节点的代码：(代码比较多，这里是比较关键的地方，我就把注释直接写在代码上面了，实在不好拆开这段代码，300 多行代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(environment, Collections.emptyList()); <span class="comment">//执行下面的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Node</span><span class="params">(<span class="keyword">final</span> Environment environment, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Closeable&gt; resourcesToClose = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// register everything we need to release in the case of an error</span></span><br><span class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// use temp logger just to say we are starting. we can't use it later on because the node name might not be set</span></span><br><span class="line">        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(environment.settings()));</span><br><span class="line">        logger.info(<span class="string">"initializing ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        originalSettings = environment.settings();</span><br><span class="line">        Settings tmpSettings = Settings.builder().put(environment.settings())</span><br><span class="line">            .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the node environment as soon as possible, to recover the node id and enable logging</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeEnvironment = <span class="keyword">new</span> NodeEnvironment(tmpSettings, environment); <span class="comment">//1、创建节点环境,比如节点名称,节点ID,分片信息,存储元,以及分配内存准备给节点使用</span></span><br><span class="line">            resourcesToClose.add(nodeEnvironment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to create node environment"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings);</span><br><span class="line">        <span class="keyword">final</span> String nodeId = nodeEnvironment.nodeId();</span><br><span class="line">        tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId);</span><br><span class="line">        <span class="keyword">final</span> Logger logger = Loggers.getLogger(Node.class, tmpSettings);</span><br><span class="line"><span class="comment">// this must be captured after the node name is possibly added to the settings</span></span><br><span class="line">        <span class="keyword">final</span> String nodeName = NODE_NAME_SETTING.get(tmpSettings);</span><br><span class="line">        <span class="keyword">if</span> (hadPredefinedNodeName == <span class="keyword">false</span>) &#123;</span><br><span class="line">            logger.info(<span class="string">"node name derived from node ID [&#123;&#125;]; set [&#123;&#125;] to override"</span>, nodeId, NODE_NAME_SETTING.getKey());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"node name [&#123;&#125;], node ID [&#123;&#125;]"</span>, nodeName, nodeId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、打印出JVM相关信息</span></span><br><span class="line">        <span class="keyword">final</span> JvmInfo jvmInfo = JvmInfo.jvmInfo();</span><br><span class="line">        logger.info(</span><br><span class="line"><span class="string">"version[&#123;&#125;], pid[&#123;&#125;], build[&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;], OS[&#123;&#125;/&#123;&#125;/&#123;&#125;], JVM[&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;]"</span>,</span><br><span class="line">            Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),</span><br><span class="line">            jvmInfo.pid(), Build.CURRENT.flavor().displayName(),</span><br><span class="line">            Build.CURRENT.type().displayName(), Build.CURRENT.shortHash(),</span><br><span class="line">            Build.CURRENT.date(), Constants.OS_NAME, Constants.OS_VERSION,</span><br><span class="line">            Constants.OS_ARCH,Constants.JVM_VENDOR,Constants.JVM_NAME,</span><br><span class="line">            Constants.JAVA_VERSION,Constants.JVM_VERSION);</span><br><span class="line">        logger.info(<span class="string">"JVM arguments &#123;&#125;"</span>, Arrays.toString(jvmInfo.getInputArguments()));</span><br><span class="line">        <span class="comment">//检查当前版本是不是 pre-release 版本（Snapshot），</span></span><br><span class="line">        warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger);</span><br><span class="line">。。。</span><br><span class="line">        <span class="keyword">this</span>.pluginsService = <span class="keyword">new</span> PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins);   <span class="comment">//3、利用PluginsService加载相应的模块和插件</span></span><br><span class="line">        <span class="keyword">this</span>.settings = pluginsService.updatedSettings();</span><br><span class="line">        localNodeFactory = <span class="keyword">new</span> LocalNodeFactory(settings, nodeEnvironment.nodeId());</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the environment based on the finalized (processed) view of the settings</span></span><br><span class="line"><span class="comment">// this is just to makes sure that people get the same settings, no matter where they ask them from</span></span><br><span class="line">        <span class="keyword">this</span>.environment = <span class="keyword">new</span> Environment(<span class="keyword">this</span>.settings, environment.configFile());</span><br><span class="line">        Environment.assertEquivalent(environment, <span class="keyword">this</span>.environment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;ExecutorBuilder&lt;?&gt;&gt; executorBuilders = pluginsService.getExecutorBuilders(settings);        <span class="comment">//线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(settings, executorBuilders.toArray(<span class="keyword">new</span> ExecutorBuilder[<span class="number">0</span>]));</span><br><span class="line">        resourcesToClose.add(() -&gt; ThreadPool.terminate(threadPool, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// adds the context to the DeprecationLogger so that it does not need to be injected everywhere</span></span><br><span class="line">        DeprecationLogger.setThreadContext(threadPool.getThreadContext());</span><br><span class="line">        resourcesToClose.add(() -&gt; DeprecationLogger.removeThreadContext(threadPool.getThreadContext()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;Setting&lt;?&gt;&gt; additionalSettings = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettings());       <span class="comment">//额外配置</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; additionalSettingsFilter = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettingsFilter());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ExecutorBuilder&lt;?&gt; builder : threadPool.builders()) &#123;</span><br><span class="line">            <span class="comment">//4、加载一些额外配置</span></span><br><span class="line">            additionalSettings.addAll(builder.getRegisteredSettings());</span><br><span class="line">        &#125;</span><br><span class="line">        client = <span class="keyword">new</span> NodeClient(settings, threadPool);<span class="comment">//5、创建一个节点客户端                                                                                  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、缓存一系列模块,如NodeModule,ClusterModule,IndicesModule,ActionModule,GatewayModule,SettingsModule,RepositioriesModule，scriptModule，analysisModule</span></span><br><span class="line">        <span class="keyword">final</span> ResourceWatcherService resourceWatcherService = <span class="keyword">new</span> ResourceWatcherService(settings, threadPool);</span><br><span class="line">        <span class="keyword">final</span> ScriptModule scriptModule = <span class="keyword">new</span> ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class));</span><br><span class="line">        AnalysisModule analysisModule = <span class="keyword">new</span> AnalysisModule(<span class="keyword">this</span>.environment, pluginsService.filterPlugins(AnalysisPlugin.class));</span><br><span class="line">        <span class="comment">// this is as early as we can validate settings at this point. we already pass them to ScriptModule as well as ThreadPool so we might be late here already</span></span><br><span class="line">        <span class="keyword">final</span> SettingsModule settingsModule = <span class="keyword">new</span> SettingsModule(<span class="keyword">this</span>.settings, additionalSettings, additionalSettingsFilter);</span><br><span class="line">scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings());</span><br><span class="line">        resourcesToClose.add(resourceWatcherService);</span><br><span class="line">        <span class="keyword">final</span> NetworkService networkService = <span class="keyword">new</span> NetworkService(</span><br><span class="line">  getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)));</span><br><span class="line">        List&lt;ClusterPlugin&gt; clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class);</span><br><span class="line">        <span class="keyword">final</span> ClusterService clusterService = <span class="keyword">new</span> ClusterService(settings, settingsModule.getClusterSettings(), threadPool,                                                      ClusterModule.getClusterStateCustomSuppliers(clusterPlugins));</span><br><span class="line">        clusterService.addStateApplier(scriptModule.getScriptService());</span><br><span class="line">        resourcesToClose.add(clusterService);</span><br><span class="line">        <span class="keyword">final</span> IngestService ingestService = <span class="keyword">new</span> IngestService(settings, threadPool, <span class="keyword">this</span>.environment,                                                  scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class));</span><br><span class="line">        <span class="keyword">final</span> DiskThresholdMonitor listener = <span class="keyword">new</span> DiskThresholdMonitor(settings, clusterService::state, clusterService.getClusterSettings(), client);</span><br><span class="line">        <span class="keyword">final</span> ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,</span><br><span class="line">listener::onNewInfo);</span><br><span class="line">        <span class="keyword">final</span> UsageService usageService = <span class="keyword">new</span> UsageService(settings);</span><br><span class="line"></span><br><span class="line">        ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line"><span class="comment">// plugin modules must be added here, before others or we can get crazy injection errors...</span></span><br><span class="line">        <span class="keyword">for</span> (Module pluginModule : pluginsService.createGuiceModules()) &#123;</span><br><span class="line">            modules.add(pluginModule);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MonitorService monitorService = <span class="keyword">new</span> MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService);</span><br><span class="line">        ClusterModule clusterModule = <span class="keyword">new</span> ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService);</span><br><span class="line">        modules.add(clusterModule);</span><br><span class="line">        IndicesModule indicesModule = <span class="keyword">new</span> IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));</span><br><span class="line">        modules.add(indicesModule);</span><br><span class="line"></span><br><span class="line">        SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">        CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),</span><br><span class="line">                                                                                  settingsModule.getClusterSettings());</span><br><span class="line">        resourcesToClose.add(circuitBreakerService);</span><br><span class="line">        modules.add(<span class="keyword">new</span> GatewayModule());</span><br><span class="line"></span><br><span class="line">        PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings);</span><br><span class="line">        BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService);</span><br><span class="line">        resourcesToClose.add(bigArrays);</span><br><span class="line">        modules.add(settingsModule);</span><br><span class="line">        List&lt;NamedWriteableRegistry.Entry&gt; namedWriteables = Stream.of(</span><br><span class="line">            NetworkModule.getNamedWriteables().stream(),</span><br><span class="line">            indicesModule.getNamedWriteables().stream(),</span><br><span class="line">            searchModule.getNamedWriteables().stream(),</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.getNamedWriteables().stream()),</span><br><span class="line">            ClusterModule.getNamedWriteables().stream())</span><br><span class="line">            .flatMap(Function.identity()).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> NamedWriteableRegistry namedWriteableRegistry = <span class="keyword">new</span> NamedWriteableRegistry(namedWriteables);</span><br><span class="line">        NamedXContentRegistry xContentRegistry = <span class="keyword">new</span> NamedXContentRegistry(Stream.of(</span><br><span class="line">            NetworkModule.getNamedXContents().stream(),</span><br><span class="line">            searchModule.getNamedXContents().stream(),</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.getNamedXContent().stream()),</span><br><span class="line">            ClusterModule.getNamedXWriteables().stream())</span><br><span class="line">.flatMap(Function.identity()).collect(toList()));</span><br><span class="line">        modules.add(<span class="keyword">new</span> RepositoriesModule(<span class="keyword">this</span>.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry));</span><br><span class="line">        <span class="keyword">final</span> MetaStateService metaStateService = <span class="keyword">new</span> MetaStateService(settings, nodeEnvironment, xContentRegistry);</span><br><span class="line">        <span class="keyword">final</span> IndicesService indicesService = <span class="keyword">new</span> IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry,</span><br><span class="line">analysisModule.getAnalysisRegistry(),                                                                clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays, scriptModule.getScriptService(),client, metaStateService);</span><br><span class="line"></span><br><span class="line">        Collection&lt;Object&gt; pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.createComponents(client, clusterService, threadPool, resourceWatcherService,scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,namedWriteableRegistry).stream())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        ActionModule actionModule = <span class="keyword">new</span> ActionModule(<span class="keyword">false</span>, settings, clusterModule.getIndexNameExpressionResolver(),</span><br><span class="line">                                                     settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService);</span><br><span class="line">        modules.add(actionModule);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、获取RestController,用于处理各种Elasticsearch的rest命令,如_cat,_all,_cat/health,_clusters等rest命令(Elasticsearch称之为action)</span></span><br><span class="line">        <span class="keyword">final</span> RestController restController = actionModule.getRestController();</span><br><span class="line">        <span class="keyword">final</span> NetworkModule networkModule = <span class="keyword">new</span> NetworkModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(NetworkPlugin.class),threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,networkService, restController);</span><br><span class="line">        Collection&lt;UnaryOperator&lt;Map&lt;String, MetaData.Custom&gt;&gt;&gt; customMetaDataUpgraders =</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getCustomMetaDataUpgrader)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        Collection&lt;UnaryOperator&lt;Map&lt;String, IndexTemplateMetaData&gt;&gt;&gt; indexTemplateMetaDataUpgraders =</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getIndexTemplateMetaDataUpgrader)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        Collection&lt;UnaryOperator&lt;IndexMetaData&gt;&gt; indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> MetaDataUpgrader metaDataUpgrader = <span class="keyword">new</span> MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> MetaDataIndexUpgradeService metaDataIndexUpgradeService = <span class="keyword">new</span> MetaDataIndexUpgradeService(settings, xContentRegistry,                                                                                            indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> GatewayMetaState gatewayMetaState = <span class="keyword">new</span> GatewayMetaState(settings, nodeEnvironment, metaStateService,                                                      metaDataIndexUpgradeService, metaDataUpgrader);</span><br><span class="line">        <span class="keyword">new</span> TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> Transport transport = networkModule.getTransportSupplier().get();</span><br><span class="line">        Set&lt;String&gt; taskHeaders = Stream.concat(</span><br><span class="line">            pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -&gt; p.getTaskHeaders().stream()),</span><br><span class="line">            Stream.of(<span class="string">"X-Opaque-Id"</span>)</span><br><span class="line">        ).collect(Collectors.toSet());</span><br><span class="line">        <span class="keyword">final</span> TransportService transportService = newTransportService(settings, transport, threadPool,</span><br><span class="line">                                                                      networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders);</span><br><span class="line">        <span class="keyword">final</span> ResponseCollectorService responseCollectorService = <span class="keyword">new</span> ResponseCollectorService(<span class="keyword">this</span>.settings, clusterService);</span><br><span class="line">        <span class="keyword">final</span> SearchTransportService searchTransportService =  <span class="keyword">new</span> SearchTransportService(settings, transportService,</span><br><span class="line">                                                                                          SearchExecutionStatsCollector.makeWrapper(responseCollectorService));</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;Binder&gt; httpBind;</span><br><span class="line">        <span class="keyword">final</span> HttpServerTransport httpServerTransport;</span><br><span class="line">        <span class="keyword">if</span> (networkModule.isHttpEnabled()) &#123;</span><br><span class="line">            httpServerTransport = networkModule.getHttpServerTransportSupplier().get();</span><br><span class="line">            httpBind = b -&gt; &#123;</span><br><span class="line">b.bind(HttpServerTransport.class).toInstance(httpServerTransport);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpBind = b -&gt; &#123;</span><br><span class="line">                b.bind(HttpServerTransport.class).toProvider(Providers.of(<span class="keyword">null</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">            httpServerTransport = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DiscoveryModule discoveryModule = <span class="keyword">new</span> DiscoveryModule(<span class="keyword">this</span>.settings, threadPool, transportService, namedWriteableRegistry,networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),clusterModule.getAllocationService());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.nodeService = <span class="keyword">new</span> NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,searchTransportService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SearchService searchService = newSearchService(clusterService, indicesService, threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),responseCollectorService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;PersistentTasksExecutor&lt;?&gt;&gt; tasksExecutors = pluginsService</span><br><span class="line">            .filterPlugins(PersistentTaskPlugin.class).stream()</span><br><span class="line">     .map(p -&gt; p.getPersistentTasksExecutor(clusterService, threadPool, client))</span><br><span class="line">            .flatMap(List::stream)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PersistentTasksExecutorRegistry registry = <span class="keyword">new</span> PersistentTasksExecutorRegistry(settings, tasksExecutors);</span><br><span class="line">        <span class="keyword">final</span> PersistentTasksClusterService persistentTasksClusterService =</span><br><span class="line">            <span class="keyword">new</span> PersistentTasksClusterService(settings, registry, clusterService);</span><br><span class="line">        <span class="keyword">final</span> PersistentTasksService persistentTasksService = <span class="keyword">new</span> PersistentTasksService(settings, clusterService, threadPool, client);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8、绑定处理各种服务的实例,这里是最核心的地方,也是Elasticsearch能处理各种服务的核心.</span></span><br><span class="line">        modules.add(b -&gt; &#123;</span><br><span class="line">            b.bind(Node.class).toInstance(<span class="keyword">this</span>);</span><br><span class="line">            b.bind(NodeService.class).toInstance(nodeService);</span><br><span class="line">            b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry);</span><br><span class="line">            b.bind(PluginsService.class).toInstance(pluginsService);</span><br><span class="line">            b.bind(Client.class).toInstance(client);</span><br><span class="line">            b.bind(NodeClient.class).toInstance(client);</span><br><span class="line">            b.bind(Environment.class).toInstance(<span class="keyword">this</span>.environment);</span><br><span class="line">            b.bind(ThreadPool.class).toInstance(threadPool);</span><br><span class="line">            b.bind(NodeEnvironment.class).toInstance(nodeEnvironment);</span><br><span class="line"> b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService);</span><br><span class="line">b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService);</span><br><span class="line">            b.bind(BigArrays.class).toInstance(bigArrays);</span><br><span class="line">      b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());</span><br><span class="line"> b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry());</span><br><span class="line">            b.bind(IngestService.class).toInstance(ingestService);</span><br><span class="line">            b.bind(UsageService.class).toInstance(usageService);</span><br><span class="line"> b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);</span><br><span class="line">            b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader);</span><br><span class="line">            b.bind(MetaStateService.class).toInstance(metaStateService);</span><br><span class="line">            b.bind(IndicesService.class).toInstance(indicesService);</span><br><span class="line">            b.bind(SearchService.class).toInstance(searchService);            b.bind(SearchTransportService.class).toInstance(searchTransportService);</span><br><span class="line">b.bind(SearchPhaseController.class).toInstance(<span class="keyword">new</span> SearchPhaseController(settings, searchService::createReduceContext));</span><br><span class="line">            b.bind(Transport.class).toInstance(transport);</span><br><span class="line">            b.bind(TransportService.class).toInstance(transportService);</span><br><span class="line">            b.bind(NetworkService.class).toInstance(networkService);</span><br><span class="line">            b.bind(UpdateHelper.class).toInstance(<span class="keyword">new</span> UpdateHelper(settings, scriptModule.getScriptService()));</span><br><span class="line">b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService);</span><br><span class="line">            b.bind(ClusterInfoService.class).toInstance(clusterInfoService);</span><br><span class="line">            b.bind(GatewayMetaState.class).toInstance(gatewayMetaState);</span><br><span class="line">            b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());</span><br><span class="line">            &#123;</span><br><span class="line">                RecoverySettings recoverySettings = <span class="keyword">new</span> RecoverySettings(settings, settingsModule.getClusterSettings());</span><br><span class="line">                processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings);</span><br><span class="line">                b.bind(PeerRecoverySourceService.class).toInstance(<span class="keyword">new</span> PeerRecoverySourceService(settings, transportService,</span><br><span class="line">indicesService, recoverySettings));</span><br><span class="line">                b.bind(PeerRecoveryTargetService.class).toInstance(<span class="keyword">new</span> PeerRecoveryTargetService(settings, threadPool,</span><br><span class="line">transportService, recoverySettings, clusterService));</span><br><span class="line">            &#125;</span><br><span class="line">            httpBind.accept(b);</span><br><span class="line">            pluginComponents.stream().forEach(p -&gt; b.bind((Class) p.getClass()).toInstance(p));</span><br><span class="line">b.bind(PersistentTasksService.class).toInstance(persistentTasksService);       b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService);</span><br><span class="line">b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry); &#125;);</span><br><span class="line">        injector = modules.createInjector();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO hack around circular dependencies problems in AllocationService</span></span><br><span class="line">clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class));</span><br><span class="line"></span><br><span class="line">        List&lt;LifecycleComponent&gt; pluginLifecycleComponents = pluginComponents.stream()</span><br><span class="line">            .filter(p -&gt; p <span class="keyword">instanceof</span> LifecycleComponent)</span><br><span class="line">            .map(p -&gt; (LifecycleComponent) p).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9、利用Guice将各种模块以及服务(xxxService)注入到Elasticsearch环境中</span></span><br><span class="line">pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()                                     .map(injector::getInstance).collect(Collectors.toList()));</span><br><span class="line">        resourcesToClose.addAll(pluginLifecycleComponents);</span><br><span class="line">        <span class="keyword">this</span>.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents);</span><br><span class="line">        client.initialize(injector.getInstance(<span class="keyword">new</span> Key&lt;Map&lt;GenericAction, TransportAction&gt;&gt;() &#123;&#125;), () -&gt; clusterService.localNode().getId(), transportService.getRemoteClusterService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123; <span class="comment">//如果elasticsearch.yml文件中配置了http.enabled参数(默认为true),则会初始化RestHandlers</span></span><br><span class="line">            logger.debug(<span class="string">"initializing HTTP handlers ..."</span>);</span><br><span class="line">            actionModule.initRestHandlers(() -&gt; clusterService.state().nodes()); <span class="comment">//初始化RestHandlers, 解析集群命令,如_cat/,_cat/health</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10、初始化工作完成</span></span><br><span class="line">        logger.info(<span class="string">"initialized"</span>);</span><br><span class="line"></span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to bind service"</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            IOUtils.closeWhileHandlingException(resourcesToClose);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码真的很多，这里再说下上面这么多代码主要干了什么吧：（具体是哪行代码执行的如下流程，上面代码中也标记了）</p><p>1、创建节点环境,比如节点名称,节点 ID,分片信息,存储元,以及分配内存准备给节点使用</p><p>2、打印出 JVM 相关信息</p><p>3、利用 PluginsService 加载相应的模块和插件，具体哪些模块可以去 modules 目录下查看</p><p>4、加载一些额外的配置参数</p><p>5、创建一个节点客户端</p><p>6、缓存一系列模块,如NodeModule,ClusterModule,IndicesModule,ActionModule,GatewayModule,SettingsModule,RepositioriesModule，scriptModule，analysisModule</p><p>7、获取 RestController，用于处理各种 Elasticsearch 的 rest 命令,如 _cat, _all, _cat/health, _clusters 等 rest命令</p><p>8、绑定处理各种服务的实例</p><p>9、利用 Guice 将各种模块以及服务(xxxService)注入到 Elasticsearch 环境中</p><p>10、初始化工作完成（打印日志）</p><h3 id="JarHell-报错解释"><a href="#JarHell-报错解释" class="headerlink" title="JarHell 报错解释"></a>JarHell 报错解释</h3><p>前一篇阅读源码环境搭建的文章写过用 JDK 1.8 编译 ES 源码是会遇到如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: jar hell!</span><br></pre></td></tr></table></figure><p>这里说下就是 setup 方法中的如下代码导致的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// look for jar hell</span></span><br><span class="line">    <span class="keyword">final</span> Logger logger = ESLoggerFactory.getLogger(JarHell.class);</span><br><span class="line">    JarHell.checkJarHell(logger::debug);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以你如果是用 JDK 1.8 编译的，那么就需要把所有的有这块的代码给注释掉就可以编译成功的。</p><p>我自己试过用 JDK 10 编译是没有出现这里报错的。</p><h3 id="正式启动-ES-节点"><a href="#正式启动-ES-节点" class="headerlink" title="正式启动 ES 节点"></a>正式启动 ES 节点</h3><p>回到上面 Bootstrap 中的静态 init 方法中，接下来就是正式启动 elasticsearch 节点了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE.start();  <span class="comment">//调用下面的 start 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">    node.start();                                       <span class="comment">//正式启动 Elasticsearch 节点</span></span><br><span class="line">    keepAliveThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看这个 start 方法里面的 <code>node.start()</code> 方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lifecycle.moveToStarted()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings));</span><br><span class="line">    logger.info(<span class="string">"starting ..."</span>);</span><br><span class="line">    pluginLifecycleComponents.forEach(LifecycleComponent::start); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、利用Guice获取上述注册的各种模块以及服务</span></span><br><span class="line">    <span class="comment">//Node 的启动其实就是 node 里每个组件的启动，同样的，分别调用不同的实例的 start 方法来启动这个组件, 如下：</span></span><br><span class="line">    injector.getInstance(MappingUpdatedAction.class).setClient(client);</span><br><span class="line">    injector.getInstance(IndicesService.class).start();</span><br><span class="line">    injector.getInstance(IndicesClusterStateService.class).start();</span><br><span class="line">    injector.getInstance(SnapshotsService.class).start();</span><br><span class="line">    injector.getInstance(SnapshotShardsService.class).start();</span><br><span class="line">    injector.getInstance(RoutingService.class).start();</span><br><span class="line">    injector.getInstance(SearchService.class).start();</span><br><span class="line">    nodeService.getMonitorService().start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ClusterService clusterService = injector.getInstance(ClusterService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class);</span><br><span class="line">    nodeConnectionsService.start();</span><br><span class="line">    clusterService.setNodeConnectionsService(nodeConnectionsService);</span><br><span class="line"></span><br><span class="line">    injector.getInstance(ResourceWatcherService.class).start();</span><br><span class="line">    injector.getInstance(GatewayService.class).start();</span><br><span class="line">    Discovery discovery = injector.getInstance(Discovery.class);</span><br><span class="line">    clusterService.getMasterService().setClusterStatePublisher(discovery::publish);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the transport service now so the publish address will be added to the local disco node in ClusterService</span></span><br><span class="line">    TransportService transportService = injector.getInstance(TransportService.class);</span><br><span class="line">    transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class));</span><br><span class="line">    transportService.start();</span><br><span class="line">    <span class="keyword">assert</span> localNodeFactory.getNode() != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">assert</span> transportService.getLocalNode().equals(localNodeFactory.getNode())</span><br><span class="line">        : <span class="string">"transportService has a different local node than the factory provided"</span>;</span><br><span class="line">    <span class="keyword">final</span> MetaData onDiskMetadata;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// we load the global state here (the persistent part of the cluster state stored on disk) to</span></span><br><span class="line">        <span class="comment">// pass it to the bootstrap checks to allow plugins to enforce certain preconditions based on the recovered state.</span></span><br><span class="line">        <span class="keyword">if</span> (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) &#123;<span class="comment">//根据配置文件看当前节点是master还是data节点</span></span><br><span class="line">            onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onDiskMetadata = MetaData.EMPTY_META_DATA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> onDiskMetadata != <span class="keyword">null</span> : <span class="string">"metadata is null but shouldn't"</span>; <span class="comment">// this is never null</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UncheckedIOException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    validateNodeBeforeAcceptingRequests(<span class="keyword">new</span> BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService</span><br><span class="line">        .filterPlugins(Plugin</span><br><span class="line">        .class)</span><br><span class="line">        .stream()</span><br><span class="line">        .flatMap(p -&gt; p.getBootstrapChecks().stream()).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、将当前节点加入到一个集群簇中去,并启动当前节点</span></span><br><span class="line">    clusterService.addStateApplier(transportService.getTaskManager());</span><br><span class="line">    <span class="comment">// start after transport service so the local disco is known</span></span><br><span class="line">    discovery.start(); <span class="comment">// start before cluster service so that it can set initial state on ClusterApplierService</span></span><br><span class="line">    clusterService.start();</span><br><span class="line">    <span class="keyword">assert</span> clusterService.localNode().equals(localNodeFactory.getNode())</span><br><span class="line">        : <span class="string">"clusterService has a different local node than the factory provided"</span>;</span><br><span class="line">    transportService.acceptIncomingRequests();</span><br><span class="line">    discovery.startInitialJoin();</span><br><span class="line">    <span class="comment">// tribe nodes don't have a master so we shouldn't register an observer         s</span></span><br><span class="line">    <span class="keyword">final</span> TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings);</span><br><span class="line">    <span class="keyword">if</span> (initialStateTimeout.millis() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadPool thread = injector.getInstance(ThreadPool.class);</span><br><span class="line">        ClusterState clusterState = clusterService.state();</span><br><span class="line">        ClusterStateObserver observer = <span class="keyword">new</span> ClusterStateObserver(clusterState, clusterService, <span class="keyword">null</span>, logger, thread.getThreadContext());</span><br><span class="line">        <span class="keyword">if</span> (clusterState.nodes().getMasterNodeId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.debug(<span class="string">"waiting to join the cluster. timeout [&#123;&#125;]"</span>, initialStateTimeout);</span><br><span class="line">            <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            observer.waitForNextChange(<span class="keyword">new</span> ClusterStateObserver.Listener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewClusterState</span><span class="params">(ClusterState state)</span> </span>&#123; latch.countDown(); &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClusterServiceClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(TimeValue timeout)</span> </span>&#123;</span><br><span class="line">                    logger.warn(<span class="string">"timed out while waiting for initial discovery state - timeout: &#123;&#125;"</span>,</span><br><span class="line">                        initialStateTimeout);</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, state -&gt; state.nodes().getMasterNodeId() != <span class="keyword">null</span>, initialStateTimeout);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                latch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchTimeoutException(<span class="string">"Interrupted while waiting for initial discovery state"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123;</span><br><span class="line">        injector.getInstance(HttpServerTransport.class).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WRITE_PORTS_FILE_SETTING.get(settings)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123;</span><br><span class="line">            HttpServerTransport http = injector.getInstance(HttpServerTransport.class);</span><br><span class="line">            writePortsFile(<span class="string">"http"</span>, http.boundAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        TransportService transport = injector.getInstance(TransportService.class);</span><br><span class="line">        writePortsFile(<span class="string">"transport"</span>, transport.boundAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"started"</span>);</span><br><span class="line"></span><br><span class="line">    pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码主要是：</p><p>1、利用 Guice 获取上述注册的各种模块以及服务，然后启动 node 里每个组件（分别调用不同的实例的 start 方法来启动）</p><p>2、打印日志（启动节点完成）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要把大概启动流程串通了，讲了下 node 节点的创建和正式启动 ES 节点了。因为篇幅较多所以拆开成两篇，先不扣细节了，后面流程启动文章写完后我们再单一的扣细节。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/" target="_blank" rel="noopener">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fu8gbvoubfj31hc0vlqdt.jpg&quot; alt=&quot;006&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程（上）</title>
    <link href="http://yoursite.com/2018/08/11/es-code02/"/>
    <id>http://yoursite.com/2018/08/11/es-code02/</id>
    <published>2018-08-10T16:00:00.000Z</published>
    <updated>2018-08-14T13:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu8gag9ycij31hc0w0awj.jpg" alt="005"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/11/es-code02/</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>上篇文章写了 <a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">ElasticSearch 源码解析 —— 环境搭建</a> ，其中里面说了启动 打开 server 模块下的 Elasticsearch 类：org.elasticsearch.bootstrap.Elasticsearch，运行里面的 main 函数就可以启动 ElasticSearch 了，这篇文章讲讲启动流程，因为篇幅会很多，所以分了两篇来写。</p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><h4 id="main-方法入口"><a href="#main-方法入口" class="headerlink" title="main 方法入口"></a>main 方法入口</h4><p>可以看到入口其实是一个 main 方法，方法里面先是检查权限，然后是一个错误日志监听器（确保在日志配置之前状态日志没有出现 error），然后是 Elasticsearch 对象的创建，然后调用了静态方法 main 方法（18 行），并把创建的对象和参数以及 Terminal 默认值传进去。静态的 main 方法里面调用 elasticsearch.main 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;         <span class="comment">//1、入口</span></span><br><span class="line">    <span class="comment">// we want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the</span></span><br><span class="line">    <span class="comment">// presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy)</span></span><br><span class="line">    System.setSecurityManager(<span class="keyword">new</span> SecurityManager() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// grant all permissions so that we can later set the security manager to the one that we want</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    LogConfigurator.registerErrorListener();                            <span class="comment">//</span></span><br><span class="line">    <span class="keyword">final</span> Elasticsearch elasticsearch = <span class="keyword">new</span> Elasticsearch();</span><br><span class="line">    <span class="keyword">int</span> status = main(args, elasticsearch, Terminal.DEFAULT); <span class="comment">//2、调用Elasticsearch.main方法</span></span><br><span class="line">    <span class="keyword">if</span> (status != ExitCodes.OK) &#123;</span><br><span class="line">        exit(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> Elasticsearch elasticsearch, <span class="keyword">final</span> Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elasticsearch.main(args, terminal);  <span class="comment">//3、command main</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu77z6ktl2j315i0t2myl.jpg" alt="1es01"></p><p>因为 Elasticsearch 类是继承了 EnvironmentAwareCommand  类，EnvironmentAwareCommand  类继承了 Command 类，但是 Elasticsearch 类并没有重写 main 方法，所以上面调用的 elasticsearch.main 其实是调用了 Command 的 main 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Parses options for this command from args and executes it. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (addShutdownHook()) &#123;                                                <span class="comment">//利用Runtime.getRuntime().addShutdownHook方法加入一个Hook，在程序退出时触发该Hook</span></span><br><span class="line">        shutdownHookThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                    PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw)) &#123;</span><br><span class="line">                    e.printStackTrace(pw);</span><br><span class="line">                    terminal.println(sw.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException impossible) &#123;</span><br><span class="line">                    <span class="comment">// StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter</span></span><br><span class="line">                    <span class="comment">// say that an exception here is impossible</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(impossible);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHookThread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    beforeMain.run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mainWithoutErrorHandling(args, terminal);<span class="comment">//4、mainWithoutErrorHandling</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (OptionException e) &#123;</span><br><span class="line">        printHelp(terminal);</span><br><span class="line">        terminal.println(Terminal.Verbosity.SILENT, <span class="string">"ERROR: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ExitCodes.USAGE;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UserException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.exitCode == ExitCodes.USAGE) &#123;</span><br><span class="line">            printHelp(terminal);</span><br><span class="line">        &#125;</span><br><span class="line">        terminal.println(Terminal.Verbosity.SILENT, <span class="string">"ERROR: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> e.exitCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ExitCodes.OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码一开始利用一个勾子函数，在程序退出时触发该 Hook，该方法主要代码是 mainWithoutErrorHandling() 方法，然后下面的是 catch 住方法抛出的异常，方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** Executes the command, but all errors are thrown. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainWithoutErrorHandling</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> OptionSet options = parser.parse(args);</span><br><span class="line">    <span class="keyword">if</span> (options.has(helpOption)) &#123;</span><br><span class="line">        printHelp(terminal);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.has(silentOption)) &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.SILENT);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.has(verboseOption)) &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.VERBOSE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line">    execute(terminal, options);<span class="comment">//5、执行 EnvironmentAwareCommand 中的 execute()，（重写了command里面抽象的execute方法）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码从 3 ～ 14 行是解析传进来的参数并配置 terminal，重要的 execute() 方法，执行的是 EnvironmentAwareCommand 中的 execute() （重写了 Command 类里面的抽象 execute 方法），从上面那个继承图可以看到 EnvironmentAwareCommand 继承了 Command，重写的 execute 方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; settings = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> KeyValuePair kvp : settingOption.values(options)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kvp.value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"setting ["</span> + kvp.key + <span class="string">"] must not be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (settings.containsKey(kvp.key)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String message = String.format(</span><br><span class="line">                Locale.ROOT, <span class="string">"setting [%s] already set, saw [%s] and [%s]"</span>,</span><br><span class="line">                kvp.key, settings.get(kvp.key), kvp.value);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, message);</span><br><span class="line">        &#125;</span><br><span class="line">        settings.put(kvp.key, kvp.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、根据我们ide配置的 vm options 进行设置path.data、path.home、path.logs</span></span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.data"</span>, <span class="string">"es.path.data"</span>);</span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.home"</span>, <span class="string">"es.path.home"</span>);</span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.logs"</span>, <span class="string">"es.path.logs"</span>);</span><br><span class="line"></span><br><span class="line">    execute(terminal, options, createEnv(terminal, settings));<span class="comment">//7、先调用 createEnv 创建环境</span></span><br><span class="line">    <span class="comment">//9、执行elasticsearch的execute方法，elasticsearch中重写了EnvironmentAwareCommand中的抽象execute方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法前面是根据传参去判断配置的，如果配置为空，就会直接跳到执行 putSystemPropertyIfSettingIsMissing 方法，这里会配置三个属性：path.data、path.home、path.logs 设置 es 的 data、home、logs 目录，它这里是根据我们 ide 配置的 vm options 进行设置的，这也是为什么我们<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/#%E7%BC%96%E8%AF%91" target="_blank" rel="noopener">上篇文章</a>说的配置信息，如果不配置的话就会直接报错。下面看看 putSystemPropertyIfSettingIsMissing 方法代码里面怎么做到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Ensure the given setting exists, reading it from system properties if not already set. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putSystemPropertyIfSettingIsMissing</span><span class="params">(<span class="keyword">final</span> Map&lt;String, String&gt; settings, <span class="keyword">final</span> String setting, <span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String value = System.getProperty(key);<span class="comment">//获取key（es.path.data）找系统设置</span></span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (settings.containsKey(setting)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String message =</span><br><span class="line">                String.format(</span><br><span class="line">                Locale.ROOT,</span><br><span class="line">                <span class="string">"duplicate setting [%s] found via command-line [%s] and system property [%s]"</span>,</span><br><span class="line">                setting, settings.get(setting), value);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            settings.put(setting, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这三个方法后：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu77z62vazj31kw0rwwty.jpg" alt="2es02"></p><p>跳出此方法，继续看会发现 execute 方法调用了方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute(terminal, options, createEnv(terminal, settings));</span><br></pre></td></tr></table></figure><p>这里我们先看看 <code>createEnv(terminal, settings)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Environment <span class="title">createEnv</span><span class="params">(<span class="keyword">final</span> Terminal terminal, <span class="keyword">final</span> Map&lt;String, String&gt; settings)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String esPathConf = System.getProperty(<span class="string">"es.path.conf"</span>);<span class="comment">//8、读取我们 vm options 中配置的 es.path.conf</span></span><br><span class="line">    <span class="keyword">if</span> (esPathConf == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, <span class="string">"the system property [es.path.conf] must be set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, terminal, settings, getConfigPath(esPathConf));  <span class="comment">//8、准备环境 prepareEnvironment</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取我们 ide vm options 中配置的 es.path.conf，同上篇文章也讲了这个一定要配置的，因为 es 启动的时候会加载我们的配置和一些插件。这里继续看下上面代码第 6 行的 prepareEnvironment 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties, Path configPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// just create enough settings to build the environment, to get the config dir</span></span><br><span class="line">    Settings.Builder output = Settings.builder();</span><br><span class="line">    initializeSettings(output, input, properties);</span><br><span class="line">    Environment environment = <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看 es.path.conf 目录下的配置文件是不是 yml 格式的，如果不是则抛出一个异常</span></span><br><span class="line">    <span class="keyword">if</span> (Files.exists(environment.configFile().resolve(<span class="string">"elasticsearch.yaml"</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Files.exists(environment.configFile().resolve(<span class="string">"elasticsearch.json"</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output = Settings.builder(); <span class="comment">// start with a fresh output</span></span><br><span class="line">    Path path = environment.configFile().resolve(<span class="string">"elasticsearch.yml"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            output.loadFromPath(path);  <span class="comment">//加载文件并读取配置文件内容</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"Failed to load settings from "</span> + path.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// re-initialize settings now that the config file has been loaded</span></span><br><span class="line">    initializeSettings(output, input, properties);          <span class="comment">//再一次初始化设置</span></span><br><span class="line">    finalizeSettings(output, terminal);</span><br><span class="line"></span><br><span class="line">    environment = <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we put back the path.logs so we can use it in the logging configuration file</span></span><br><span class="line">    output.put(Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile().toAbsolutePath().normalize().toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu77z80q0rj31kw0zknk0.jpg" alt="3es03"></p><p>准备的环境如上图，通过构建的环境查看配置文件 elasticsearch.yml 是不是以 yml 结尾，如果是 yaml 或者 json 结尾的则抛出异常（在 5.5.0 版本其他两种格式过期了，只能使用 yml 格式），然后加载该配置文件并读取里面的内容（KV结构）。</p><p>跳出 createEnv 方法，我们继续看 execute 方法吧。</p><p>EnvironmentAwareCommand 类的 execute 方法代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p> 这是个抽象方法，那么它的实现方法在 Elasticsearch 类中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options.nonOptionArguments().isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Positional arguments not allowed, found "</span> + options.nonOptionArguments());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.has(versionOption)) &#123;</span><br><span class="line">        <span class="keyword">final</span> String versionOutput = String.format(</span><br><span class="line">            Locale.ROOT,</span><br><span class="line">            <span class="string">"Version: %s, Build: %s/%s/%s/%s, JVM: %s"</span>,</span><br><span class="line">            Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),</span><br><span class="line">            Build.CURRENT.flavor().displayName(),</span><br><span class="line">            Build.CURRENT.type().displayName(),</span><br><span class="line">            Build.CURRENT.shortHash(),</span><br><span class="line">            Build.CURRENT.date(),</span><br><span class="line">            JvmInfo.jvmInfo().version());</span><br><span class="line">        terminal.println(versionOutput);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> daemonize = options.has(daemonizeOption);</span><br><span class="line">    <span class="keyword">final</span> Path pidFile = pidfileOption.value(options);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quiet = options.has(quietOption);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        env.validateTmpFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        init(daemonize, pidFile, quiet, env);    <span class="comment">//10、初始化</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NodeValidationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码里主要还是看看 <code>init(daemonize, pidFile, quiet, env);</code> 初始化方法吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> daemonize, <span class="keyword">final</span> Path pidFile, <span class="keyword">final</span> <span class="keyword">boolean</span> quiet, Environment initialEnv)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NodeValidationException, UserException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Bootstrap.init(!daemonize, pidFile, quiet, initialEnv); <span class="comment">//11、执行 Bootstrap 中的 init 方法</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (BootstrapException | RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// format exceptions to the console in a special way</span></span><br><span class="line">        <span class="comment">// to avoid 2MB stacktraces from guice, etc.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StartupException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><p>Bootstrap 中的静态 init 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">boolean</span> foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Path pidFile,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">boolean</span> quiet,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Environment initialEnv)</span> <span class="keyword">throws</span> BootstrapException, NodeValidationException, UserException </span>&#123;</span><br><span class="line">    <span class="comment">// force the class initializer for BootstrapInfo to run before</span></span><br><span class="line">    <span class="comment">// the security manager is installed</span></span><br><span class="line">    BootstrapInfo.init();</span><br><span class="line"></span><br><span class="line">    INSTANCE = <span class="keyword">new</span> Bootstrap();   <span class="comment">//12、创建一个 Bootstrap 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SecureSettings keystore = loadSecureSettings(initialEnv);<span class="comment">//如果注册了安全模块则将相关配置加载进来</span></span><br><span class="line">    <span class="keyword">final</span> Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());   <span class="comment">//干之前干过的事情</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        LogConfigurator.configure(environment);   <span class="comment">//13、log 配置环境</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (environment.pidFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PidFile.create(environment.pidFile(), <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> closeStandardStreams = (foreground == <span class="keyword">false</span>) || quiet;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">            <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">            <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">            <span class="keyword">if</span> (maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">            &#125;</span><br><span class="line">            closeSystOut();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fail if somebody replaced the lucene jars</span></span><br><span class="line">        checkLucene();             <span class="comment">//14、检查Lucene版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// install the default uncaught exception handler; must be done before security is initialized as we do not want to grant the runtime permission setDefaultUncaughtExceptionHandler</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(</span><br><span class="line">            <span class="keyword">new</span> ElasticsearchUncaughtExceptionHandler(() -&gt; Node.NODE_NAME_SETTING.get(environment.settings())));</span><br><span class="line"></span><br><span class="line">        INSTANCE.setup(<span class="keyword">true</span>, environment);      <span class="comment">//15、调用 setup 方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// any secure settings must be read during node construction</span></span><br><span class="line">            IOUtils.close(keystore);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INSTANCE.start();         <span class="comment">//26、调用 start 方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">            closeSysError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NodeValidationException | RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// disable console logging, so user does not see the exception twice (jvm will show it already)</span></span><br><span class="line">        <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">        <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">        <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">        &#125;</span><br><span class="line">        Logger logger = Loggers.getLogger(Bootstrap.class);</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE.node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger = Loggers.getLogger(Bootstrap.class, Node.NODE_NAME_SETTING.get(INSTANCE.node.settings()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// HACK, it sucks to do this, but we will run users out of disk space otherwise</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CreationException) &#123;</span><br><span class="line">            <span class="comment">// guice: log the shortened exc to the log file</span></span><br><span class="line">            ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps = <span class="keyword">new</span> PrintStream(os, <span class="keyword">false</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line">                <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">                e.addSuppressed(uee);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span> StartupException(e).printStackTrace(ps);</span><br><span class="line">            ps.flush();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"Guice Exception: &#123;&#125;"</span>, os.toString(<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line">                <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">                e.addSuppressed(uee);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> NodeValidationException) &#123;</span><br><span class="line">            logger.error(<span class="string">"node validation exception\n&#123;&#125;"</span>, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// full exception</span></span><br><span class="line">            logger.error(<span class="string">"Exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// re-enable it if appropriate, so they can see any logging during the shutdown process</span></span><br><span class="line">        <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Loggers.addAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要有：</p><p>1、创建 Bootstrap 实例</p><p>2、如果注册了安全模块则将相关配置加载进来</p><p>3、创建 Elasticsearch 运行的必须环境以及相关配置, 如将 config、scripts、plugins、modules、logs、lib、bin 等配置目录加载到运行环境中</p><p>4、log 配置环境，创建日志上下文</p><p>5、检查是否存在 PID 文件，如果不存在，创建 PID 文件</p><p>6、检查 Lucene 版本</p><p>7、调用 setup 方法（用当前环境来创建一个节点）</p><h4 id="setup-方法"><a href="#setup-方法" class="headerlink" title="setup 方法"></a>setup 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">boolean</span> addShutdownHook, Environment environment)</span> <span class="keyword">throws</span> BootstrapException </span>&#123;</span><br><span class="line">    Settings settings = environment.settings();<span class="comment">//根据环境得到配置</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        spawner.spawnNativeControllers(environment);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    initializeNatives(</span><br><span class="line">        environment.tmpFile(),</span><br><span class="line">        BootstrapSettings.MEMORY_LOCK_SETTING.get(settings),</span><br><span class="line">        BootstrapSettings.SYSTEM_CALL_FILTER_SETTING.get(settings),</span><br><span class="line">        BootstrapSettings.CTRLHANDLER_SETTING.get(settings));</span><br><span class="line">    <span class="comment">// initialize probes before the security manager is installed</span></span><br><span class="line">    initializeProbes();</span><br><span class="line">    <span class="keyword">if</span> (addShutdownHook) &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    IOUtils.close(node, spawner);</span><br><span class="line">                    LoggerContext context = (LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">                    Configurator.shutdown(context);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to stop node"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// look for jar hell</span></span><br><span class="line">        <span class="keyword">final</span> Logger logger = ESLoggerFactory.getLogger(JarHell.class);</span><br><span class="line">        JarHell.checkJarHell(logger::debug);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Log ifconfig output before SecurityManager is installed</span></span><br><span class="line">    IfConfig.logIfNecessary();</span><br><span class="line">    <span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Security.configure(environment, BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    node = <span class="keyword">new</span> Node(environment) &#123;              <span class="comment">//16、新建节点</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> BootstrapContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">            BootstrapChecks.check(context, boundTransportAddress, checks);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码最后就是 Node 节点的创建，这篇文章就不讲 Node 的创建了，下篇文章会好好讲一下 Node 节点的创建和正式启动 ES 节点的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要先把大概启动流程串通，因为篇幅较多所以拆开成两篇，先不扣细节了，后面流程启动文章写完后我们再单一的扣细节。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/" target="_blank" rel="noopener">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fu8gag9ycij31hc0w0awj.jpg&quot; alt=&quot;005&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</title>
    <link href="http://yoursite.com/2018/08/05/es-code01/"/>
    <id>http://yoursite.com/2018/08/05/es-code01/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-26T04:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fty28q9ljkj31hc0zbqf5.jpg" alt="girl-3551832_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/05/es-code01/</a></p><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>1、Intellij Idea:2018.2版本</p><p>2、Elasticsearch 源码版本: 6.3.2</p><p>3、JDK:10.0.2</p><p>4、Gradle : 建议 4.5 及以上版本</p><p>5、Macbook Pro 2017 </p><h3 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h3><p> 去 <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases</a> 这里找到 ElasticSearch 6.3.2 版本，下载后然后解压就好了。（注意：这个版本需要和下面的源码版本一致）</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>从 <a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a> 上下载相应版本的源代码，这里建议用 git clone ，这样的话后面你可以随意切换到 ElasticSearch 的其他版本去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:elastic/elasticsearch.git</span><br></pre></td></tr></table></figure><p>我们看下有哪些版本的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>找到了目前源码版本最新的版本的稳定版为：v6.3.2</p><p>切换到该版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout v6.3.2</span><br></pre></td></tr></table></figure><p>于是就可以切换到该稳定版本了。接下来不要直接导入到 IDEA/Eclipse 中。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><a href="https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md#configuring-ides-and-running-tests" target="_blank" rel="noopener">GitHub 这里</a>已经有描述如何导入 IDEA/Eclipse 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JDK 10 is required to build Elasticsearch. You must have a JDK 10 installation with the environment variable JAVA_HOME referencing the path to Java home for your JDK 10 installation. By default, tests use the same runtime as JAVA_HOME. However, since Elasticsearch, supports JDK 8 the build supports compiling with JDK 10 and testing on a JDK 8 runtime; to do this, set RUNTIME_JAVA_HOME pointing to the Java home of a JDK 8 installation. Note that this mechanism can be used to test against other JDKs as well, this is not only limited to JDK 8.</span><br><span class="line"></span><br><span class="line">Note: It is also required to have JAVA7_HOME, JAVA8_HOME and JAVA10_HOME available so that the tests can pass.</span><br><span class="line"></span><br><span class="line">Warning: do not use sdkman for Java installations which do not have proper jrunscript for jdk distributions.</span><br><span class="line"></span><br><span class="line">Elasticsearch uses the Gradle wrapper for its build. You can execute Gradle using the wrapper via the gradlew script in the root of the repository.</span><br><span class="line"></span><br><span class="line">Configuring IDEs And Running Tests</span><br><span class="line">Eclipse users can automatically configure their IDE: ./gradlew eclipse then File: Import: Existing Projects into Workspace. Select the option Search for nested projects. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying eclipse.ini accordingly to avoid GC overhead errors.</span><br><span class="line"></span><br><span class="line">IntelliJ users can automatically configure their IDE: ./gradlew idea then File-&gt;New Project From Existing Sources. Point to the root of the source directory, select Import project from external model-&gt;Gradle, enable Use auto-import. In order to run tests directly from IDEA 2017.2 and above, it is required to disable the IDEA run launcher in order to avoid idea_rt.jar causing &quot;jar hell&quot;. This can be achieved by adding the -Didea.no.launcher=true JVM option. Alternatively, idea.no.launcher=true can be set in the idea.properties file which can be accessed under Help &gt; Edit Custom Properties (this will require a restart of IDEA). For IDEA 2017.3 and above, in addition to the JVM option, you will need to go to Run-&gt;Edit Configurations-&gt;...-&gt;Defaults-&gt;JUnit and verify that the Shorten command line setting is set to user-local default: none. You may also need to remove ant-javafx.jar from your classpath if that is reported as a source of jar hell.</span><br><span class="line"></span><br><span class="line">To run an instance of elasticsearch from the source code run ./gradlew run</span><br><span class="line"></span><br><span class="line">The Elasticsearch codebase makes heavy use of Java asserts and the test runner requires that assertions be enabled within the JVM. This can be accomplished by passing the flag -ea to the JVM on startup.</span><br><span class="line"></span><br><span class="line">For IntelliJ, go to Run-&gt;Edit Configurations...-&gt;Defaults-&gt;JUnit-&gt;VM options and input -ea.</span><br><span class="line"></span><br><span class="line">For Eclipse, go to Preferences-&gt;Java-&gt;Installed JREs and add -ea to VM Arguments.</span><br></pre></td></tr></table></figure><p>上面说了下如何编译 Elasticsearch 和如何在 ide 中配置好环境。下面说下步骤吧：（这里我只是演示在 IDEA 中如何导入）</p><p>1、在我们下载的 Elasticsearch 根目录下执行命令：(执行已经写好的脚本 gradlew)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew idea</span><br></pre></td></tr></table></figure><p>请注意版本和我的一致，早的版本可能没有该执行脚本，需要执行 <code>gradle idea</code> 命令</p><p>最后结果如下：</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xfk9m9j31kw0ib494.jpg" alt="idea-config"></p><p>2、导入 IDEA </p><p>idea 中 <code>File -&gt; New Project From Existing Sources</code> 选择你下载的 Elasticsearch 根目录，然后点 <code>open</code> ，之后 <code>Import project from external model -&gt; Gradle</code> , 选中 <code>Use auto-import</code>, 然后就可以了。</p><p>导入进去后，gradle 又会编译一遍，需要等一会，好了之后如下：</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fty1xisz0kj31kw0w07jn.jpg" alt="ok"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开 server 模块下的 Elasticsearch 类：org.elasticsearch.bootstrap.Elasticsearch，运行里面的 main 函数。</p><p>1、报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: the system property [es.path.conf] must be set</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xdcx6zj30ss0ahjru.jpg" alt="1es-path-conf-must-be-set"></p><p>我们在运行的配置 vm options 如下：（后面启动流程会写为什么会报这个错误）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=&quot;/usr/local/elasticsearch-6.3.2/config&quot;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fty1xebbgxj30v10l9n0w.jpg" alt="2设置es-path-conf"></p><p>2、再次运行，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: path.home is not configured</span><br><span class="line">at org.elasticsearch.env.Environment.&lt;init&gt;(Environment.java:103)</span><br><span class="line">at org.elasticsearch.env.Environment.&lt;init&gt;(Environment.java:94)</span><br><span class="line">at org.elasticsearch.node.InternalSettingsPreparer.prepareEnvironment(InternalSettingsPreparer.java:86)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.createEnv(EnvironmentAwareCommand.java:95)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86)</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fty1xh2zblj30tk09s40w.jpg" alt="3path-home-not-config"></p><p>我们在运行的配置 vm options 如下：（后面启动流程会写为什么会报这个错误）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.home=&quot;/usr/local/elasticsearch-6.3.2&quot;</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xg4ktmj30v10l976r.jpg" alt="4配置es-path-home"></p><p>3、再次运行，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2018-08-01 09:38:03,974 main ERROR Could not register mbeans java.security.AccessControlException: access denied (&quot;javax.management.MBeanTrustPermission&quot; &quot;register&quot;)</span><br><span class="line">at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)</span><br><span class="line">at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:371)</span><br><span class="line">at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1805)</span><br><span class="line">at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:318)</span><br><span class="line">at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.register(Server.java:389)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.reregisterMBeansAfterReconfigure(Server.java:167)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.reregisterMBeansAfterReconfigure(Server.java:140)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:556)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:261)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:206)</span><br><span class="line">at org.apache.logging.log4j.core.config.Configurator.initialize(Configurator.java:220)</span><br><span class="line">at org.apache.logging.log4j.core.config.Configurator.initialize(Configurator.java:197)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configureStatusLogger(LogConfigurator.java:171)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configure(LogConfigurator.java:140)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configure(LogConfigurator.java:119)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:294)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86)</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xcqbf1j316r0tbn87.jpg" alt="5access-denied"></p><p>我们在运行的配置 vm options 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dlog4j2.disable.jmx=true</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fty1xglydpj30v10l9q5h.jpg" alt="6log4j-disable-jmx"></p><p>4、如果你用的是 JDK 1.8 编译的应该还会报这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-01T11:02:24,663][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: jar hell!</span><br><span class="line">class: jdk.packager.services.UserJvmOptionsService</span><br><span class="line">jar1: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/ant-javafx.jar</span><br><span class="line">jar2: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/packager.jar</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.lang.IllegalStateException: jar hell!</span><br><span class="line">class: jdk.packager.services.UserJvmOptionsService</span><br><span class="line">jar1: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/ant-javafx.jar</span><br><span class="line">jar2: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/packager.jar</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkClass(JarHell.java:273) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkJarHell(JarHell.java:190) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkJarHell(JarHell.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:198) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[main/:?]</span><br><span class="line">... 6 more</span><br><span class="line">2018-08-01 11:02:24,713 Thread-2 ERROR No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property &apos;log4j2.debug&apos; to show Log4j2 internal initialization logging.</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fty1xhjppqj31h40gbted.jpg" alt="8jar-hell"></p><p>有两个解决方法就是，</p><p>（1）、把源码中有关使用了 <code>JarHell.checkJarHell</code> 代码的地方全部注释掉就好了</p><p>（2）、换成 JDK 10 编译</p><p>两种方法我都试了是可行的，建议直接换第二种方案吧！</p><p>5、然后再启动的话，应该没问题了,出现下面日志：（网上很多人在这步就好了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch] Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,073][INFO ][o.e.n.Node               ] [node-0] initializing ...</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,185][INFO ][o.e.e.NodeEnvironment    ] [node-0] using [1] data paths, mounts [[/ (/dev/disk1s1)]], net usable_space [109.3gb], net total_space [233.4gb], types [apfs]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,187][INFO ][o.e.e.NodeEnvironment    ] [node-0] heap size [494.9mb], compressed ordinary object pointers [true]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,190][INFO ][o.e.n.Node               ] [node-0] node name [node-0], node ID [o9SuMXP-R7uvJLtE3h37Rw]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][INFO ][o.e.n.Node               ] [node-0] version[6.3.2-SNAPSHOT], pid[61499], build[default/zip/053779d/2018-08-04T08:39:59.714654Z], OS[Mac OS X/10.13.5/x86_64], JVM[&quot;Oracle Corporation&quot;/Java HotSpot(TM) 64-Bit Server VM/10.0.2/10.0.2+13]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][INFO ][o.e.n.Node               ] [node-0] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/var/folders/mb/3vpbvkkx13l2jmpt2kmmt0fr0000gn/T/elasticsearch.URRKTybG, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m, -Djava.locale.providers=COMPAT, -XX:UseAVX=2, -ea, -esa, -Xms512m, -Xmx512m, -Des.path.home=/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT, -Des.path.conf=/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT/config, -Des.distribution.flavor=default, -Des.distribution.type=zip]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][WARN ][o.e.n.Node               ] [node-0] version [6.3.2-SNAPSHOT] is a pre-release version of Elasticsearch and is not suitable for production</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,808][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [aggs-matrix-stats]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [analysis-common]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [ingest-common]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-expression]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-mustache]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-painless]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [mapper-extras]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [parent-join]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [percolator]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [rank-eval]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [reindex]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [repository-url]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [transport-netty4]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [tribe]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-core]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-deprecation]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-graph]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-logstash]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-ml]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-monitoring]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-rollup]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-security]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-sql]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-upgrade]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-watcher]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] no plugins loaded</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:32,722][INFO ][o.e.x.s.a.s.FileRolesStore] [node-0] parsed [0] roles from file [/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT/config/roles.yml]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:33,358][INFO ][o.e.x.m.j.p.l.CppLogMessageHandler] [controller/61517] [Main.cc@109] controller (64 bit): Version 6.3.2-SNAPSHOT (Build 903094f295d249) Copyright (c) 2018 Elasticsearch BV</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:33,783][DEBUG][o.e.a.ActionModule       ] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,110][INFO ][o.e.d.DiscoveryModule    ] [node-0] using discovery type [zen]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,971][INFO ][o.e.n.Node               ] [node-0] initialized</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,971][INFO ][o.e.n.Node               ] [node-0] starting ...</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:35,217][INFO ][o.e.t.TransportService   ] [node-0] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;[::1]:9300&#125;, &#123;127.0.0.1:9300&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,291][INFO ][o.e.c.s.MasterService    ] [node-0] zen-disco-elected-as-master ([0] nodes joined)[, ], reason: new_master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,295][INFO ][o.e.c.s.ClusterApplierService] [node-0] new_master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125;, reason: apply cluster state (from master [master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125; committed version [1] source [zen-disco-elected-as-master ([0] nodes joined)[, ]]])</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,317][INFO ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [node-0] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;[::1]:9200&#125;, &#123;127.0.0.1:9200&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,319][INFO ][o.e.n.Node               ] [node-0] started</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,358][WARN ][o.e.x.s.a.s.m.NativeRoleMappingStore] [node-0] Failed to clear cache for realms [[]]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,413][INFO ][o.e.g.GatewayService     ] [node-0] recovered [0] indices into cluster_state</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,597][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.watch-history-7] for index patterns [.watcher-history-7*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,660][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.watches] for index patterns [.watches*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,707][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.triggered_watches] for index patterns [.triggered_watches*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,771][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-logstash] for index patterns [.monitoring-logstash-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,836][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-es] for index patterns [.monitoring-es-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,878][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-alerts] for index patterns [.monitoring-alerts-6]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,926][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-beats] for index patterns [.monitoring-beats-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,970][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-kibana] for index patterns [.monitoring-kibana-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:39,055][INFO ][o.e.l.LicenseService     ] [node-0] license [79704513-d3c4-4535-8276-beeb146765de] mode [basic] - valid</span><br></pre></td></tr></table></figure><p>6、但是我出现了下面这个问题，一直困扰着我呢，我是直接跳过去的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-01T09:44:27,370][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [] fatal error in thread [main], exiting</span><br><span class="line">java.lang.NoClassDefFoundError: org/elasticsearch/plugins/ExtendedPluginsClassLoader</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:632) ~[main/:?]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:557) ~[main/:?]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:162) ~[main/:?]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:311) ~[main/:?]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:252) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:213) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:213) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.elasticsearch.plugins.ExtendedPluginsClassLoader</span><br><span class="line">at jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582) ~[?:?]</span><br><span class="line">at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:190) ~[?:?]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:499) ~[?:?]</span><br><span class="line">... 15 more</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fty1xi20xzj310q0ilgsa.jpg" alt="7noclassDefFoundError"></p><p>遇到的这个问题，我在 GitHub 求助信息如下：</p><p><a href="https://github.com/elastic/elasticsearch/issues/30774" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/30774</a></p><p>但是并没有解决我的问题，这里暂时先记录下来！我自己也跟了下源码，定位到错误信息是怎么产生的，但是没有解决方案！</p><p>后面写了篇文章：<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">教你如何在 IDEA 远程 Debug ElasticSearch</a></p><p>或许可以帮你解决上面问题带给你的困扰！</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>后面有一个读者提醒了我一下，他自己也遇到这个问题，然后他的解决方案挺好的，完美解决我的问题。这里做个记录：</p><p><strong>解决方法：</strong> 打开 IDEA <code>Edit Configurations</code> ，给 <code>Include dependencies with Provided scope</code> 打上勾即可解决，很简单吧！！</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fukk7004jvj30v10lwjtu.jpg" alt=""></p><p>继续RUN，又来一个 EXceptin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-23T01:13:38,551][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</span><br><span class="line">    at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472) ~[?:?]</span><br><span class="line">    at java.security.AccessController.checkPermission(AccessController.java:895) ~[?:?]</span><br><span class="line">    at java.lang.SecurityManager.checkPermission(SecurityManager.java:335) ~[?:?]</span><br><span class="line">    at java.lang.SecurityManager.checkCreateClassLoader(SecurityManager.java:397) ~[?:?]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Exception: java.security.AccessControlException thrown from the UncaughtExceptionHandler in thread &quot;Thread-2&quot;</span><br></pre></td></tr></table></figure><p><strong>第一种：</strong> 在 <code>config</code> 目录下新建 <code>java.policy</code> 文件，填入下面内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">    permission java.lang.RuntimePermission &quot;createClassLoader&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>VM options</code> 加入 <code>java.security.policy</code> 的设置，指向该文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.security.policy=/usr/local/elasticsearch-6.3.2/config/java.policy</span><br></pre></td></tr></table></figure><p><strong>第二种：</strong> 就是在 <code>%JAVA_HOME%/conf/security</code> 目录下（JDK10是这个路径，之前的版本不确定），我的目录是 <code>/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home/conf/security</code>，打开 <code>java.policy</code> 文件，在 <code>grant</code> 中加入下面这句，赋予权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//for es 6.3.2</span><br><span class="line">permission java.lang.RuntimePermission &quot;createClassLoader&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fukkbubwxkj312a0qktdf.jpg" alt=""></p><p>再 RUN，这次可终于运行起来了！！！</p><p>再次感谢下读者，他的文章地址是：<a href="">http://laijianfeng.org/2018/08/%E6%95%99%E4%BD%A0%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95Elasticsearch-6-3-2%E6%BA%90%E7%A0%81/</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>折腾的路上少不了各种错误烦扰你，学会解决问题！</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/" target="_blank" rel="noopener">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/" target="_blank" rel="noopener">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/" target="_blank" rel="noopener">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fty28q9ljkj31hc0zbqf5.jpg&quot; alt=&quot;girl-3551832_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡为什么要看 ElasticSearch 源码？</title>
    <link href="http://yoursite.com/2018/08/04/why-see-es-code/"/>
    <id>http://yoursite.com/2018/08/04/why-see-es-code/</id>
    <published>2018-08-03T16:00:00.000Z</published>
    <updated>2018-08-04T14:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fty1lwmoa0j31hc0vjjyz.jpg" alt="004"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>人工智能、大数据快速发展的今天，对于 TB 甚至 PB 级大数据的快速检索已然成为刚需，大型企业早已淹没在系统生成的浩瀚数据流当中。大数据技术业已集中在如何存储和处理这些海量的数据上。Elasticsearch 作为开源领域的后起之秀，从2010年至今得到飞跃式的发展。 Elasticsearch 以其开源、分布式、RESTFul API 三大优势，已经成为当下风口中“会飞的猪”。</p><p>在我的电脑本地写了几篇 ElasticSearch 的源码解析了，回过头来想想应该也写一篇为何我会去看它的源码？</p><p>为什么呢？下面我讲讲自己从接触搜索到现在看源码的过程！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/08/24/why-see-es-code/</a></p><h3 id="第一次接触搜索"><a href="#第一次接触搜索" class="headerlink" title="第一次接触搜索"></a>第一次接触搜索</h3><p>搜索，我们首先想到的是搜索引擎：Google、百度，这个就算是接触的最早的了。</p><p>我自己项目里面接触搜索是大二暑假那时练习的一个项目，里面用了 Solr，然后当时自己也稍微了解了下，并用在了项目里面。</p><h3 id="第二次接触搜索"><a href="#第二次接触搜索" class="headerlink" title="第二次接触搜索"></a>第二次接触搜索</h3><p>从第一次项目里面用到了搜索，后面自己对这方面就比较感兴趣。再一次接触搜索是实习的时候进公司。第一件事情就是被老大叫的去学习搭建 Elasticsearch 集群，于是乎，电脑就装了三个虚拟机，Elasticsearch 就一个个的装了起来了。也记录了博客下来：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a>，当时搭建的时候 ES 的版本才刚从 2.x 升级到 5.x 呢，截止本文时间 2018.08.04，现在 ES 版本已经是到 7.0 了，这版本升级是真的的快，这也说明了 ES 的活跃度很高，背后的开发工程师维护也快，侧面突出要去看它源码的重要性。</p><p>当时自己在本地测试搭建集群后，给分配了另外一个任务就是去了解 ES 中的自带分词、英文分词、中文分词的相同与差异、以及自己建立分词需要注意的点。于是乎：当时在公司 wiki 贡献了这篇文章：<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a>。这篇文章几乎已经把市面上所有的分词都写进去了，包括他们的相同点、不同点、如何使用、如何自定义分词器。</p><p>然后还有就是我同组的一个同学，她的任务就是 2.x 升级到 5.x 中 mapping 的大改变有哪些？后面我也看了她总结的文档，很详细！</p><p>在这次接触了 ES 后，因为我自己本地已经有环境了，所以自己测试了一些功能，给 ES 安装插件（IK、x-pack、支持 sql 的、），后面自己也去测试 ES 的索引、文档、REST API。</p><h3 id="第三次接触搜索"><a href="#第三次接触搜索" class="headerlink" title="第三次接触搜索"></a>第三次接触搜索</h3><p>由于是自己对其感兴趣，所以后面就去找了些相关的视频，比如：中华石衫的《Elasticsearch 顶尖高手系列-高手进阶篇》几个系列视频教程个人感觉还是不错的，看完这几个系列估计入门肯定是没有问题的。版权原因，不提供下载链接。</p><p>另外就是《Elasticsearch 权威指南》翻译的版本，翻译还没有全，可以去看看，讲得很详细的，市面上应该还没有哪本书讲的有这么清楚，如果英文不错的可以直接啃英文吧。</p><p>还有就是官网的文档了，非常非常详细，还有 demo，2.x 版本的是有中文的官方文档，可以凑合着看。</p><p>学习新东西，要学会先看官方文档，何况 Elasticsearch 的官方文档这么详细呢！</p><h3 id="第四次接触搜索"><a href="#第四次接触搜索" class="headerlink" title="第四次接触搜索"></a>第四次接触搜索</h3><p>后面实习的时候，又分配了公司中间件监控的两个模块：Elasticsearch 和 HBase 组件的监控。于是乎，再次有机会接触 Elasticsearch 了，这次主要还是利用 Elasticsearch 自带的 REST API ：<code>_cluster/health</code> 、<code>_cluster/stats</code>、<code>_nodes</code>、<code>_nodes/stats</code> 去获取到集群的健康信息、节点信息（内存、CPU、网络、JVM等信息）。为了做这个项目自己当时也去找了网上很多类似的文章参考常用的监控指标和他们是怎么做监控的。我当时的任务主要还是采集信息，然后存到公司大项目的 influxdb 中，最后用 grafana 展示出来，后面我组的运维大佬给我看了监控大盘，界面挺酷炫的，哈哈哈，牛逼！</p><p>当时写的两篇博客：</p><p>1、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>取之网络，还之网络，希望给后面做类似任务的小伙伴给点参考意见！</p><p>再就是自己搭建 ELK（ElasticSearch, Logstash, Kibana）日志分析平台，然后玩了下！</p><p>搭建环境博客：<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><h3 id="第五次接触搜索"><a href="#第五次接触搜索" class="headerlink" title="第五次接触搜索"></a>第五次接触搜索</h3><p>后面就没怎么接触 ElasticSearch 了，一直忙着其他的东西。</p><p>实习辞职后，毕业出来找工作的那段日子，自己又花了一星期稍微过了一遍 《Elasticsearch 权威指南》 这本书，话说还帮我面试挺过不少关呢，哈哈哈！因为我项目里写了 Elasticsearch 的监控，如果你对 Elasticsearch 其他的不熟悉，面试官稍微问些其他关于这方面的，那就不知道就有点尴尬😅了，所以还是准备了下。看完之后应付面试没多大的问题。</p><h3 id="第六次接触"><a href="#第六次接触" class="headerlink" title="第六次接触"></a>第六次接触</h3><p>看起来我接触了 Elasticsearch 很久了，其实真正项目里面是没有用到 Elasticsearch 做过项目的，没有用到 Elasticsearch 的搜索做什么项目，于是自己当时找工作其实也打算找到工作后看能不能自己做个项目或者公司项目里面用用 Elasticsearch 呢？</p><p>结果在新公司新项目里，很快就用到了。只不过这次不是 Java 项目里面用了，而是和 GoLang 整合。不过 API 都差不多，多熟悉几次就很快上手了，关键还是要懂 Elasticsearch 如何构造 DSL 查询语句，这样再转换成 GO 里面的 API 就快了。</p><p>还有就是公司里刚好有个中科院研究生大佬，他就写过 Elasticsearch 这块的书籍《从 lucene 到 Elasticsearch 全文检索实战》，另外他的 CSDN 博客也很火，阅读量很高，感兴趣的可以买本书支持下。</p><p>中途自己遇到 Elasticsearch 实在不会的问题也会主动去找大佬咨询，然后大佬耐心教教我这个渣渣菜鸡，在文章这里感谢下大佬这段时间的关照。</p><h3 id="萌生阅读源码的想法"><a href="#萌生阅读源码的想法" class="headerlink" title="萌生阅读源码的想法"></a>萌生阅读源码的想法</h3><p>既然接触了这么久的 Elasticsearch ，项目里用过，书籍也看过，虽然还不是很熟，但是如果看看它的源码是不是会让我对它的印象更深呢？</p><p>说干就干，晚上回家就从 GitHub clone 了源码在本地，那时刚好回家，就在火车上直接用 VS code 看了会源码，也没有在 ide 里 debug 起来。</p><p>写这篇文章的时候已经把 Elasticsearch 的整个启动流程（加载读取配置、加载插件等）、如何支持 REST API 看了下，后面会在下班后回家继续阅读源码，继续分享我的源码解析的。</p><p>有想法就去干，不尝试下，怎么知道适不适合你？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实阅读源码的主要原因还是自己感兴趣；另外就是这东西现在项目里确实也用到了，如果我对源码熟悉的话可能会对我的理解会更加透彻点；还有就是 Elasticsearch 确实火，公司几乎都用的，所以学习下还是有必要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fty1lwmoa0j31hc0vjjyz.jpg&quot; alt=&quot;004&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的蚂蚁金服面试经历(二)</title>
    <link href="http://yoursite.com/2018/07/31/alipay02/"/>
    <id>http://yoursite.com/2018/07/31/alipay02/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-07-31T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/801b780aly1fttgbvge25j21f60vyack.jpg" alt="2018-07-31_23-16-07"></p><a id="more"></a><h2 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h2><h3 id="电话二面（85-分钟）"><a href="#电话二面（85-分钟）" class="headerlink" title="电话二面（85 分钟）"></a>电话二面（85 分钟）</h3><p>1、自我介绍、工作经历、技术栈</p><p>2、项目中你学到了什么技术？（把三项目具体描述了很久）</p><p>3、微服务划分的粒度</p><p>4、微服务的高可用怎么保证的？</p><p>5、常用的负载均衡，该怎么用，你能说下吗？</p><p>6、网关能够为后端服务带来哪些好处？</p><p>7、Spring Bean 的生命周期</p><p>8、xml 中配置的 init、destroy 方法怎么可以做到调用具体的方法？</p><p>9、反射的机制</p><p>10、Object 类中的方法</p><p>11、hashcode 和 equals 方法常用地方</p><p>12、对象比较是否相同</p><p>13、hashmap put 方法存放的时候怎么判断是否是重复的</p><p>14、Object toString 方法常用的地方，为什么要重写该方法</p><p>15、Set 和 List 区别？</p><p>16、ArrayList 和 LinkedList 区别</p><p>17、如果存取相同的数据，ArrayList 和 LinkedList 谁占用空间更大？</p><p>18、Set 存的顺序是有序的吗？</p><p>19、常见 Set 的实现有哪些？</p><p>20、TreeSet 对存入对数据有什么要求呢？</p><p>21、HashSet 的底层实现呢</p><p>22、TreeSet 底层源码有看过吗？</p><p>23、HashSet 是不是线程安全的？为什么不是线程安全的？</p><p>24、Java 中有哪些线程安全的 Map？</p><p>25、Concurrenthashmap 是怎么做到线程安全的？</p><p>26、HashTable 你了解过吗？</p><p>27、如何保证线程安全问题？</p><p>28、synchronized、lock</p><p>29、volatile 的原子性问题？为什么 i++ 这种不支持原子性？从计算机原理的设计来讲下不能保证原子性的原因</p><p>30、happens before 原理</p><p>31、cas 操作</p><p>32、lock 和 synchronized 的区别？</p><p>33、公平锁和非公平锁</p><p>34、Java 读写锁</p><p>35、读写锁设计主要解决什么问题？</p><p>36、你项目除了写 Java 代码，还有前端代码，那你知道前端有哪些框架吗？</p><p>37、MySQL 分页查询语句</p><p>38、MySQL 事务特性和隔离级别</p><p>39、不可重复读会出现在什么场景？</p><p>40、sql  having 的使用场景</p><p>41、前端浏览器地址的一个 http 请求到后端整个流程是怎么样？能够说下吗？</p><p>42、http 默认端口，https 默认端口</p><p>43、DNS 你知道是干嘛的吗？</p><p>44、你们开发用的 ide 是啥？你能说下 idea 的常用几个快捷键吧？</p><p>45、代码版本管理你们用的是啥？</p><p>46、git rebase 和 merge 有什么区别？</p><p>47、你们公司加班多吗？</p><p>48、后面一起聊 high 了，之间扯了些蛋，哈哈哈</p><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><p><a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/" target="_blank" rel="noopener">1、秋招第一站 —— 亚信科技</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/" target="_blank" rel="noopener">2、秋招第二站 —— 内推爱奇艺</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/" target="_blank" rel="noopener">3、秋招第三站 —— 内推阿里（一面）</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/28/recommend-books/" target="_blank" rel="noopener">4、那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a></p><p><a href="http://www.54tianzhisheng.cn/2017/09/17/Interview-summary/" target="_blank" rel="noopener">5、面试过阿里等互联网大公司，我知道了这些套路</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/" target="_blank" rel="noopener">6、渣渣菜鸡的有赞面试经历（一）</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/30/alipay01/" target="_blank" rel="noopener">7、渣渣菜鸡的蚂蚁金服面试经历（一）</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本地地址：<a href="http://www.54tianzhisheng.cn/2018/07/31/alipay02" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/07/31/alipay02</a> ，转载请授权，否则禁止转载！</p><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，已经分享在我的知识星球，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fts8b5uin5j30o00didgn.jpg" alt="zhisheng_zsxq"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/801b780aly1fttgbvge25j21f60vyack.jpg&quot; alt=&quot;2018-07-31_23-16-07&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的蚂蚁金服面试经历(一)</title>
    <link href="http://yoursite.com/2018/07/30/alipay01/"/>
    <id>http://yoursite.com/2018/07/30/alipay01/</id>
    <published>2018-07-29T16:00:00.000Z</published>
    <updated>2018-07-30T13:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fts8b55rbfj30zk0nj4do.jpg" alt="cafe-3537801_1280"></p><a id="more"></a><h2 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h2><h3 id="电话一面"><a href="#电话一面" class="headerlink" title="电话一面"></a>电话一面</h3><p>1、自我介绍、自己做的项目和技术领域</p><p>2、项目中的监控：那个监控指标常见的哪些？</p><p>3、微服务涉及到的技术以及需要注意的问题有哪些？</p><p>4、注册中心你了解了哪些？</p><p>5、consul 的可靠性你了解吗？</p><p>6、consul 的机制你有没有具体深入过？有没有和其他的注册中心对比过？</p><p>7、项目用 Spring 比较多，有没有了解 Spring 的原理？AOP 和 IOC 的原理</p><p>8、Spring Boot除了自动配置，相比传统的 Spring 有什么其他的区别？</p><p>9、Spring Cloud 有了解多少？</p><p>10、Spring Bean 的生命周期</p><p>11、HashMap 和 hashTable 区别？</p><p>12、Object 的 hashcode 方法重写了，equals 方法要不要改？</p><p>13、Hashmap 线程不安全的出现场景</p><p>14、线上服务 CPU 很高该怎么做？有哪些措施可以找到问题</p><p>15、JDK 中有哪几个线程池？顺带把线程池讲了个遍</p><p>16、SQL 优化的常见方法有哪些</p><p>17、SQL 索引的顺序，字段的顺序</p><p>18、查看 SQL 是不是使用了索引？（有什么工具）</p><p>19、TCP 和 UDP 的区别？TCP 数据传输过程中怎么做到可靠的？</p><p>20、说下你知道的排序算法吧</p><p>21、查找一个数组的中位数？</p><p>22、你有什么问题想问我的吗？</p><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><p><a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/" target="_blank" rel="noopener">1、秋招第一站 —— 亚信科技</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/" target="_blank" rel="noopener">2、秋招第二站 —— 内推爱奇艺</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/" target="_blank" rel="noopener">3、秋招第三站 —— 内推阿里（一面）</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/28/recommend-books/" target="_blank" rel="noopener">4、那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a></p><p><a href="http://www.54tianzhisheng.cn/2017/09/17/Interview-summary/" target="_blank" rel="noopener">5、面试过阿里等互联网大公司，我知道了这些套路</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/" target="_blank" rel="noopener">6、渣渣菜鸡的有赞面试经历（一）</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本地地址：<a href="http://www.54tianzhisheng.cn/2018/07/30/alipay01" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/07/30/alipay01</a> ，转载请授权，否则禁止转载！</p><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，已经分享在我的知识星球，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fts8b5uin5j30o00didgn.jpg" alt="zhisheng_zsxq"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fts8b55rbfj30zk0nj4do.jpg&quot; alt=&quot;cafe-3537801_1280&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的有赞面试经历（一）</title>
    <link href="http://yoursite.com/2018/07/12/youzan/"/>
    <id>http://yoursite.com/2018/07/12/youzan/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-15T01:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftaaye0j1aj31hc0zganr.jpg" alt="003"></p><p>出去面试的话还是得好好准备，不然会被虐的有点惨！<br><a id="more"></a></p><h2 id="有赞（框架组）"><a href="#有赞（框架组）" class="headerlink" title="有赞（框架组）"></a>有赞（框架组）</h2><p>四月份面试有赞的时候，自己还在实习，所以也没有复习，是在 Boss 直聘上投的，当时看到了有赞的 2018 届春招，就投了下，然后不知道怎么就被推到了框架组，结果后面就感觉自己被虐的可惨了。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/07/12/youzan/</a></p><h3 id="电话一面"><a href="#电话一面" class="headerlink" title="电话一面"></a>电话一面</h3><p>好像是清明节还是五一劳动节来着，我还在睡觉，就接到一面面试官的电话，说现在有时间吗，能够接受下电话面试吗？我勒个去，今天过节、我被电话吵醒的，现在人都没清醒、这面试那肯定得一面就挂了，所以就老实得说现在还是不方便呢，约了周一上午 10 点面试。</p><p>周一 10 点面试官准时打电话过来了！</p><p>以下是面试的问题：</p><p>1、自我介绍</p><p>2、Map 的底层结构？（HashMap）</p><p>3、线程安全的 Map （concurrentHashMap）简单的说了下这两 1。7 和 1.8 的区别，本想问下要不要深入的讲下（源码级别），结果面试官说不用了。</p><p>4、项目 MySQL 的数据量和并发量有多大？</p><p>5、你对数据库了解多少？</p><p>6、你说下数据库的索引实现和非主键的二级索引</p><p>7、项目用的是 SpringBoot ，你能说下 Spring Boot 与 Spring 的区别吗？</p><p>8、SpringBoot 的自动配置是怎么做的？</p><p>9、MyBatis 定义的接口，怎么找到实现的？</p><p>10、Java 内存结构</p><p>11、对象是否可 GC？</p><p>12、Minor GC 和 Full GC</p><p>13、垃圾回收算法</p><p>14、垃圾回收器 G1</p><p>15、项目里用过 ElasticSearch 和 Hbase，有深入了解他们的调优技巧吗？</p><p>16、Spring RestTemplate 的具体实现</p><p>17、描述下网页一个 Http 请求，到后端的整个请求过程</p><p>18、多线程的常用方法和接口类及线程池的机制</p><p>19、总结我的 Java 基础还是不错，但是一些主流的框架源码还是处在使用的状态，需要继续去看源码</p><p>20、死锁</p><p>21、自己研究比较新的技术，说下成果！</p><p>22、你有什么想问的？我就问了下公司那边的情况，这个自由发挥！</p><p>最后我知道有二面的面试机会了。</p><p>10 来分钟不到，就再次打电话过来约了明早上午 10 点的视频面试。</p><h3 id="视频二面"><a href="#视频二面" class="headerlink" title="视频二面"></a>视频二面</h3><p>二面面试官先打电话过来，然后加了个微信，开始微信视频面试</p><p>这个面试我也不太记得具体面试题目了，下面写的是大概方向的：</p><p>1、HashMap，源码级别的问了，包括为什么线程不安全</p><p>2、死锁</p><p>3、Synchronized 和 ReentrantLock 锁机制，怎么判断重入锁的，会不会是死锁？</p><p>4、进程和线程的区别？</p><p>5、进程之间如何保证同步？</p><p>6、分布式锁</p><p>7、对象 GC</p><p>8、垃圾回收算法</p><p>9、JVM 参数</p><p>10、OOM 出现的有哪些场景？为什么会发生？</p><p>11、JVM 内存结构说下吧</p><p>12、堆和栈的共享问题？</p><p>13、有比较过 Http 和 RPC 吗？</p><p>14、HttpClient 你说说里面的具体实现吧？（涉及了哪些东西）</p><p>15、那要你设计一个高性能的 Http ，你会怎么设计？</p><p>二面微信视频面试只记得这么多了。</p><hr><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，后面会一篇一篇分享在我的知识星球的，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftaayfcr1dj30o00didgn.jpg" alt="zhisheng_zsxq"></p><p>知识星球更多面经文章：</p><p>1、<a href="https://t.zsxq.com/EyfYbuv" target="_blank" rel="noopener">蚂蚁金服电话一面</a></p><p>2、<a href="https://t.zsxq.com/AurzjA6" target="_blank" rel="noopener">蚂蚁金服电话二面——后面聊的有点high</a></p><p>3、<a href="https://t.zsxq.com/66MJauR" target="_blank" rel="noopener">club factory 面经分享</a></p><p>4、<a href="https://t.zsxq.com/biybQFa" target="_blank" rel="noopener">作为面试官得到的经验</a></p><p>5、<a href="https://t.zsxq.com/FmuvrJI" target="_blank" rel="noopener">史上最强最全面经合集</a></p><p>6、<a href="https://t.zsxq.com/BuNVJuJ" target="_blank" rel="noopener">公司需要什么样的人</a></p><p>7、<a href="https://t.zsxq.com/UN7i6uV" target="_blank" rel="noopener">如何介绍项目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1ftaaye0j1aj31hc0zganr.jpg&quot; alt=&quot;003&quot;&gt;&lt;/p&gt;
&lt;p&gt;出去面试的话还是得好好准备，不然会被虐的有点惨！&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>20 个案例教你在 Java 8 中如何处理日期和时间?</title>
    <link href="http://yoursite.com/2018/06/20/java-8-date/"/>
    <id>http://yoursite.com/2018/06/20/java-8-date/</id>
    <published>2018-06-19T16:00:00.000Z</published>
    <updated>2018-06-20T15:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsho6kitc6j31hc0zkdr7.jpg" alt="002"><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面一篇文章写了<a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="noopener">《SimpleDateFormat 如何安全的使用？》</a>, 里面介绍了 SimpleDateFormat 如何处理日期／时间，以及如何保证线程安全，及其介绍了在 Java 8 中的处理时间／日期默认就线程安全的 DateTimeFormatter 类。那么 Java 8 中该怎么样处理生活中常见的一些日期／时间呢？比如：计算一周后的日期；计算一年前或一年后的日期；检查闰年等。</p><p>接下来创建了 20 个基于任务的实例来学习 Java 8 的新特性。从最简单创建当天的日期开始，然后创建时间及时区，接着模拟一个日期提醒应用中的任务——计算重要日期的到期天数，例如生日、纪念日、账单日、保费到期日、信用卡过期日等。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/06/20/java-8-date/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/06/20/java-8-date/</a></p><h3 id="示例-1、在-Java-8-中获取今天的日期"><a href="#示例-1、在-Java-8-中获取今天的日期" class="headerlink" title="示例 1、在 Java 8 中获取今天的日期"></a>示例 1、在 Java 8 中获取今天的日期</h3><p>Java 8 中的 LocalDate 用于表示当天日期。和 java.util.Date 不同，它只有日期，不包含时间。当你仅需要表示日期时就用这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">System.out.println(now);</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20</span><br></pre></td></tr></table></figure><p>上面的代码创建了当天的日期，不含时间信息。打印出的日期格式非常友好，不像老的 Date 类打印出一堆没有格式化的信息。</p><h3 id="示例-2、在-Java-8-中获取年、月、日信息"><a href="#示例-2、在-Java-8-中获取年、月、日信息" class="headerlink" title="示例 2、在 Java 8 中获取年、月、日信息"></a>示例 2、在 Java 8 中获取年、月、日信息</h3><p>LocalDate 类提供了获取年、月、日的快捷方法，其实例还包含很多其它的日期属性。通过调用这些方法就可以很方便的得到需要的日期信息，不用像以前一样需要依赖 java.util.Calendar 类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line"><span class="keyword">int</span> year = now.getYear();</span><br><span class="line"><span class="keyword">int</span> monthValue = now.getMonthValue();</span><br><span class="line"><span class="keyword">int</span> dayOfMonth = now.getDayOfMonth();</span><br><span class="line">System.out.printf(<span class="string">"year = %d, month = %d, day = %d"</span>, year, monthValue, dayOfMonth);</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">year = 2018, month = 6, day = 20</span><br></pre></td></tr></table></figure><h3 id="示例-3、在-Java-8-中处理特定日期"><a href="#示例-3、在-Java-8-中处理特定日期" class="headerlink" title="示例 3、在 Java 8 中处理特定日期"></a>示例 3、在 Java 8 中处理特定日期</h3><p>在第一个例子里，我们通过静态工厂方法 now() 非常容易地创建了当天日期，你还可以调用另一个有用的工厂方法LocalDate.of() 创建任意日期， 该方法需要传入年、月、日做参数，返回对应的 LocalDate 实例。这个方法的好处是没再犯老 API 的设计错误，比如年度起始于 1900，月份是从 0 开始等等。日期所见即所得，就像下面这个例子表示了 6 月 20 日，没有任何隐藏机关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p>可以看到创建的日期完全符合预期，与写入的 2018 年 6 月 20 日完全一致。</p><h3 id="示例-4、在-Java-8-中判断两个日期是否相等"><a href="#示例-4、在-Java-8-中判断两个日期是否相等" class="headerlink" title="示例 4、在 Java 8 中判断两个日期是否相等"></a>示例 4、在 Java 8 中判断两个日期是否相等</h3><p>现实生活中有一类时间处理就是判断两个日期是否相等。你常常会检查今天是不是个特殊的日子，比如生日、纪念日或非交易日。这时就需要把指定的日期与某个特定日期做比较，例如判断这一天是否是假期。下面这个例子会帮助你用 Java 8 的方式去解决，你肯定已经想到了，LocalDate 重载了 equal 方法，请看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (date.equals(now)) &#123;</span><br><span class="line">System.out.println(<span class="string">"同一天"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中我们比较的两个日期相同。注意，如果比较的日期是字符型的，需要先解析成日期对象再作判断。</p><h3 id="示例-5、在-Java-8-中检查像生日这种周期性事件"><a href="#示例-5、在-Java-8-中检查像生日这种周期性事件" class="headerlink" title="示例 5、在 Java 8 中检查像生日这种周期性事件"></a>示例 5、在 Java 8 中检查像生日这种周期性事件</h3><p>Java 中另一个日期时间的处理就是检查类似每月账单、结婚纪念日、EMI日或保险缴费日这些周期性事件。如果你在电子商务网站工作，那么一定会有一个模块用来在圣诞节、感恩节这种节日时向客户发送问候邮件。Java 中如何检查这些节日或其它周期性事件呢？答案就是 MonthDay 类。这个类组合了月份和日，去掉了年，这意味着你可以用它判断每年都会发生事件。和这个类相似的还有一个 YearMonth 类。这些类也都是不可变并且线程安全的值类型。下面我们通过 MonthDay 来检查周期性事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line">MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(now);</span><br><span class="line"><span class="keyword">if</span> (currentMonthDay.equals(birthday)) &#123;</span><br><span class="line">System.out.println(<span class="string">"Happy Birthday"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Sorry, today is not your birthday"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：（注意：获取当前时间可能与你看的时候不对，所以这个结果可能和你看的时候运行结果不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy Birthday</span><br></pre></td></tr></table></figure><p>只要当天的日期和生日匹配，无论是哪一年都会打印出祝贺信息。你可以把程序整合进系统时钟，看看生日时是否会受到提醒，或者写一个单元测试来检测代码是否运行正确。</p><h3 id="示例-6、在-Java-8-中获取当前时间"><a href="#示例-6、在-Java-8-中获取当前时间" class="headerlink" title="示例 6、在 Java 8 中获取当前时间"></a>示例 6、在 Java 8 中获取当前时间</h3><p>与 Java 8 获取日期的例子很像，获取时间使用的是 LocalTime 类，一个只有时间没有日期的 LocalDate 近亲。可以调用静态工厂方法 now() 来获取当前时间。默认的格式是 hh:mm:ss:nnn。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">System.out.println(localTime);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13:35:56.155</span><br></pre></td></tr></table></figure><p>可以看到当前时间就只包含时间信息，没有日期。</p><h3 id="示例-7、如何在现有的时间上增加小时"><a href="#示例-7、如何在现有的时间上增加小时" class="headerlink" title="示例 7、如何在现有的时间上增加小时"></a>示例 7、如何在现有的时间上增加小时</h3><p>通过增加小时、分、秒来计算将来的时间很常见。Java 8 除了不变类型和线程安全的好处之外，还提供了更好的plusHours() 方法替换 add()，并且是兼容的。注意，这些方法返回一个全新的 LocalTime 实例，由于其不可变性，返回后一定要用变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">System.out.println(localTime);</span><br><span class="line">LocalTime localTime1 = localTime.plusHours(<span class="number">2</span>);<span class="comment">//增加2小时</span></span><br><span class="line">System.out.println(localTime1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">13:41:20.721</span><br><span class="line">15:41:20.721</span><br></pre></td></tr></table></figure><p>可以看到，新的时间在当前时间 13:41:20.721 的基础上增加了 2 个小时。</p><h3 id="示例-8、如何计算一周后的日期"><a href="#示例-8、如何计算一周后的日期" class="headerlink" title="示例 8、如何计算一周后的日期"></a>示例 8、如何计算一周后的日期</h3><p>和上个例子计算两小时以后的时间类似，这个例子会计算一周后的日期。LocalDate 日期不包含时间信息，它的 plus()方法用来增加天、周、月，ChronoUnit 类声明了这些时间单位。由于 LocalDate 也是不变类型，返回后一定要用变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate plusDate = now.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">System.out.println(now);</span><br><span class="line">System.out.println(plusDate);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20</span><br><span class="line">2018-06-27</span><br></pre></td></tr></table></figure><p>可以看到新日期离当天日期是 7 天，也就是一周。你可以用同样的方法增加 1 个月、1 年、1 小时、1 分钟甚至一个世纪，更多选项可以查看 Java 8 API 中的 ChronoUnit 类。</p><h3 id="示例-9、计算一年前或一年后的日期"><a href="#示例-9、计算一年前或一年后的日期" class="headerlink" title="示例 9、计算一年前或一年后的日期"></a>示例 9、计算一年前或一年后的日期</h3><p>继续上面的例子，上个例子中我们通过 LocalDate 的 plus() 方法增加天数、周数或月数，这个例子我们利用 minus() 方法计算一年前的日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate minusDate = now.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">LocalDate plusDate1 = now.plus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">System.out.println(minusDate);</span><br><span class="line">System.out.println(plusDate1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-06-20</span><br><span class="line">2019-06-20</span><br></pre></td></tr></table></figure><h3 id="示例-10、使用-Java-8-的-Clock-时钟类"><a href="#示例-10、使用-Java-8-的-Clock-时钟类" class="headerlink" title="示例 10、使用 Java 8 的 Clock 时钟类"></a>示例 10、使用 Java 8 的 Clock 时钟类</h3><p>Java 8 增加了一个 Clock 时钟类用于获取当时的时间戳，或当前时区下的日期时间信息。以前用到System.currentTimeInMillis() 和 TimeZone.getDefault() 的地方都可用 Clock 替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Clock clock = Clock.systemUTC();</span><br><span class="line">Clock clock1 = Clock.systemDefaultZone();</span><br><span class="line">System.out.println(clock);</span><br><span class="line">System.out.println(clock1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SystemClock[Z]</span><br><span class="line">SystemClock[Asia/Shanghai]</span><br></pre></td></tr></table></figure><h3 id="示例-11、如何用-Java-判断日期是早于还是晚于另一个日期"><a href="#示例-11、如何用-Java-判断日期是早于还是晚于另一个日期" class="headerlink" title="示例 11、如何用 Java 判断日期是早于还是晚于另一个日期"></a>示例 11、如何用 Java 判断日期是早于还是晚于另一个日期</h3><p>另一个工作中常见的操作就是如何判断给定的一个日期是大于某天还是小于某天？在 Java 8 中，LocalDate 类有两类方法 isBefore() 和 isAfter() 用于比较日期。调用 isBefore() 方法时，如果给定日期小于当前日期则返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate tomorrow = LocalDate.of(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(tomorrow.isAfter(now))&#123;</span><br><span class="line">System.out.println(<span class="string">"Tomorrow comes after today"</span>);</span><br><span class="line">&#125;</span><br><span class="line">LocalDate yesterday = now.minus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"><span class="keyword">if</span>(yesterday.isBefore(now))&#123;</span><br><span class="line">System.out.println(<span class="string">"Yesterday is day before today"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 8 中比较日期非常方便，不需要使用额外的 Calendar 类来做这些基础工作了。</p><h3 id="示例-12、在-Java-8-中处理时区"><a href="#示例-12、在-Java-8-中处理时区" class="headerlink" title="示例 12、在 Java 8 中处理时区"></a>示例 12、在 Java 8 中处理时区</h3><p>Java 8 不仅分离了日期和时间，也把时区分离出来了。现在有一系列单独的类如 ZoneId 来处理特定时区，ZoneDateTime 类来表示某时区下的时间。这在 Java 8 以前都是 GregorianCalendar 类来做的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZoneId america = ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line">LocalDateTime localtDateAndTime = LocalDateTime.now();</span><br><span class="line">ZonedDateTime dateAndTimeInNewYork  = ZonedDateTime.of(localtDateAndTime, america );</span><br><span class="line">System.out.println(dateAndTimeInNewYork);</span><br></pre></td></tr></table></figure><h3 id="示例-13、如何表示信用卡到期这类固定日期，答案就在-YearMonth"><a href="#示例-13、如何表示信用卡到期这类固定日期，答案就在-YearMonth" class="headerlink" title="示例 13、如何表示信用卡到期这类固定日期，答案就在 YearMonth"></a>示例 13、如何表示信用卡到期这类固定日期，答案就在 YearMonth</h3><p>与 MonthDay 检查重复事件的例子相似，YearMonth 是另一个组合类，用于表示信用卡到期日、FD 到期日、期货期权到期日等。还可以用这个类得到 当月共有多少天，YearMonth 实例的 lengthOfMonth() 方法可以返回当月的天数，在判断 2 月有 28 天还是 29 天时非常有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YearMonth currentYearMonth = YearMonth.now();</span><br><span class="line">System.out.printf(<span class="string">"Days in month year %s: %d%n"</span>, currentYearMonth, currentYearMonth.lengthOfMonth());</span><br><span class="line">YearMonth creditCardExpiry = YearMonth.of(<span class="number">2018</span>, Month.FEBRUARY);</span><br><span class="line">System.out.printf(<span class="string">"Your credit card expires on %s %n"</span>, creditCardExpiry);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Days in month year 2018-06: 30</span><br><span class="line">Your credit card expires on 2018-02</span><br></pre></td></tr></table></figure><h3 id="示例-14、如何在-Java-8-中检查闰年"><a href="#示例-14、如何在-Java-8-中检查闰年" class="headerlink" title="示例 14、如何在 Java 8 中检查闰年"></a>示例 14、如何在 Java 8 中检查闰年</h3><p>LocalDate 类有一个很实用的方法 isLeapYear() 判断该实例是否是一个闰年。</p><h3 id="示例-15、计算两个日期之间的天数和月数"><a href="#示例-15、计算两个日期之间的天数和月数" class="headerlink" title="示例 15、计算两个日期之间的天数和月数"></a>示例 15、计算两个日期之间的天数和月数</h3><p>有一个常见日期操作是计算两个日期之间的天数、周数或月数。在 Java 8 中可以用 java.time.Period 类来做计算。下面这个例子中，我们计算了当天和将来某一天之间的月数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(2019, Month.MARCH, 20);</span><br><span class="line">Period period = Period.between(now, date);</span><br><span class="line">System.out.println(&quot;离下个时间还有&quot; + period.getMonths() + &quot; 个月&quot;);</span><br></pre></td></tr></table></figure><h3 id="示例-16、包含时差信息的日期和时间"><a href="#示例-16、包含时差信息的日期和时间" class="headerlink" title="示例 16、包含时差信息的日期和时间"></a>示例 16、包含时差信息的日期和时间</h3><p>在 Java 8 中，ZoneOffset 类用来表示时区，举例来说印度与 GMT 或 UTC 标准时区相差 +05:30，可以通过ZoneOffset.of() 静态方法来获取对应的时区。一旦得到了时差就可以通过传入 LocalDateTime 和 ZoneOffset 来创建一个 OffSetDateTime 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime datetime = LocalDateTime.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">14</span>,<span class="number">19</span>,<span class="number">30</span>);</span><br><span class="line">ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line">OffsetDateTime date = OffsetDateTime.of(datetime, offset);  </span><br><span class="line">System.out.println(<span class="string">"Date and Time with timezone offset in Java : "</span> + date);</span><br></pre></td></tr></table></figure><h3 id="示例-17、在-Java-8-中获取当前的时间戳"><a href="#示例-17、在-Java-8-中获取当前的时间戳" class="headerlink" title="示例 17、在 Java 8 中获取当前的时间戳"></a>示例 17、在 Java 8 中获取当前的时间戳</h3><p>如果你还记得 Java 8 以前是如何获得当前时间戳，那么现在你终于解脱了。Instant 类有一个静态工厂方法 now() 会返回当前的时间戳，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instant timestamp = Instant.now();</span><br><span class="line">System.out.println(timestamp);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20T06:35:24.881Z</span><br></pre></td></tr></table></figure><p>时间戳信息里同时包含了日期和时间，这和 java.util.Date 很像。实际上 Instant 类确实等同于 Java 8 之前的 Date类，你可以使用 Date 类和 Instant 类各自的转换方法互相转换，例如：Date.from(Instant) 将 Instant 转换成java.util.Date，Date.toInstant() 则是将 Date 类转换成 Instant 类。</p><h3 id="示例-18、在-Java-8-中如何使用预定义的格式化工具去解析或格式化日期"><a href="#示例-18、在-Java-8-中如何使用预定义的格式化工具去解析或格式化日期" class="headerlink" title="示例 18、在 Java 8 中如何使用预定义的格式化工具去解析或格式化日期"></a>示例 18、在 Java 8 中如何使用预定义的格式化工具去解析或格式化日期</h3><p>在 Java 8 以前的世界里，日期和时间的格式化非常诡异，唯一的帮助类 SimpleDateFormat 也是非线程安全的，而且用作局部变量解析和格式化日期时显得很笨重。幸好线程局部变量能使它在多线程环境中变得可用，不过这都是过去时了。Java 8 引入了全新的日期时间格式工具，线程安全而且使用方便。它自带了一些常用的内置格式化工具。</p><p>参见我上一篇文章： <a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="noopener">《SimpleDateFormat 如何安全的使用？》</a></p><h3 id="示例-19、如何在-Java-中使用自定义格式化工具解析日期"><a href="#示例-19、如何在-Java-中使用自定义格式化工具解析日期" class="headerlink" title="示例 19、如何在 Java 中使用自定义格式化工具解析日期"></a>示例 19、如何在 Java 中使用自定义格式化工具解析日期</h3><p>尽管内置格式化工具很好用，有时还是需要定义特定的日期格式。可以调用 DateTimeFormatter 的 ofPattern() 静态方法并传入任意格式返回其实例，格式中的字符和以前代表的一样，M 代表月，m 代表分。如果格式不规范会抛出 DateTimeParseException 异常，不过如果只是把 M 写成 m 这种逻辑错误是不会抛异常的。</p><p>参见我上一篇文章： <a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="noopener">《SimpleDateFormat 如何安全的使用？》</a></p><h3 id="示例-20、在-Java-8-中如何把日期转换成字符串"><a href="#示例-20、在-Java-8-中如何把日期转换成字符串" class="headerlink" title="示例 20、在 Java 8 中如何把日期转换成字符串"></a>示例 20、在 Java 8 中如何把日期转换成字符串</h3><p>上两个主要是从字符串解析日期。现在我们反过来，把 LocalDateTime 日期实例转换成特定格式的字符串。这是迄今为止 Java 日期转字符串最为简单的方式了。下面的例子将返回一个代表日期的格式化字符串。和前面类似，还是需要创建 DateTimeFormatter 实例并传入格式，但这回调用的是 format() 方法，而非 parse() 方法。这个方法会把传入的日期转化成指定格式的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime arrivalDate  = LocalDateTime.now();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"MMMdd yyyy  hh:mm a"</span>);</span><br><span class="line">    String landing = arrivalDate.format(format);</span><br><span class="line">    System.out.printf(<span class="string">"Arriving at :  %s %n"</span>, landing);</span><br><span class="line">&#125;<span class="keyword">catch</span> (DateTimeException ex) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%s can't be formatted!%n"</span>, arrivalDate);</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-8-日期时间-API-的重点"><a href="#Java-8-日期时间-API-的重点" class="headerlink" title="Java 8 日期时间 API 的重点"></a>Java 8 日期时间 API 的重点</h3><p>通过这些例子，你肯定已经掌握了 Java 8 日期时间 API 的新知识点。现在来回顾一下这个优雅 API 的使用要点：</p><p>1）提供了 javax.time.ZoneId 获取时区。</p><p>2）提供了 LocalDate 和 LocalTime 类。</p><p>3）Java 8 的所有日期和时间 API 都是不可变类并且线程安全，而现有的 Date 和 Calendar API 中的 java.util.Date 和SimpleDateFormat 是非线程安全的。</p><p>4）主包是 java.time, 包含了表示日期、时间、时间间隔的一些类。里面有两个子包 java.time.format 用于格式化， java.time.temporal 用于更底层的操作。</p><p>5）时区代表了地球上某个区域内普遍使用的标准时间。每个时区都有一个代号，格式通常由区域/城市构成（Asia/Tokyo），在加上与格林威治或 UTC 的时差。例如：东京的时差是 +09:00。</p><p>6）OffsetDateTime 类实际上组合了 LocalDateTime 类和 ZoneOffset 类。用来表示包含和格林威治或 UTC 时差的完整日期（年、月、日）和时间（时、分、秒、纳秒）信息。</p><p>7）DateTimeFormatter 类用来格式化和解析时间。与 SimpleDateFormat 不同，这个类不可变并且线程安全，需要时可以给静态常量赋值。 DateTimeFormatter 类提供了大量的内置格式化工具，同时也允许你自定义。在转换方面也提供了 parse() 将字符串解析成日期，如果解析出错会抛出 DateTimeParseException。DateTimeFormatter 类同时还有format() 用来格式化日期，如果出错会抛出 DateTimeException异常。</p><p>8）再补充一点，日期格式“MMM d yyyy”和“MMM dd yyyy”有一些微妙的不同，第一个格式可以解析“Jan 2 2014”和“Jan 14 2014”，而第二个在解析“Jan 2 2014”就会抛异常，因为第二个格式里要求日必须是两位的。如果想修正，你必须在日期只有个位数时在前面补零，就是说“Jan 2 2014”应该写成 “Jan 02 2014”。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="noopener">SimpleDateFormat 如何安全的使用？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fsho6kitc6j31hc0zkdr7.jpg&quot; alt=&quot;002&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SimpleDateFormat 如何安全的使用？</title>
    <link href="http://yoursite.com/2018/06/19/SimpleDateFormat/"/>
    <id>http://yoursite.com/2018/06/19/SimpleDateFormat/</id>
    <published>2018-06-18T16:00:00.000Z</published>
    <updated>2018-06-20T07:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fshewu3v3yj31hc0zkwix.jpg" alt="001"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为什么会写这篇文章？因为这些天在看《阿里巴巴开发手册详尽版》，没看过的可以关注微信公众号：<strong>zhisheng</strong>，回复关键字：<strong>阿里巴巴开发手册详尽版</strong>  就可以获得。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/</a></p><p>在看的过程中有这么一条：</p><blockquote><p><strong>【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。 </strong></p></blockquote><p>看到这条我立马就想起了我实习的时候有个项目里面就犯了这个错误，记得当时是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br></pre></td></tr></table></figure><p>所以才认真的去研究下这个 SimpleDateFormat，所以才有了这篇文章。</p><h3 id="它是谁？"><a href="#它是谁？" class="headerlink" title="它是谁？"></a>它是谁？</h3><p>想必大家对 <code>SimpleDateFormat</code> 并不陌生。<code>SimpleDateFormat</code>  是 Java 中一个非常常用的类，他是以区域敏感的方式格式化和解析日期的具体类。 它允许格式化 (date -&gt; text)、语法分析 (text -&gt; date)和标准化。</p><p><code>SimpleDateFormat</code> 允许以任何用户指定的日期-时间格式方式启动。 但是，建议使用 <code>DateFormat</code> 中的 <code>getTimeInstance</code>、 <code>getDateInstance</code> 或 <code>getDateTimeInstance</code> 方法来创建一个日期-时间格式。 这几个方法会返回一个默认的日期／时间格式。 你可以根据需要用 <code>applyPattern</code> 方法修改格式方式。</p><h3 id="日期时间格式"><a href="#日期时间格式" class="headerlink" title="日期时间格式"></a>日期时间格式</h3><p>日期和时间格式由 <strong>日期和时间模式字符串</strong> 指定。在 <strong>日期和时间模式字符串</strong> 中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。文本可以使用单引号 (‘) 引起来，以免进行解释。所有其他字符均不解释，只是在格式化时将它们简单复制到输出字符串。</p><p>简单的讲：这些 A ——Z，a —— z 这些字母(不被单引号包围的)会被特殊处理替换为对应的日期时间，其他的字符串还是原样输出。</p><p>日期和时间模式(<strong>注意大小写，代表的含义是不同的</strong>)如下：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fshewuz8vij30vm150tfw.jpg" alt="2018-06-19_11-17-43"></p><h3 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h3><p>日期／时间格式模版样例：（给的时间是：2001-07-04 12:08:56  U.S. Pacific Time time zone）</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fshewwuu6pj30x20mqwio.jpg" alt="2018-06-19_11-27-39"></p><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatDateTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat myFmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        SimpleDateFormat myFmt1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy/MM/dd HH:mm"</span>);</span><br><span class="line">        SimpleDateFormat myFmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//等价于now.toLocaleString()</span></span><br><span class="line">        SimpleDateFormat myFmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒 E "</span>);</span><br><span class="line">        SimpleDateFormat myFmt4 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区"</span>);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(myFmt.format(now));</span><br><span class="line">        System.out.println(myFmt1.format(now));</span><br><span class="line">        System.out.println(myFmt2.format(now));</span><br><span class="line">        System.out.println(myFmt3.format(now));</span><br><span class="line">        System.out.println(myFmt4.format(now));</span><br><span class="line">        System.out.println(now.toGMTString());</span><br><span class="line">        System.out.println(now.toLocaleString());</span><br><span class="line">        System.out.println(now.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018年06月19日 23时10分05秒</span><br><span class="line">18/06/19 23:10</span><br><span class="line">2018-06-19 23:10:05</span><br><span class="line">2018年06月19日 23时10分05秒 星期二</span><br><span class="line">一年中的第 170 天 一年中第25个星期 一月中第4个星期 在一天中23时 CST时区</span><br><span class="line">19 Jun 2018 15:10:05 GMT</span><br><span class="line">2018-6-19 23:10:05</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br></pre></td></tr></table></figure><p>使用方法很简单，就是先自己定义好时间／日期模版，然后调用 format 方法（传入一个时间 Date 参数）。</p><p>上面的是日期转换成自己想要的字符串格式。下面反过来，将字符串类型装换成日期类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringFormatDate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String time1 = <span class="string">"2018年06月19日 23时10分05秒"</span>;</span><br><span class="line">        String time2 = <span class="string">"18/06/19 23:10"</span>;</span><br><span class="line">        String time3 = <span class="string">"2018-06-19 23:10:05"</span>;</span><br><span class="line">        String time4 = <span class="string">"2018年06月19日 23时10分05秒 星期二"</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat myFmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        SimpleDateFormat myFmt1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy/MM/dd HH:mm"</span>);</span><br><span class="line">        SimpleDateFormat myFmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//等价于now.toLocaleString()</span></span><br><span class="line">        SimpleDateFormat myFmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒 E"</span>);</span><br><span class="line"></span><br><span class="line">        Date date1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date1 = myFmt.parse(time1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        Date date2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date2 = myFmt1.parse(time2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date2);</span><br><span class="line"></span><br><span class="line">        Date date3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date3 = myFmt2.parse(time3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date3);</span><br><span class="line"></span><br><span class="line">        Date date4 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date4 = myFmt3.parse(time4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br><span class="line">Tue Jun 19 23:10:00 CST 2018</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br></pre></td></tr></table></figure><p>这个转换方法也很简单。但是不要高兴的太早，主角不在这。</p><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsheww10htj31g40wedm3.jpg" alt="2018-06-19_23-56-29"></p><p>在 SimpleDateFormat 类的 JavaDoc 中，描述了该类不能够保证线程安全，建议为每个线程创建单独的日期／时间格式实例，如果多个线程同时访问一个日期／时间格式，它必须在外部进行同步。那么在多线程环境下调用 format() 和 parse() 方法应该使用同步代码来避免问题。下面我们通过一个具体的场景来一步步的深入学习和理解SimpleDateFormat 类。</p><p>1、每个线程创建单独的日期／时间格式实例</p><blockquote><p> 大量的创建 SimpleDateFormat 实例对象，然后再丢弃这个对象，占用大量的内存和 JVM 空间。</p></blockquote><p>2、创建一个静态的 SimpleDateFormat 实例，在使用时直接使用这个实例进行操作（我当时就是这么干的😄）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">df.format(date);</span><br></pre></td></tr></table></figure><p>当然，这个方法的确很不错，在大部分的时间里面都会工作得很好，但一旦在生产环境中一定负载情况下时，这个问题就出来了。他会出现各种不同的情况，比如转化的时间不正确，比如报错，比如线程被挂死等等。我们看下面的测试用例，拿事实说话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilsTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleDateFormatThreadSafe</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.join(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">":"</span> + DateUtils.parse(<span class="string">"2018-06-20 01:18:20"</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> TestSimpleDateFormatThreadSafe().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"Thread-0"</span> Exception in thread <span class="string">"Thread-1"</span> java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2051</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1869</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtils.parse(DateUtils.java:<span class="number">19</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtilsTest$TestSimpleDateFormatThreadSafe.run(DateUtilsTest.java:<span class="number">19</span>)</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">".1818"</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">578</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2051</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">2162</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtils.parse(DateUtils.java:<span class="number">19</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtilsTest$TestSimpleDateFormatThreadSafe.run(DateUtilsTest.java:<span class="number">19</span>)</span><br><span class="line">Thread-<span class="number">2</span>:Sat Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2201</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br></pre></td></tr></table></figure><p>说明：Thread-1和Thread-0报java.lang.NumberFormatException: multiple points错误，直接挂死，没起来；Thread-2 虽然没有挂死，但输出的时间是有错误的，比如我们输入的时间是：2018-06-20 01:18:20 ，当会输出：Sat Jun 20 01:18:20 CST 2201 这样的灵异事件。</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>为什么会出现线程不安全的问题呢？</p><p>下面我们通过看 JDK 源码来看看为什么 SimpleDateFormat 和 DateFormat 类不是线程安全的真正原因：</p><p>SimpleDateFormat 继承了 DateFormat，在 DateFormat 中定义了一个 protected 属性的 Calendar 类的对象：calendar。只是因为 Calendar 类的概念复杂，牵扯到时区与本地化等等，JDK 的实现中使用了成员变量来传递参数，这就造成在多线程的时候会出现错误。</p><p>在 SimpleDateFormat 中的 format 方法源码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo,FieldPosition pos)</span> </span>&#123;</span><br><span class="line">  pos.beginIndex = pos.endIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> format(date, toAppendTo, pos.getFieldDelegate());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Called from Format after creating a FieldDelegate</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo,FieldDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Convert input date to time field list</span></span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">boolean</span> useDateFormatSymbols = useDateFormatSymbols();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compiledPattern.length; ) &#123;</span><br><span class="line">    <span class="keyword">int</span> tag = compiledPattern[i] &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> count = compiledPattern[i++] &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">255</span>) &#123;</span><br><span class="line">      count = compiledPattern[i++] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">      count |= compiledPattern[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">      <span class="keyword">case</span> TAG_QUOTE_ASCII_CHAR:</span><br><span class="line">        toAppendTo.append((<span class="keyword">char</span>)count);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> TAG_QUOTE_CHARS:</span><br><span class="line">        toAppendTo.append(compiledPattern, i, count);</span><br><span class="line">        i += count;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        subFormat(tag, count, delegate, toAppendTo, useDateFormatSymbols);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toAppendTo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calendar.setTime(date)  这条语句改变了 calendar，稍后，calendar 还会用到（在 subFormat 方法里），而这就是引发问题的根源。想象一下，在一个多线程环境下，有两个线程持有了同一个 SimpleDateFormat 的实例，分别调用format 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程 1 调用 format 方法，改变了 calendar 这个字段。</span><br><span class="line">线程 1 中断了。</span><br><span class="line">线程 2 开始执行，它也改变了 calendar。</span><br><span class="line">线程 2 中断了。</span><br><span class="line">线程 1 回来了</span><br></pre></td></tr></table></figure><p>此时，calendar 已然不是它所设的值，而是走上了线程 2 设计的道路。如果多个线程同时争抢 calendar 对象，则会出现各种问题，时间不对，线程挂死等等。</p><p>分析一下 format 的实现，我们不难发现，用到成员变量 calendar，唯一的好处，就是在调用 subFormat 时，少了一个参数，却带来了许多的问题。其实，只要在这里用一个局部变量，一路传递下去，所有问题都将迎刃而解。</p><p>这个问题背后隐藏着一个更为重要的问题–无状态：无状态方法的好处之一，就是它在各种环境下，都可以安全的调用。衡量一个方法是否是有状态的，就看它是否改动了其它的东西，比如全局变量，比如实例的字段。format 方法在运行过程中改动了 SimpleDateFormat 的 calendar 字段，所以，它是有状态的。</p><p>这也同时提醒我们在开发和设计系统的时候注意下一下三点:</p><p><strong>1.自己写公用类的时候，要对多线程调用情况下的后果在注释里进行明确说明</strong></p><p><strong>2.多线程环境下，对每一个共享的可变变量都要注意其线程安全性</strong></p><p><strong>3.我们的类和方法在做设计的时候，要尽量设计成无状态的</strong></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、<strong>需要的时候创建新实例</strong></p><p><strong>说明：</strong>在需要用到 SimpleDateFormat 的地方新建一个实例，不管什么时候，将有线程安全问题的对象由共享变为<strong>局部私有</strong>都能避免多线程问题，不过也加重了创建对象的负担。在一般情况下，这样其实对性能影响比不是很明显的。</p><p>2、<strong>使用同步：同步 SimpleDateFormat 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateSyncUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>当线程较多时，当一个线程调用该方法时，其他想要调用此方法的线程就要 block 等待，多线程并发量大的时候会对性能有一定的影响。</p><p>3、<strong>使用 ThreadLocal</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class ConcurrentDateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static ThreadLocal&lt;DateFormat&gt; threadLocal = new ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected DateFormat initialValue() &#123;</span><br><span class="line">            return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static Date parse(String dateStr) throws ParseException &#123;</span><br><span class="line">        return threadLocal.get().parse(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String format(Date date) &#123;</span><br><span class="line">        return threadLocal.get().format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>使用 ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p><h3 id="Java-8-中的解决办法"><a href="#Java-8-中的解决办法" class="headerlink" title="Java 8 中的解决办法"></a>Java 8 中的解决办法</h3><p>Java 8 提供了新的日期时间 API，其中包括用于日期时间格式化的 DateTimeFormatter，它与 SimpleDateFormat 最大的区别在于：DateTimeFormatter 是线程安全的，而 SimpleDateFormat 并不是线程安全。</p><p><strong>DateTimeFormatter 如何使用：</strong></p><p>解析日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String dateStr= <span class="string">"2018年06月20日"</span>;</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日"</span>);   </span><br><span class="line">LocalDate date= LocalDate.parse(dateStr, formatter);</span><br></pre></td></tr></table></figure><p>日期转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();  </span><br><span class="line">DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 hh:mm a"</span>);</span><br><span class="line">String nowStr = now .format(format);</span><br></pre></td></tr></table></figure><p>由 DateTimeFormatter 的静态方法 ofPattern() 构建日期格式，LocalDateTime 和 LocalDate 等一些表示日期或时间的类使用 parse 和 format 方法把日期和字符串做转换。</p><p>使用新的 API，整个转换过程都不需要考虑线程安全的问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SimpleDateFormat 是线程不安全的类，多线程环境下注意线程安全问题，如果是 Java 8 ，建议使用 DateTimeFormatter 代替 SimpleDateFormat。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="">http://www.cnblogs.com/peida/archive/2013/05/31/3070790.html</a></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="http://www.54tianzhisheng.cn/2018/06/20/java-8-date/" target="_blank" rel="noopener">20 个案例教你在 Java 8 中如何处理日期和时间?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fshewu3v3yj31hc0zkwix.jpg&quot; alt=&quot;001&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>苦逼的毕业论文经历</title>
    <link href="http://yoursite.com/2018/05/26/paper/"/>
    <id>http://yoursite.com/2018/05/26/paper/</id>
    <published>2018-05-25T16:00:00.000Z</published>
    <updated>2018-05-26T08:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frou078h61j312c0vedse.jpg" alt="2018-05-26_15-01-42"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近一直在学校忙毕业论文的事，抱歉了，很长一段时间没更新文章了，今天星期六，昨天星期五，幸好所有资料都在周末前交齐了，昨晚还到参加班上的聚会，也喝了不少酒，但幸好没醉，不然今天肯定不会写下这篇文章的。这篇文章就把从接触到毕业论文指导老师到现在的这半年时间有关毕业论文的事都讲讲，希望能够留下点回忆！<br><a id="more"></a><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frou087a7wj312q11ktmm.jpg" alt="2018-05-26_15-02-15"></p><h3 id="毕设小分队成立"><a href="#毕设小分队成立" class="headerlink" title="毕设小分队成立"></a>毕设小分队成立</h3><p>学校会给每个毕业导师安排带几个学生（7～8 人左右），但是在学校发出表格之前，谁也不知道自己将会由哪个导师带，甚至你会发现就算学校发出表格后看到自己导师名字后，自己都不知道这导师是谁？是男是女？（当某个导师的名字比较中性的时候）到底好不好相处？性格咋样？他的联系方式（手机 或者 QQ），WTF，一个都不知道？苦逼了，后面也是通过问辅导员才知道这些情况。后面我们几个人中就有一个带头建了个 QQ 群（毕设小分队），并把指导老师拉进群了。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frou05sjbgj30ss0hkjta.jpg" alt="qq"></p><p>就这样，我们终于开始了毕设小分队之旅！</p><h3 id="实习时的毕设状态"><a href="#实习时的毕设状态" class="headerlink" title="实习时的毕设状态"></a>实习时的毕设状态</h3><p>2017.12月那时是还在公司实习的，到了毕业设计选题的时候，我们导师还好，给我们每个人很自由的选择，你可以自拟题目，也可以从导师那里挑选题目。不过我看了下老师给的题目，大都是深度学习、机器学习做的相关图像识别、推荐系统、搜索系统、人脸识别、网络流量监控、文本情感分析等高大上的课题。臣妾做不到，毕竟这都是研究生才会研究点方向，老师会发出来这些题目可能也是和她自己在研究学习的相关知识有关（因为我后来给导师检查我的系统的时候就是导师带的一个研究生检查的，期间那个学长和我说他最近就在做文本情感分析相关的一个项目，因为看到我项目中的中文分词器，所以还向我请教了下，我于是把我原来写过的一篇中英文分词器找出来给他一个个解释），所以导师希望在我们这里也能够有人去研究下这方面的知识，拓展下视野。但是由于在公司实习，工作之外腾出的时间确实有限，没这么多时间去学习这些特别新的东西，而且还要做出一定的成果出来，这还是有点挑战性的。导师说你可以自拟题目，或者把自己在公司做的项目优化后拿来做毕设项目。于是，我选择的是拿自己以前写的项目来当毕业论文项目了，因为感觉项目也还行，拿来做毕设完全可以了，所以后面自己也就比较轻松了。</p><h3 id="毕设流程"><a href="#毕设流程" class="headerlink" title="毕设流程"></a>毕设流程</h3><p>把自己的毕设题目报给老师后，老师会根据你的题目审核是否可以拿来当毕设。然后再要求你把毕业设计的开题报告书（论文题目、目的、意义、怎么做、做出什么效果、目标之类的）写详细上交上去。要经过导师和学校的审批后才能够正式开题。开题后确定后几乎就可以开始写自己的项目了。机智的我，那时比较轻松，哈哈哈，工作之外都撸代码和博客呢。差不多过了一个月后，导师就开始在群里问我们系统完成的怎么样了？然后要我们上交论文任务书，学校的这种材料有时候要的很急，不得不吐槽下，很头疼，自己有时候都一下子交不了。又过了一段时间就需要把论文初稿交上去，真是苦逼，那时还不知道论文的模版到底是咋样？该怎么写本科论文呢？搞得我自己那段时间花了周末两天和一天的上班的时间才勉强交了个一般的初稿，初稿中的各种图画的我是想哭。真多，还麻烦。幸好在那段时间公司的任务还不忙，所以在有时间在实习上班的时候也稍微完成下自己的初稿。</p><p>今年 3 ～ 4 月的时候，导师也在不断的叫我们把学校该交的实习每周报告交给她。这个实习还有实习申请表、实习鉴定表材料（要求盖章），这两个资料也是很重要的，如果后面没有这个材料都不能参加答辩的。</p><p>在快五月的时候，导师那时就天天晚上深夜在毕设小分队群里催同学们，你们的论文和系统都完成的咋样了？然后又催了要交论文中期报告（这个应该也蛮重要的，我们班两个同学好像就因为这个导致有个论文中期报告警告，吓得他们后来答辩的时候都怕自己挂了）。</p><p>过完劳动节后，再过了几天后，我就辞职了。辞职后在苏州玩了几天，期间也是在不断的修改自己的论文和优化些格式问题。</p><p>后来又浪回家了，在家呆了几天，也是改论文改到深夜，那段时间自己已经开始在把自己的论文初稿拿到些第三方免费的查重去查重网站去查重，然后根据查重后的结果，将一些重复的地方东改改，西凑凑，或者用自己的话写一遍。这样就可以减少点重复语句。</p><p>再然后就是 18 号赶回来学校了，19，20号刚好周末，又是不眠之夜，那两天不断查重，向别人请教，怎么加字数，自己一开始的字数好像还是不够的，学校要求的字数有点高，其他学校都是 8000 字，我们却要求 1.5 w，真是能扯啊，怎么可以扯出这么多字来。通过某人的经验之谈，我成功的扯了不少字，还不带重复的，😄。</p><p>然后 21 号周一拿给老师检查的时候就是看了下格式（老师不在办公室，她带的研究生给检查的），说你全文首行咋都没缩进呢（写博客写习惯了，谁还缩进啊），行间距比较大，图的标号错误，主要还是检查格式。当晚，又好好改了下，并和我同学讨论了下他的指导导师的要求有哪些，并也做了相应的修改。（因为我的答辩导师就有我那同学的指导老师）记得当晚好像改论文改到三点，幸好有人陪着我一边聊天一边改，不然早困了，睡了。</p><p>22 号一早就醒来了，然后就去打印店打印论文。这里想给的大家一个建议就是：如果你也要打印论文，最好早点去，因为毕业季，学校打印店几乎都是爆满，打印论文的非常多，还有学弟学妹打印各种考试卷子、资料啥的，反正人很多，估计要排队。指导老师也不是一直在办公室的，他们也是要上课的。所以最好在导师在办公室的时候能赶到，这样就不会错过了。这次老师检查论文就比较仔细了，论文一行行的找内容，看是否通顺？是否有不合适的地方？标点符号是不是多了或者少了？格式是不是还有问题？所以呢，这次又很惨，要改的地方很多，还包括流程图和 E-R 图要改的。苦逼了，下午回去租房宾馆的时候就开始拼命的改。改的差不多了，因为第二天要答辩了，所以就在看看自己的系统是否能够跑起来，有没有什么bug，结果还真发现几个小错误和一个大错误，小错误很快修复完善了，有一个 Redis 存数据再取出来的时候数据变化问题当然debug了很久没找到原因。找到深夜一点多，没解决，放弃了，第二天不演示这块。当晚怕自己明天项目启动的时候其他环境要一个个起，需要耗费不少时间，于是自己简单的写了个脚本，一键将自己项目的环境启动起来，这样就可以直接运行项目展示给答辩老师，节省时间，尤其是关键场合，怕掉链子。</p><p>23 号早上很早就去把自己的实习申请表、实习鉴定表、实习 20 周日志、实习终结、论文初稿这些资料打印，然后拿给导师查看和打分。（又找出问题来了，苦逼，记得那个早上现场在导师办公室用电脑改好后，检查完才拿去打印再拿回来给导师检查的，来回跑来跑去的真的很急，出了不少汗）注意：越是关键时刻，千万要顺着导师来，他说改哪里就改哪里，千万别刚，我一个同学的论文改的导师都发火了，差点没让我那同学参加答辩，直接进入二辩的。</p><p>答辩的时候先每个人介绍下自己的实习经历，听到不少牛逼的同学，进了不少厉害的公司，有的同学还当上了公司的项目组组长了，真厉害，一年的实习时间就混的这么好了。瞬间发现差距很大。</p><p>然后就是每个人的答辩了，我第三个，还好，答辩的过程问了我的问题和演示系统的时候都表现的蛮好的。就现场还问了我有个功能的代码是哪？（估计是想看下是不是自己写的项目）后面也看到有的同学项目竟然起不来的，或者回答不出老师的问题的。答辩过程中，答辩老师又给论文找了不少问题，又要苦逼的修改了。</p><p>当天就出了待定名单和要二辩的名单，速度还是很快。还好我没有，开森。本以为答辩好了，就可以松下一口气了，后面改好了论文后拿去给导师检查，她都说 OK 了，结果我就去把论文拿去胶装了，注意胶装顺序别搞错了。第二天把胶装好的论文和各种资料一起交给老师的时候，结果又挑出一个目录的问题，WTF，搞得我后面改好后去打印店重新胶装了遍（封皮从原来的上面扯下来胶装）。昨天签完字了，把论文的初稿、终稿、答辩记录、实习材料等材料一起装进档案袋了，这才安心了。</p><p>于是当晚就去参加了班上的毕业聚会。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frou06i6h3j31kw16oayj.jpg" alt="571527322665_.pic_hd"></p><h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>这段时间真的是很累，每天熬夜到很晚，第二天早上很早就自然醒了。瘦了不少，牛仔裤的皮带我感觉都缩了一圈，右手的几个手指天天在电脑的触摸板上滑来滑去的，都脱了一层皮了，现在放上去都有点痛，打印论文好像打印了7份，烧钱啊。发现我的记忆还是可以的，这么多事竟然还能记得，搞得整篇文章有点像在记流水账，哈哈哈。反正也是记录下自己的论文答辩这段时间的经历。论文的格式很重要，不再像写博客那样随意，论文是需要以一种严谨的态度去对待的。</p><p>写着写着忘了说论文的查重了。一般你一开始最好先用第三方的免费查重下，然后修改。</p><p>我当时用的是：<a href="http://xueshu.baidu.com/usercenter/papercheck/" target="_blank" rel="noopener">http://xueshu.baidu.com/usercenter/papercheck/</a>   这个地方有几个是可以第一次免费查重的，如果次数用完了，记得换个百度账号就又有好些次查重的机会。如果你实在是不放心，可以去学校的打印店问下是否有论文查重的，也是查的知网的库，和学校知网查重的区别不大，我比较自信，没花这个钱，毕竟好贵，😯我穷，哈哈哈。学校规定的是不能高于 30% 的查重率，建议还是自己把查重降低到 20% 以下然后再提交到学校知网去，不然超过的话是需要二次查重的。</p><p>还有一个感受就是：多和你的导师交流，遇到不会或者拿不准的最好在群里问他，然后他说的错误，你要及时更改好过来，说你问题的时候要学会脸上挂着笑容，嘻嘻嘻就过去了，然后记住该问题的错误，回去立马改好，及时拿材料给老师查阅修改好的论文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1frou078h61j312c0vedse.jpg&quot; alt=&quot;2018-05-26_15-01-42&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近一直在学校忙毕业论文的事，抱歉了，很长一段时间没更新文章了，今天星期六，昨天星期五，幸好所有资料都在周末前交齐了，昨晚还到参加班上的聚会，也喝了不少酒，但幸好没醉，不然今天肯定不会写下这篇文章的。这篇文章就把从接触到毕业论文指导老师到现在的这半年时间有关毕业论文的事都讲讲，希望能够留下点回忆！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0系列文章(七)：SpringApplication 深入探索</title>
    <link href="http://yoursite.com/2018/04/30/springboot_SpringApplication/"/>
    <id>http://yoursite.com/2018/04/30/springboot_SpringApplication/</id>
    <published>2018-04-29T16:00:00.000Z</published>
    <updated>2018-05-09T04:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqxbkmfds2j31hc0oegze.jpg" alt="sunset-3325080_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Spring Boot 项目的启动类中常见代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbotApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringbotApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中也就两个比较引人注意的地方：</p><ul><li><code>@SpringBootApplication</code></li><li><code>SpringApplication.run()</code></li></ul><p>对于第一个注解 <code>@SpringBootApplication</code>，我已经在博客 <a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring Boot 2.0中SpringBootApplication注解详解</a> 中详细的讲解了。接下来就是深入探究第二个了 <code>SpringApplication.run()</code> 。</p><h3 id="换个姿势"><a href="#换个姿势" class="headerlink" title="换个姿势"></a>换个姿势</h3><p>上面的姿势太简单了，只一行代码就完事了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication.run(SpringbotApplication.class, args);</span><br></pre></td></tr></table></figure><p>其实是支持做一些个性化的设置，接下来我们换个姿势瞧瞧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbotApplication</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(SpringbotApplication.class);</span><br><span class="line"> <span class="comment">// 自定义应用程序的配置</span></span><br><span class="line"> <span class="comment">//app.setXxx()</span></span><br><span class="line"> app.run(args)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，就是通过一个构造函数，然后设置相关的属性，从而达到定制化服务。有哪些属性呢？</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tttpf2j312618mn4w.jpg" alt="SpringApplicationFileds"></p><p>属性对应的 get／set 方法</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tz1wmyj31kw1f3qeo.jpg" alt="springapplication_getset"></p><p>看到没，还很多呢！</p><p>举个例子：你想把 Spring Boot 项目的默认 Banner 换成你自己的，就需要在这里如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//SpringApplication.run(Springboot2Application.class, args);</span></span><br><span class="line">  SpringApplication application = <span class="keyword">new</span> SpringApplication(Springboot2Application.class);</span><br><span class="line">  application.setBanner((environment, sourceClass, out) -&gt; &#123;</span><br><span class="line">    <span class="comment">//这里打印一个logo</span></span><br><span class="line">    System.out.println(<span class="string">"      _      _       _\n"</span> +</span><br><span class="line">                       <span class="string">"     | |    (_)     | |\n"</span> +</span><br><span class="line">                       <span class="string">" ____| |__   _  ___ | |__    ___  _ __    __ _\n"</span> +</span><br><span class="line">                       <span class="string">"|_  /| '_ \\ | |/ __|| '_ \\  / _ \\| '_ \\  / _` |\n"</span> +</span><br><span class="line">                       <span class="string">" / / | | | || |\\__ \\| | | ||  __/| | | || (_| |\n"</span> +</span><br><span class="line">                       <span class="string">"/___||_| |_||_||___/|_| |_| \\___||_| |_| \\__, |\n"</span> +</span><br><span class="line">                       <span class="string">"                                          __/ |\n"</span> +</span><br><span class="line">                       <span class="string">"                                         |___/\n"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  application.setBannerMode(Banner.Mode.CONSOLE);</span><br><span class="line">  <span class="comment">//你还可以干其他的定制化初始设置</span></span><br><span class="line">  application.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在重启项目，你就会发现，控制台的 logo 已经换成你自己的了。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tuvk6lj31kw1a6qio.jpg" alt="banner"></p><p>当然了，你可能会觉得这样写有点复杂，嗯嗯，确实，这样硬编码在代码里确实不太友好。你还可以在<code>src/main/resources</code>路径下新建一个<code>banner.txt</code>文件，<code>banner.txt</code>中填写好需要打印的字符串内容即可。</p><p>从该类中可以看到在 Spring Boot 2 中引入了个新的 WebApplicationType 和 WebEnvironment。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tvo4l3j31ke1fads1.jpg" alt="springapplication-002"></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tyfizgj31be13ujws.jpg" alt="webapplicationtype"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tmcuslj31im0yigtw.jpg" alt="springapplication-003"></p><p>确实，这也是 Spring Boot 2 中比较大的特性，它是支持响应式编程的。我之前在文章 <a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a> 中也介绍过，以后有机会会介绍它的，这里我先卖个关子。</p><h3 id="SpringApplication-初始化"><a href="#SpringApplication-初始化" class="headerlink" title="SpringApplication 初始化"></a>SpringApplication 初始化</h3><p><code>SpringApplication.run()</code>  的实现才是我们要深入探究的主角，该方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法，可用于使用默认配置运行 SpringApplication</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource,</span></span></span><br><span class="line"><span class="function"><span class="params">      String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class="line"><span class="function"><span class="params">String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个静态方法中，创建 SpringApplication 对象，并调用该对象的 run 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个 SpringApplication 实例，应用上下文会根据指定的主要资源加载 beans ，实例在调用 run 方法之前可以定制化</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">  Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">  <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">  <span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</span><br><span class="line">  setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">    ApplicationContextInitializer.class));</span><br><span class="line">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">  <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是进入单个参数的构造方法，然后进入两参数的构造方法（ResourceLoader 为 null），然后进行初始化。</p><p><strong>1、deduceWebApplicationType()</strong> : 推断应用的类型 ，创建的是一个 SERVLET 应用还是 REACTIVE应用或者是 NONE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REACTIVE_WEB_ENVIRONMENT_CLASS = <span class="string">"org.springframework.web.reactive.DispatcherHandler"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MVC_WEB_ENVIRONMENT_CLASS = <span class="string">"org.springframework.web.servlet.DispatcherServlet"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WEB_ENVIRONMENT_CLASSES = &#123; <span class="string">"javax.servlet.Servlet"</span>,</span><br><span class="line"><span class="string">"org.springframework.web.context.ConfigurableWebApplicationContext"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebApplicationType <span class="title">deduceWebApplicationType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)</span><br><span class="line">      &amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> WebApplicationType.REACTIVE;<span class="comment">//该程序是 REACTIVE 程序</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> WebApplicationType.NONE;<span class="comment">//该程序为 NONE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> WebApplicationType.SERVLET;<span class="comment">//默认返回是 SERVLET 程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class))</strong>：初始化 classpath 下的所有的可用的 ApplicationContextInitializer。</p><p>1）、getSpringFactoriesInstances()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有的 Spring 工厂实例</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">  ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">  <span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">  Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader)); <span class="comment">//获取所有 Spring Factories 的名字</span></span><br><span class="line">  List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">                                                     classLoader, args, names);</span><br><span class="line">  AnnotationAwareOrderComparator.sort(instances); <span class="comment">//Spring 工厂实例排序</span></span><br><span class="line">  <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据读取到的名字创建对象（Spring 工厂实例）</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">createSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params"> Class&lt;?&gt;[] parameterTypes, ClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">  List&lt;T&gt; instances = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line">  <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</span><br><span class="line">      Assert.isAssignable(type, instanceClass);</span><br><span class="line">      Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);</span><br><span class="line">      T instance = (T) BeanUtils.instantiateClass(constructor, args);</span><br><span class="line">      instances.add(instance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">        <span class="string">"Cannot instantiate "</span> + type + <span class="string">" : "</span> + name, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 SpringFactoriesLoader.loadFactoryNames() ，是从  META-INF/spring.factories 的资源文件中，读取 key 为org.springframework.context.ApplicationContextInitializer 的 value。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqx6xo1yhjj31kw1cinbe.jpg" alt="springfactoriesloader"></p><p>而 spring.factories 的部分内容如下：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tt63ojj31kw0kotk4.jpg" alt="2018-05-01_22-21-20"></p><p>可以看到，最近的得到的，是 ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer 这四个类的名字。</p><p>2）、setInitializers()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitializers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;? extends ApplicationContextInitializer&lt;?&gt;&gt; initializers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.initializers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">this</span>.initializers.addAll(initializers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，这里 setInitializers() 所得到的成员变量 initializers 就被初始化为ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer 这四个类的对象组成的 list。</p><p><strong>3、setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class))</strong>：初始化 classpath 下的所有的可用的 ApplicationListener。</p><p>1）、getSpringFactoriesInstances() 和上面的类似，但是它是从  META-INF/spring.factories 的资源文件中，获取到 key 为 org.springframework.context.ApplicationListener 的 value。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6ty24gvj31kw0l3n7h.jpg" alt="2018-05-01_22-33-56"></p><p>2）、setListeners()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListeners</span><span class="params">(Collection&lt;? extends ApplicationListener&lt;?&gt;&gt; listeners)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">this</span>.listeners.addAll(listeners);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，这里 setListeners() 所得到的成员变量 listeners 就被初始化为 ClearCachesApplicationListener，ParentContextCloserApplicationListener，FileEncodingApplicationListener，AnsiOutputApplicationListener ，ConfigFileApplicationListener，DelegatingApplicationListener，ClasspathLoggingApplicationListener，LoggingApplicationListener，LiquibaseServiceLocatorApplicationListener  这九个类的对象组成的 list。</p><p><strong>4、deduceMainApplicationClass()</strong> ：根据调用栈，推断出 main 方法的类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line">    <span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    <span class="comment">// Swallow and continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run-方法背后的秘密"><a href="#run-方法背后的秘密" class="headerlink" title="run 方法背后的秘密"></a>run 方法背后的秘密</h3><p>上面看完了构造方法后，已经初始化了一个 SpringApplication 对象，接下来调用其 run 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行 Spring 应用程序，创建并刷新一个新的 ApplicationContext</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context);</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变个数参数 args 即是我们整个应用程序的入口 main 方法的参数。StopWatch 是来自 org.springframework.util 的工具类，可以用来方便的记录程序的运行时间。</p><p>再来看看 1.5.12 与 2.0.1 版本的 run 方法 有什么不一样的地方？</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6u0khy1j31kw0wuhar.jpg" alt="difference-1.5-2.0"></p><p>接下来好好分析上面新版本（2.0.1）的 run 方法的代码并配合比较旧版本（1.5.12）。</p><p><strong>1、configureHeadlessProperty()</strong>：设置 headless 模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = <span class="string">"java.awt.headless"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> headless = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.getProperty(</span><br><span class="line">    SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是就是设置系统属性 java.awt.headless，该属性会被设置为 true。</p><p><strong>2、getRunListeners()</strong>：加载 SpringApplicationRunListener 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//<span class="doctag">TODO:</span>  xxx</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);<span class="comment">//初始化监听器</span></span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">  refreshContext(context);</span><br><span class="line">  afterRefresh(context, applicationArguments);</span><br><span class="line">  listeners.started(context);</span><br><span class="line">  callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</span><br><span class="line">    SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 getRunListeners() 中也利用 SpringFactoriesLoader 加载 META-INF/spring.factories 中 key 为 SpringApplicationRunListener 的值，然后再将获取到的值作为参数传递到 SpringApplicationRunListeners 的构造方法中去创建对象。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqxei8t4u6j31do0ow0z9.jpg" alt="2018-05-02_23-11-01"></p><p><strong>3、new DefaultApplicationArguments(args)</strong> ：获取启动时传入参数 args（main 方法传进来的参数） 并初始化为 ApplicationArguments 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultApplicationArguments</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Assert.notNull(args, <span class="string">"Args must not be null"</span>);</span><br><span class="line">  <span class="keyword">this</span>.source = <span class="keyword">new</span> Source(args);</span><br><span class="line">  <span class="keyword">this</span>.args = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、prepareEnvironment(listeners, applicationArguments)</strong>：根据 listeners 和 applicationArguments 配置SpringBoot 应用的环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create and configure the environment</span></span><br><span class="line">  ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">  configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">  listeners.environmentPrepared(environment);</span><br><span class="line">  bindToSpringApplication(environment);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationType == WebApplicationType.NONE) &#123;</span><br><span class="line">    environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">      .convertToStandardEnvironmentIfNecessary(environment);</span><br><span class="line">  &#125;</span><br><span class="line">  ConfigurationPropertySources.attach(environment);</span><br><span class="line">  <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 environment 不为空，直接 get 到，否则创建</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationType == WebApplicationType.SERVLET) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置环境</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment,String[] args)</span> </span>&#123;</span><br><span class="line">  configurePropertySources(environment, args);<span class="comment">//配置要使用的PropertySources</span></span><br><span class="line">  configureProfiles(environment, args);<span class="comment">//配置要使用的Profiles</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将环境绑定到 SpringApplication</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindToSpringApplication</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Binder.get(environment).bind(<span class="string">"spring.main"</span>, Bindable.ofInstance(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot bind to SpringApplication"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、configureIgnoreBeanInfo(environment)</strong>：根据环境信息配置要忽略的 bean 信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IGNORE_BEANINFO_PROPERTY_NAME = <span class="string">"spring.beaninfo.ignore"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureIgnoreBeanInfo</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (System.getProperty(</span><br><span class="line">    CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    Boolean ignore = environment.getProperty(<span class="string">"spring.beaninfo.ignore"</span>,</span><br><span class="line">                                             Boolean.class, Boolean.TRUE);</span><br><span class="line">    System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,</span><br><span class="line">                       ignore.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、printBanner(environment)</strong>：打印标志，上面我已经说过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Banner.Mode.OFF) &#123;<span class="comment">//如果设置为 off，不打印 Banner</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ResourceLoader resourceLoader = <span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span> ? <span class="keyword">this</span>.resourceLoader</span><br><span class="line">    : <span class="keyword">new</span> DefaultResourceLoader(getClassLoader());</span><br><span class="line">  SpringApplicationBannerPrinter bannerPrinter = <span class="keyword">new</span> SpringApplicationBannerPrinter(</span><br><span class="line">    resourceLoader, <span class="keyword">this</span>.banner);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Mode.LOG) &#123;</span><br><span class="line">    <span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, logger);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, System.out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、createApplicationContext()</strong>：根据应用类型来确定该 Spring Boot 项目应该创建什么类型的 ApplicationContext ，默认情况下，如果没有明确设置的应用程序上下文或应用程序上下文类，该方法会在返回合适的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_WEB_CONTEXT_CLASS = <span class="string">"org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_REACTIVE_WEB_CONTEXT_CLASS = <span class="string">"org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTEXT_CLASS = <span class="string">"org.springframework.context.annotation.AnnotationConfigApplicationContext"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">  <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;<span class="comment">//根据应用程序的类型来初始化容器</span></span><br><span class="line">        <span class="keyword">case</span> SERVLET:<span class="comment">//servlet 应用程序</span></span><br><span class="line">          contextClass = Class.forName(DEFAULT_WEB_CONTEXT_CLASS);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REACTIVE:<span class="comment">//reactive 应用程序</span></span><br><span class="line">          contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="comment">//默认</span></span><br><span class="line">          contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">    <span class="string">"Unable create a default ApplicationContext,please specify an     ApplicationContextClass"</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//最后通过Spring的工具类 BeanUtils 初始化容器类 bean</span></span><br><span class="line">  <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看在 1.5.12 中是怎么样的？</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tx7lchj31kw0nw4gr.jpg" alt="createApplicationContext"></p><p><strong>8、exceptionReporters = getSpringFactoriesInstances(      SpringBootExceptionReporter.class,      new Class[] { ConfigurableApplicationContext.class }, context)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params">            Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">  ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">  <span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">  Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">    SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">  List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">       classLoader, args, names);<span class="comment">//根据类型 key 为 SpringBootExceptionReporter 去加载</span></span><br><span class="line">  AnnotationAwareOrderComparator.sort(instances);<span class="comment">//对实例排序</span></span><br><span class="line">  <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也是通过 SpringFactoriesLoader 加载 META-INF/spring.factories 中 key 为 SpringBootExceptionReporter 的全类名的 value 值。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tp9y81j31kw0tfdqv.jpg" alt="springbootexception"></p><p><strong>9、prepareContext(context, environment, listeners, applicationArguments, printedBanner)</strong>：完成整个容器的创建与启动以及 bean 的注入功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装配 Context</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">   ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">   ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将之前准备好的 environment 设置给创建好的 ApplicationContext 使用</span></span><br><span class="line">  context.setEnvironment(environment);</span><br><span class="line">  <span class="comment">//1、</span></span><br><span class="line">  postProcessApplicationContext(context);</span><br><span class="line">  <span class="comment">//2、</span></span><br><span class="line">  applyInitializers(context);</span><br><span class="line">  listeners.contextPrepared(context);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;<span class="comment">//启动日志</span></span><br><span class="line">    logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">    logStartupProfileInfo(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">  context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,</span><br><span class="line">                                             applicationArguments);</span><br><span class="line">  <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">    context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load the sources</span></span><br><span class="line">  Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">  Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">  <span class="comment">//3、</span></span><br><span class="line">  load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">  listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1）、postProcessApplicationContext(context)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURATION_BEAN_NAME_GENERATOR = <span class="string">"org.springframework.context.annotation.internalConfigurationBeanNameGenerator"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">    context.getBeanFactory().registerSingleton(</span><br><span class="line">      AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line">      <span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</span><br><span class="line">      ((GenericApplicationContext) context)</span><br><span class="line">      .setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> DefaultResourceLoader) &#123;</span><br><span class="line">      ((DefaultResourceLoader) context)</span><br><span class="line">      .setClassLoader(<span class="keyword">this</span>.resourceLoader.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法对 context 进行了预设置，设置了 ResourceLoader 和 ClassLoader，并向 bean 工厂中添加了一个beanNameGenerator 。</p><p><strong>2）、applyInitializers(context)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyInitializers</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (ApplicationContextInitializer initializer : getInitializers()) &#123;</span><br><span class="line">    Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(</span><br><span class="line">      initializer.getClass(), ApplicationContextInitializer.class);</span><br><span class="line">    Assert.isInstanceOf(requiredType, context, <span class="string">"Unable to call initializer."</span>);</span><br><span class="line">    initializer.initialize(context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在刷新之前将任何 ApplicationContextInitializer 应用于上下文</p><p><strong>3)、load(context, sources.toArray(new Object[0]))</strong></p><p>主要是加载各种 beans 到 ApplicationContext 对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</span><br><span class="line">  BeanDefinitionLoader loader = createBeanDefinitionLoader( <span class="comment">//2</span></span><br><span class="line">    getBeanDefinitionRegistry(context), sources);<span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">    loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">    loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">    loader.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">  &#125;</span><br><span class="line">  loader.load();<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(1)、getBeanDefinitionRegistry(context)</strong></p><p>获取 bean 定义注册表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> BeanDefinitionRegistry <span class="title">getBeanDefinitionRegistry</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">    <span class="keyword">return</span> (BeanDefinitionRegistry) context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (context <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">    <span class="keyword">return</span> (BeanDefinitionRegistry) ((AbstractApplicationContext) context)</span><br><span class="line">      .getBeanFactory();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not locate BeanDefinitionRegistry"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2)、createBeanDefinitionLoader()</strong></p><p>通过 BeanDefinitionLoader 的构造方法把参数（注册表、资源）传进去，然后创建 BeanDefinitionLoader。</p><p><strong>(3)、load()</strong></p><p>把资源全部加载。</p><p><strong>10、refreshContext(context)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">  refresh(context);<span class="comment">//1</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">      <span class="comment">// Not allowed in some environments.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//刷新底层的 ApplicationContext</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">  Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);</span><br><span class="line">  ((AbstractApplicationContext) applicationContext).refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>refreshContext(context) 方法又调用了 refresh(context)。在调用了 refresh(context) 方法之后，调用了 registerShutdownHook 方法。继续看它的 refresh 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">    prepareRefresh();</span><br><span class="line">    <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">    <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">    prepareBeanFactory(beanFactory);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">      postProcessBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">      invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">      <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">      registerBeanPostProcessors(beanFactory);</span><br><span class="line">      <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">      initMessageSource();</span><br><span class="line">      <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">      initApplicationEventMulticaster();</span><br><span class="line">      <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">      onRefresh();</span><br><span class="line">      <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">      registerListeners();</span><br><span class="line">      <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">      finishBeanFactoryInitialization(beanFactory); <span class="comment">//1</span></span><br><span class="line">      <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">      finishRefresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">      。。。</span><br><span class="line">        <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">        destroyBeans();</span><br><span class="line">      <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">      cancelRefresh(ex);</span><br><span class="line">      <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">      <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">      resetCommonCaches();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们就看见重点了，仔细看上的注释，正在做各种初始化工作，而今天我们关注的重点就是方法 finishBeanFactoryInitialization(beanFactory)。该方法进行了非懒加载 beans 的初始化工作。现在我们进入该方法内部，一探究竟。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqx6tli7pjj31kw1757h0.jpg" alt="finishbeanFactoryini"></p><p>看上图方法中的最后一步，调用了 beanFactory 的 preInstantiateSingletons() 方法。此处的 beanFactory 是哪个类的实例对象呢？</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqx6xir0iaj31kw0urjuy.jpg" alt="2018-05-02_16-17-50"></p><p>可以看到 ConfigurableListableBeanFactory 接口的实现类只有 DefaultListableBeanFactory，我们看下实现类中的 preInstantiateSingletons 方法是怎么做的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">  <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">  List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">        Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">          <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">          <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean)&#123;</span><br><span class="line">            isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">             ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit, getAccessControlContext());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                           ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">            getBean(beanName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getBean(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    Object singletonInstance = getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">      <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">          smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看到很多调用了 getBean(beanName) 方法，跟踪此方法进去后，最终发现 getBean 调用了AbstractBeanFactory 类的 doGetBean(xxx) 方法，doGetBean(xxx) 方法中有这么一段代码：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tr2ukqj31je1fegwm.jpg" alt="2018-05-02_17-17-39"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6xjtn0hj31ja17g15o.jpg" alt="2018-05-02_17-19-31"></p><p>但是 createBean() 方法并没有得到实现，实现类在 AbstractAutowireCapableBeanFactory 中。这才是创建 bean 的核心方法。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqx6toc4dxj31kw1bana4.jpg" alt="createBean"></p><p>不知不觉，代码看的越来越深，感觉思维都差点回不去 run 方法了，切回大脑的上下文线程到 run 方法去。</p><p><strong>11、afterRefresh(context, applicationArguments)</strong>：在上下文刷新后调用该方法，其内部没有做任何操作。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tnnz8vj31bs0pkgrg.jpg" alt="2018-05-02_17-43-23"></p><p>发现没做任何操作了之后，就觉得有点奇怪，所以把当前版本和 1.5.12  对比了下，发现：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqx6ts33l2j31kw0witww.jpg" alt="afterRefresh"></p><p>在 1.5.12 中的 afterRefresh() 方法中调用了 callRunners() 方法，但是在 2.0.1 版本中的 run 方法中调用了 callRunners () 方法:</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6xmgbpvj31kw0x8hc4.jpg" alt="2018-05-02_17-57-52"></p><p>这里不得不说 SpringApplicationRunListeners 在 2.0.1 中的改变：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tq6fzhj31kw0y5azk.jpg" alt="2018-05-02_18-28-17"></p><p>可以发现在 run 方法中，SpringApplicationRunListeners 监听器的状态花生了变化，这也是通过对比不同版本的代码才知道的区别，所以说我们看源码需要多对比着看。</p><p>so，我们来看下这个 SpringApplicationRunListener 这个接口：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqx6xla7afj31kw0unx1j.jpg" alt="2018-05-02_18-33-20"></p><p>started 状态：The context has been refreshed and the application has started but CommandLineRunner and ApplicationRunner have not been called</p><p>running 状态：Called immediately before the run method finishes, when the application context has been refreshed and all CommandLineRunner and ApplicationRunners have been called.</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(七)：SpringApplication 深入探索</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文从源码级别分析了 Spring Boot 应用程序的启动过程，着重看了 SpringApplication 类中的构造函数的初始化和其 run 方法内部实现，并把涉及到的流程代码都过了一遍。</p><p>感悟：有时候跟代码跟着跟着，发现越陷越深，好难跳出来！后面还需多向别人请教阅读源码的技巧！</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>虽然源码很难，但随着不断的探索，源码在你面前将会一览无遗，享受这种探索后的成就感！加油！骚年！</p><p>自己本人能力有限，源码看的不多，上面如有不对的还请留言交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqxbkmfds2j31hc0oegze.jpg&quot; alt=&quot;sunset-3325080_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁看这篇就够了</title>
    <link href="http://yoursite.com/2018/04/24/Distributed_lock/"/>
    <id>http://yoursite.com/2018/04/24/Distributed_lock/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-05-02T13:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqp2lqscrwj31hc0zk46a.jpg" alt="meadow-811339_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/</a></p><h3 id="什么是锁？"><a href="#什么是锁？" class="headerlink" title="什么是锁？"></a>什么是锁？</h3><ul><li>在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量。</li><li>而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁。</li><li>不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可。如 Java 中 synchronize 是在对象头设置标记，Lock 接口的实现类基本上都只是某一个 volitile 修饰的 int 型变量其保证每个线程都能拥有对该 int 的可见性和原子修改，linux 内核中也是利用互斥量或信号量等内存数据做标记。</li><li>除了利用内存数据做锁其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。</li></ul><h3 id="什么是分布式？"><a href="#什么是分布式？" class="headerlink" title="什么是分布式？"></a>什么是分布式？</h3><p>分布式的 CAP 理论告诉我们:</p><blockquote><p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p></blockquote><p>目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。</p><h4 id="分布式场景"><a href="#分布式场景" class="headerlink" title="分布式场景"></a>分布式场景</h4><blockquote><p>此处主要指集群模式下，多个相同服务同时开启.</p></blockquote><p>在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如<strong>分布式事务</strong>、<strong>分布式锁</strong>等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过 Java 提供的并发 API 我们可以解决，但是在分布式环境下，就没有那么简单啦。</p><ul><li>分布式与单机情况下最大的不同在于其不是多线程而是<strong>多进程</strong>。</li><li>多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。</li></ul><h4 id="什么是分布式锁？"><a href="#什么是分布式锁？" class="headerlink" title="什么是分布式锁？"></a>什么是分布式锁？</h4><ul><li>当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。</li><li>与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题。（我觉得分布式情况下之所以问题变得复杂，主要就是需要考虑到<strong>网络的延时和不可靠</strong>。。。一个大坑）</li><li>分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。</li></ul><h3 id="我们需要怎样的分布式锁？"><a href="#我们需要怎样的分布式锁？" class="headerlink" title="我们需要怎样的分布式锁？"></a>我们需要怎样的分布式锁？</h3><ul><li>可以保证在分布式部署的应用集群中，同一个方法在同一时间只能被一台机器上的一个线程执行。</li><li>这把锁要是一把可重入锁（避免死锁）</li><li>这把锁最好是一把阻塞锁（根据业务需求考虑要不要这条）</li><li>这把锁最好是一把公平锁（根据业务需求考虑要不要这条）</li><li>有高可用的获取锁和释放锁功能</li><li>获取锁和释放锁的性能要好</li></ul><h3 id="基于数据库做分布式锁"><a href="#基于数据库做分布式锁" class="headerlink" title="基于数据库做分布式锁"></a>基于数据库做分布式锁</h3><blockquote><p>基于乐观锁</p></blockquote><h4 id="基于表主键唯一做分布式锁"><a href="#基于表主键唯一做分布式锁" class="headerlink" title="基于表主键唯一做分布式锁"></a>基于表主键唯一做分布式锁</h4><p>利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。</p><p>上面这种简单的实现有以下几个问题：</p><ul><li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</li><li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</li><li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。</li><li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。</li><li>这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁。</li><li>在 MySQL 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。</li></ul><p>当然，我们也可以有其他方式解决上面的问题。</p><ul><li>数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上。</li><li>没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍。</li><li>非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功。</li><li>非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了。</li><li>非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁。</li><li>比较好的办法是在程序中生产主键进行防重。</li></ul><h4 id="基于表字段版本号做分布式锁"><a href="#基于表字段版本号做分布式锁" class="headerlink" title="基于表字段版本号做分布式锁"></a>基于表字段版本号做分布式锁</h4><p>这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。</p><blockquote><p>基于悲观锁</p></blockquote><h4 id="基于数据库排他锁做分布式锁"><a href="#基于数据库排他锁做分布式锁" class="headerlink" title="基于数据库排他锁做分布式锁"></a>基于数据库排他锁做分布式锁</h4><p>在查询语句后面增加<code>for update</code>，数据库会在查询过程中给数据库表增加排他锁 (注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上。)。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p><p>我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过<code>connection.commit()</code>操作来释放锁。</p><p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p><ul><li>阻塞锁？ <code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功。</li><li>锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</li></ul><p>但是还是无法直接解决数据库单点和可重入问题。</p><p>这里还可能存在另外一个问题，虽然我们对方法字段名使用了唯一索引，并且显示使用 for update 来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。如果发生这种情况就悲剧了。。。</p><p>还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点</strong>：简单，易于理解</p><p><strong>缺点</strong>：会有各种各样的问题（操作数据库需要一定的开销，使用数据库的行级锁并不一定靠谱，性能不靠谱）</p><h3 id="基于-Redis-做分布式锁"><a href="#基于-Redis-做分布式锁" class="headerlink" title="基于 Redis 做分布式锁"></a>基于 Redis 做分布式锁</h3><h4 id="基于-redis-的-setnx-、expire-方法做分布式锁"><a href="#基于-redis-的-setnx-、expire-方法做分布式锁" class="headerlink" title="基于 redis 的 setnx()、expire() 方法做分布式锁"></a>基于 redis 的 setnx()、expire() 方法做分布式锁</h4><h5 id="setnx"><a href="#setnx" class="headerlink" title="setnx()"></a>setnx()</h5><p>setnx 的含义就是 SET if Not Exists，其主要有两个参数 setnx(key, value)。该方法是原子的，如果 key 不存在，则设置当前 key 成功，返回 1；如果当前 key 已经存在，则设置当前 key 失败，返回 0。</p><h5 id="expire"><a href="#expire" class="headerlink" title="expire()"></a>expire()</h5><p>expire 设置过期时间，要注意的是 setnx 命令不能设置 key 的超时时间，只能通过 expire() 来对 key 设置。</p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>1、setnx(lockkey, 1)  如果返回 0，则说明占位失败；如果返回 1，则说明占位成功</p><p>2、expire() 命令对 lockkey 设置超时时间，为的是避免死锁问题。</p><p>3、执行完业务代码后，可以通过 delete 命令删除 key。</p><p>这个方案其实是可以解决日常工作中的需求的，但从技术方案的探讨上来说，可能还有一些可以完善的地方。<strong>比如，如果在第一步 setnx 执行成功后，在 expire() 命令执行成功前，发生了宕机的现象，那么就依然会出现死锁的问题，所以如果要对其进行完善的话，可以使用 redis 的 setnx()、get() 和 getset() 方法来实现分布式锁。</strong></p><h4 id="基于-redis-的-setnx-、get-、getset-方法做分布式锁"><a href="#基于-redis-的-setnx-、get-、getset-方法做分布式锁" class="headerlink" title="基于 redis 的 setnx()、get()、getset()方法做分布式锁"></a>基于 redis 的 setnx()、get()、getset()方法做分布式锁</h4><p>这个方案的背景主要是在 setnx() 和 expire() 的方案上针对可能存在的死锁问题，做了一些优化。</p><h5 id="getset"><a href="#getset" class="headerlink" title="getset()"></a>getset()</h5><p>这个命令主要有两个参数 getset(key，newValue)。该方法是原子的，对 key 设置 newValue 这个值，并且返回 key 原来的旧值。假设 key 原来是不存在的，那么多次执行这个命令，会出现下边的效果：</p><ol><li>getset(key, “value1”)  返回 null   此时 key 的值会被设置为 value1</li><li>getset(key, “value2”)  返回 value1   此时 key 的值会被设置为 value2</li><li>依次类推！</li></ol><h5 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h5><ol><li>setnx(lockkey, 当前时间+过期超时时间)，如果返回 1，则获取锁成功；如果返回 0 则没有获取到锁，转向 2。</li><li>get(lockkey) 获取值 oldExpireTime ，并将这个 value 值与当前的系统时间进行比较，如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向 3。</li><li>计算 newExpireTime = 当前时间+过期超时时间，然后 getset(lockkey, newExpireTime) 会返回当前 lockkey 的值currentExpireTime。</li><li>判断 currentExpireTime 与 oldExpireTime 是否相等，如果相等，说明当前 getset 设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。</li><li>在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行 delete 释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.com.tpig.cache.redis.RedisService;</span><br><span class="line"><span class="keyword">import</span> cn.com.tpig.utils.SpringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//redis分布式锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> defaultExpire = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisLockUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key redis key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:加锁成功，false，加锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line">        <span class="keyword">long</span> status = redisService.setnx(key, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">            redisService.expire(key, expire);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lock2(key, defaultExpire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key redis key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:加锁成功，false，加锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">lock2</span><span class="params">(String key, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> value = System.currentTimeMillis() + expire;</span><br><span class="line">        <span class="keyword">long</span> status = redisService.setnx(key, String.valueOf(value));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class="string">"0"</span>));</span><br><span class="line">        <span class="keyword">if</span>(oldExpireTime &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">//超时</span></span><br><span class="line">            <span class="keyword">long</span> newExpireTime = System.currentTimeMillis() + expire;</span><br><span class="line">            <span class="keyword">long</span> currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));</span><br><span class="line">            <span class="keyword">if</span>(currentExpireTime == oldExpireTime) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unLock1</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line">        redisService.del(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unLock2</span><span class="params">(String key)</span> </span>&#123;    </span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);    </span><br><span class="line">        <span class="keyword">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class="string">"0"</span>));   </span><br><span class="line">        <span class="keyword">if</span>(oldExpireTime &gt; System.currentTimeMillis()) &#123;        </span><br><span class="line">            redisService.del(key);    </span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRedPacket</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">    String key = <span class="string">"draw.redpacket.userid:"</span> + userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> lock = RedisLockUtil.lock2(key, <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">if</span>(lock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//领取操作</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            RedisLockUtil.unLock(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> RuntimeException(<span class="string">"重复领取奖励"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于-Redlock-做分布式锁"><a href="#基于-Redlock-做分布式锁" class="headerlink" title="基于 Redlock 做分布式锁"></a>基于 Redlock 做分布式锁</h4><p>Redlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。</p><p>算法的步骤如下：</p><ul><li>1、客户端获取当前时间，以毫秒为单位。</li><li>2、客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用。</li><li>3、客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁。</li><li>4、客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间。</li><li>5、如果客户端获取锁失败了，客户端会依次删除所有的锁。<br>使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。</li></ul><p>但是，有一位分布式的专家写了一篇文章《How to do distributed locking》，质疑 Redlock 的正确性。</p><p><a href="">https://mp.weixin.qq.com/s/1bPLk_VZhZ0QYNZS8LkviA</a></p><p><a href="">https://blog.csdn.net/jek123456/article/details/72954106</a></p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><p>性能高</p><p><strong>缺点：</strong></p><p>失效时间设置多长时间为好？如何设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。如果设置的时间太长，其他获取锁的线程就可能要平白的多等一段时间。</p><h4 id="基于-redisson-做分布式锁"><a href="#基于-redisson-做分布式锁" class="headerlink" title="基于 redisson 做分布式锁"></a>基于 redisson 做分布式锁</h4><p>redisson 是 redis 官方的分布式锁组件。GitHub 地址：<a href="">https://github.com/redisson/redisson</a></p><p>上面的这个问题 ——&gt; 失效时间设置多长时间为好？这个问题在 redisson 的做法是：每获得一个锁时，只设置一个很短的超时时间，同时起一个线程在每次快要到超时时间时去刷新锁的超时时间。在释放锁的同时结束这个线程。</p><h3 id="基于-ZooKeeper-做分布式锁"><a href="#基于-ZooKeeper-做分布式锁" class="headerlink" title="基于 ZooKeeper 做分布式锁"></a>基于 ZooKeeper 做分布式锁</h3><h4 id="zookeeper-锁相关基础知识"><a href="#zookeeper-锁相关基础知识" class="headerlink" title="zookeeper 锁相关基础知识"></a>zookeeper 锁相关基础知识</h4><ul><li>zk 一般由多个节点构成（单数），采用 zab 一致性协议。因此可以将 zk 看成一个单点结构，对其修改数据其内部自动将所有节点数据进行修改而后才提供查询服务。</li><li>zk 的数据以目录树的形式，每个目录称为  znode， znode 中可存储数据（一般不超过 1M），还可以在其中增加子节点。</li><li>子节点有三种类型。序列化节点，每在该节点下增加一个节点自动给该节点的名称上自增。临时节点，一旦创建这个 znode 的客户端与服务器失去联系，这个 znode 也将自动删除。最后就是普通节点。</li><li>Watch 机制，client 可以监控每个节点的变化，当产生变化会给 client 产生一个事件。</li></ul><h4 id="zk-基本锁"><a href="#zk-基本锁" class="headerlink" title="zk 基本锁"></a>zk 基本锁</h4><ul><li>原理：利用临时节点与 watch 机制。每个锁占用一个普通节点 /lock，当需要获取锁时在 /lock 目录下创建一个临时节点，创建成功则表示获取锁成功，失败则 watch/lock 节点，有删除操作后再去争锁。临时节点好处在于当进程挂掉后能自动上锁的节点自动删除即取消锁。</li><li>缺点：所有取锁失败的进程都监听父节点，很容易发生羊群效应，即当释放锁后所有等待进程一起来创建节点，并发量很大。</li></ul><h4 id="zk-锁优化"><a href="#zk-锁优化" class="headerlink" title="zk 锁优化"></a>zk 锁优化</h4><ul><li>原理：上锁改为创建临时有序节点，每个上锁的节点均能创建节点成功，只是其序号不同。只有序号最小的可以拥有锁，如果这个节点序号不是最小的则 watch 序号比本身小的前一个节点 (公平锁)。</li><li>步骤：</li></ul><ol><li>在 /lock 节点下创建一个有序临时节点 (EPHEMERAL_SEQUENTIAL)。</li><li>判断创建的节点序号是否最小，如果是最小则获取锁成功。不是则取锁失败，然后 watch 序号比本身小的前一个节点。</li><li>当取锁失败，设置 watch 后则等待 watch 事件到来后，再次判断是否序号最小。</li><li>取锁成功则执行代码，最后释放锁（删除该节点）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">Watcher</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line">    <span class="keyword">private</span> String root = <span class="string">"/locks"</span>;<span class="comment">//根</span></span><br><span class="line">    <span class="keyword">private</span> String lockName;<span class="comment">//竞争资源的标志</span></span><br><span class="line">    <span class="keyword">private</span> String waitNode;<span class="comment">//等待前一个锁</span></span><br><span class="line">    <span class="keyword">private</span> String myZnode;<span class="comment">//当前锁</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;<span class="comment">//计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">30000</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Exception&gt; exception = <span class="keyword">new</span> ArrayList&lt;Exception&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建分布式锁,使用前请确认config配置的zookeeper服务可用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config 127.0.0.1:2181</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName 竞争资源标志,lockName中不能包含单词lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLock</span><span class="params">(String config, String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockName = lockName;</span><br><span class="line">        <span class="comment">// 创建一个与服务器的连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zk = <span class="keyword">new</span> ZooKeeper(config, sessionTimeout, <span class="keyword">this</span>);</span><br><span class="line">            Stat stat = zk.exists(root, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(stat == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 创建根节点</span></span><br><span class="line">                zk.create(root, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            exception.add(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            exception.add(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            exception.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zookeeper节点的监视器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.latch != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exception.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(exception.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.tryLock())&#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" "</span> +myZnode + <span class="string">" get lock true"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                waitForLock(waitNode, sessionTimeout);<span class="comment">//等待锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String splitStr = <span class="string">"_lock_"</span>;</span><br><span class="line">            <span class="keyword">if</span>(lockName.contains(splitStr))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LockException(<span class="string">"lockName can not contains \\u000B"</span>);</span><br><span class="line">            <span class="comment">//创建临时子节点</span></span><br><span class="line">            myZnode = zk.create(root + <span class="string">"/"</span> + lockName + splitStr, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            System.out.println(myZnode + <span class="string">" is created "</span>);</span><br><span class="line">            <span class="comment">//取出所有子节点</span></span><br><span class="line">            List&lt;String&gt; subNodes = zk.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//取出所有lockName的锁</span></span><br><span class="line">            List&lt;String&gt; lockObjNodes = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String node : subNodes) &#123;</span><br><span class="line">                String _node = node.split(splitStr)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span>(_node.equals(lockName))&#123;</span><br><span class="line">                    lockObjNodes.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(lockObjNodes);</span><br><span class="line">            System.out.println(myZnode + <span class="string">"=="</span> + lockObjNodes.get(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">if</span>(myZnode.equals(root+<span class="string">"/"</span>+lockObjNodes.get(<span class="number">0</span>)))&#123;</span><br><span class="line">                <span class="comment">//如果是最小的节点,则表示取得锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是最小的节点，找到比自己小1的节点</span></span><br><span class="line">            String subMyZnode = myZnode.substring(myZnode.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">            waitNode = lockObjNodes.get(Collections.binarySearch(lockObjNodes, subMyZnode) - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.tryLock())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> waitForLock(waitNode,time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">waitForLock</span><span class="params">(String lower, <span class="keyword">long</span> waitTime)</span> <span class="keyword">throws</span> InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        Stat stat = zk.exists(root + <span class="string">"/"</span> + lower,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//判断比自己小一个数的节点是否存在,如果不存在则无需等待锁,同时注册监听</span></span><br><span class="line">        <span class="keyword">if</span>(stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" waiting for "</span> + root + <span class="string">"/"</span> + lower);</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"unlock "</span> + myZnode);</span><br><span class="line">            zk.delete(myZnode,-<span class="number">1</span>);</span><br><span class="line">            myZnode = <span class="keyword">null</span>;</span><br><span class="line">            zk.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(String e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><p>有效的解决单点问题，不可重入问题，非阻塞问题以及锁无法释放的问题。实现起来较为简单。</p><p><strong>缺点：</strong></p><p>性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。还需要对 ZK的原理有所了解。</p><h3 id="基于-Consul-做分布式锁"><a href="#基于-Consul-做分布式锁" class="headerlink" title="基于 Consul 做分布式锁"></a>基于 Consul 做分布式锁</h3><p>DD 写过类似文章，其实主要利用 Consul 的 Key / Value 存储 API 中的 acquire 和 release 操作来实现。</p><p>文章地址：<a href="">http://blog.didispace.com/spring-cloud-consul-lock-and-semphore/</a></p><h3 id="使用分布式锁的注意事项"><a href="#使用分布式锁的注意事项" class="headerlink" title="使用分布式锁的注意事项"></a>使用分布式锁的注意事项</h3><p>1、注意分布式锁的开销</p><p>2、注意加锁的粒度</p><p>3、加锁的方式</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论你身处一个什么样的公司，最开始的工作可能都需要从最简单的做起。不要提阿里和腾讯的业务场景 qps 如何大，因为在这样的大场景中你未必能亲自参与项目，亲自参与项目未必能是核心的设计者，是核心的设计者未必能独自设计。希望大家能根据自己公司业务场景，选择适合自己项目的方案。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="">http://www.hollischuang.com/archives/1716</a></p><p><a href="">http://www.spring4all.com/question/158</a></p><p><a href="">https://www.cnblogs.com/PurpleDream/p/5559352.html</a></p><p><a href="">http://www.cnblogs.com/PurpleDream/p/5573040.html</a></p><p><a href="">https://www.cnblogs.com/suolu/p/6588902.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqp2lqscrwj31hc0zk46a.jpg&quot; alt=&quot;meadow-811339_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式锁" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0系列文章(六)：Spring Boot 2.0中SpringBootApplication注解详解</title>
    <link href="http://yoursite.com/2018/04/19/SpringBootApplication-annotation/"/>
    <id>http://yoursite.com/2018/04/19/SpringBootApplication-annotation/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-05-02T13:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqifa86vplj31hc0p0n7e.jpg" alt="nature-3201015_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>许多 Spring Boot 开发者喜欢他们的应用程序使用自动配置、组件扫描、并能够在他们的 “Application” 类上定义额外的配置。 可以使用一个 <code>@SpringBootApplication</code> 注解来启用这些功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>跟进去 <code>@SpringBootApplication</code>  注解可以发现下图：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqifa18tt5j31kw17uap2.jpg" alt="springbootapplication"></p><p>其中标注的三个注解正能解决我们上面所说的三种功能，它们是：</p><ul><li><code>@SpringBootConfiguration</code></li><li><code>@EnableAutoConfiguration</code></li><li><code>@ComponentScan</code></li></ul><p>该接口除了上面三个注解外，还有四个方法如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqifa27hu2j31kw1aqgy0.jpg" alt="springbootapplication"></p><ul><li>Class&lt;?&gt;[] exclude() default {}:<br>根据 class 来排除，排除特定的类加入 spring 容器，传入参数 value 类型是 class 类型。</li><li>String[] excludeName() default {}:<br>根据 class name 来排除，排除特定的类加入 spring 容器，传入参数 value 类型是 class 的全类名字符串数组。</li><li>String[] scanBasePackages() default {}:<br>指定扫描包，参数是包名的字符串数组。</li><li>Class&lt;?&gt;[] scanBasePackageClasses() default {}:<br>扫描特定的包，参数类似是 Class 类型数组。</li></ul><p>就拿 scanBasePackages 来举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123;<span class="string">"com.zhisheng.controller"</span>,<span class="string">"com.zhisheng.model"</span>&#125;)</span><br></pre></td></tr></table></figure><p>将不需要的 bean 排除在 spring 容器中，如何操作？看看官方的代码怎么用的：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqifa5xheaj31kw12rwsj.jpg" alt="sb-enableautoconfig-exclude"></p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqifab18l3j31kw0w4jyu.jpg" alt="springbootconfiguration"></p><p><code>@SpringBootConfiguration</code>继承自<code>@Configuration</code>，二者功能也一致，标注当前类是配置类，并会将当前类内声明的一个或多个以<code>@Bean</code>注解标记的方法的实例纳入到<code>srping</code>容器中，并且实例名就是方法名。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqifa4wulcj31h80qgjy9.jpg" alt="configuration"></p><p>虽说现在已经推荐使用 Spring Boot 里面的 <code>@SpringBootConfiguration</code> 注解，为了探个究竟，我们还是继续研究下 <code>@Configuration</code> 注解。</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>@Configuration 标注在类上，相当于把该类作为 spring 的 xml 配置文件中的 <code>&lt;beans&gt;</code>，作用为：配置 spring 容器(应用上下文)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p>@Bean 标注在方法上(返回某个实例的方法)，等价于 spring 的 xml 配置文件中的<code>&lt;bean&gt;</code>，作用为：注册 bean 对象</p><p>可以看看这篇文章：<a href="">https://www.ibm.com/developerworks/cn/webservices/ws-springjava/index.html</a></p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>可以通过该注解指定扫描某些包下包含如下注解的均自动注册为 spring beans：</p><p>@Component、@Service、 @Repository、 @Controller、@Entity 等等</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.zhisheng.controller"</span>,<span class="string">"com.zhisheng.model"</span>&#125;)</span><br></pre></td></tr></table></figure><p>以前是在 xml 配置文件中设置如下标签：<code>&lt;context:component-scan&gt;</code>（用来扫描包配置）</p><p>除了可以使用 <code>@ComponentScan</code>  注解来加载我们的 bean，还可以在 Application 类中使用 <code>@Import</code> 指定该类。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;ConsulConfig.class, Log4jEndPointConfiguration.class&#125;)<span class="comment">//直接 imoport 要引入的类</span></span><br></pre></td></tr></table></figure><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p><code>@EnableAutoConfiguration</code>的作用启动自动的配置，<code>@EnableAutoConfiguration</code>注解的意思就是<code>Springboot</code>根据你添加的 jar 包来配置你项目的默认配置，比如根据<code>spring-boot-starter-web</code> ，来判断你的项目是否需要添加了<code>webmvc</code>和<code>tomcat</code>，就会自动的帮你配置 web 项目中所需要的默认配置。简单点说就是它会根据定义在 classpath 下的类，自动的给你生成一些 Bean，并加载到 Spring 的 Context 中。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqifa6z9noj31kw1c8k9o.jpg" alt="enable-autoconfiguration"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqifaa174hj317i0tun1o.jpg" alt="2018-04-19_18-44-22"></p><p>可以看到 import  引入了 AutoConfigurationImportSelector 类。该类使用了 Spring Core 包的 SpringFactoriesLoader 类的 loadFactoryNamesof() 方法。</p><p>AutoConfigurationImportSelector 类实现了 DeferredImportSelector 接口，并实现了 <strong>selectImports</strong> 方法，用来导出<em>Configuration</em> 类。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqifad0xvxj31kw0xw1eq.jpg" alt="getconfigurations"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqifabw5ksj31bk0mwdlf.jpg" alt="getconfigurations01"></p><p>导出的类是通过 <em>SpringFactoriesLoader.loadFactoryNames()</em> 读取了 <em>ClassPath</em> 下面的 <em>META-INF/spring.factories</em> 文件。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqifa972ujj31kw0wj4d6.jpg" alt="loadfactoryname"></p><p>这个文件内容大致如下。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqifa3k9x8j31k41f2h3x.jpg" alt="springfactories"></p><p>后面继续会写自动配置方面的博客，请继续关注！</p><p>如果你发现自动装配的 Bean 不是你想要的，你也可以 disable 它。比如说，我不想要自动装配 Database 的那些Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(七)：SpringApplication 深入探索</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要讲了 SpringBootApplication 注解，然后展开写了其包含的三个注解 SpringBootConfiguration、ComponentScan、EnableAutoConfiguration</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>虽然源码很难，但随着不断的探索，源码在你面前将会一览无遗，享受这种探索后的成就感！加油！骚年！</p><p>自己本人能力有限，源码看的不多，上面如有不对的还请留言交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fqifa86vplj31hc0p0n7e.jpg&quot; alt=&quot;nature-3201015_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</title>
    <link href="http://yoursite.com/2018/04/18/spring_boot2_project/"/>
    <id>http://yoursite.com/2018/04/18/spring_boot2_project/</id>
    <published>2018-04-17T16:00:00.000Z</published>
    <updated>2018-05-02T13:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhraflay7j31hc0zk0z1.jpg" alt="fireworks-2585843_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/</a></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhsa07r59j30ps104gpd.jpg" alt="springboot2001"></p><p>结构分析：</p><ul><li>Spring-boot-project   核心代码，代码量很多（197508 行）</li><li>Spring-boot-samples  一些样例 demo，代码量不多（9685 行），蛮有用的</li><li>Spring-boot-samples-invoker  里面无代码</li><li>Spring-boot-tests   测试代码（1640 行）</li></ul><h3 id="spring-boot-project"><a href="#spring-boot-project" class="headerlink" title="spring-boot-project"></a>spring-boot-project</h3><p>Spring-boot-project 下面有很多模块，如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs874239j30p00n2dip.jpg" alt="springboot2002"></p><h4 id="Spirng-boot"><a href="#Spirng-boot" class="headerlink" title="Spirng-boot"></a>Spirng-boot</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs885a4zj30xk1ea78a.jpg" alt="springboot"></p><p>该模块 47760 行代码（含测试代码），Spring boot 主要的库，提供了支持 Spring Boot 其他部分的功能，其中包括了：</p><ul><li>在<code>SpringApplication</code>类，提供静态便捷方法，可以很容易写一个独立的 Spring 应用程序。它唯一的工作就是创造并更新一个合适的 Spring<code>ApplicationContext</code></li><li>带有可选容器的嵌入式 Web 应用程序（Tomcat，Jetty 或 Undertow）</li><li>一流的外部配置支持</li><li>便捷<code>ApplicationContext</code>初始化程序，包括对敏感日志记录默认值的支持</li></ul><h4 id="spring-boot-actuator"><a href="#spring-boot-actuator" class="headerlink" title="spring-boot-actuator"></a>spring-boot-actuator</h4><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs8ibzjzj30xk15mjv8.jpg" alt="springboot-actuator"></p><p>该模块 18398 行代码（含测试代码），spring-boot-actuator 模块它完全是一个用于暴露自身信息的模块，提供了一个监控和管理生产环境的模块，可以使用 http、jmx、ssh、telnet 等管理和监控应用。审计（Auditing）、 健康（health）、数据采集（metrics gathering）会自动加入到应用里面。</p><h4 id="spring-boot-actuator-autoconfigure"><a href="#spring-boot-actuator-autoconfigure" class="headerlink" title="spring-boot-actuator-autoconfigure"></a>spring-boot-actuator-autoconfigure</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8hfazpj30wi1dy0xb.jpg" alt="springboot-actoator-autoconfig"></p><p>该模块 16721 行代码（含测试代码），Spring Boot Actuator 提供了额外的自动配置功能，可以在生产环境中实现可即时部署和支持的功能，从而装饰你的应用。例如，如果您正在编写 JSON Web 服务，那么它将提供服务器，安全性，日志记录，外部配置，管理端点，审计抽象等等功能。如果您想关闭内置功能，或者扩展或替换它们，它也会变得非常简单。</p><h4 id="spring-boot-autoconfigure"><a href="#spring-boot-autoconfigure" class="headerlink" title="spring-boot-autoconfigure"></a>spring-boot-autoconfigure</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs89img2j30xs0og0uz.jpg" alt="springboot-autoconfig"></p><p>该模块 51100 行代码（含测试代码）， Spring Boot 可以根据类路径的内容配置大部分常用应用程序。单个<code>@EnableAutoConfiguration</code>注释会触发 Spring上下文的自动配置。</p><p>自动配置尝试推断用户可能需要哪些 bean。例如，如果 <code>HSQLDB</code>在类路径中，并且用户尚未配置任何数据库连接，则他们可能需要定义内存数据库。当用户开始定义他们自己的 bean 时，自动配置将永远远离。</p><h4 id="spring-boot-cli"><a href="#spring-boot-cli" class="headerlink" title="spring-boot-cli"></a>spring-boot-cli</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqhsa2hmasj30x21aqq6j.jpg" alt="springboot-cli"></p><p>该模块 9346 行代码（含测试代码），Spring 命令行应用程序编译并运行 Groovy 源代码，使得可以编写少量代码就能运行应用程序。Spring CLI 也可以监视文件，当它们改变时自动重新编译并重新启动。</p><h4 id="spring-boot-dependencies"><a href="#spring-boot-dependencies" class="headerlink" title="spring-boot-dependencies"></a>spring-boot-dependencies</h4><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs9xrj6qj31kw16be31.jpg" alt="springboot-dependencies"></p><p>该模块里面没有源码，只有所有依赖和插件的版本号信息。</p><h4 id="spring-boot-devtools"><a href="#spring-boot-devtools" class="headerlink" title="spring-boot-devtools"></a>spring-boot-devtools</h4><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs9z88hrj30v41bw785.jpg" alt="springboot-devtools"></p><p>该模块 9418 行代码（含测试代码），spring-boot-devtools 模块来使 Spring Boot 应用支持热部署，提高开发者的开发效率，无需手动重启 Spring Boot 应用。</p><h4 id="spring-boot-docs"><a href="#spring-boot-docs" class="headerlink" title="spring-boot-docs"></a>spring-boot-docs</h4><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs8affekj30xo1ecdkr.jpg" alt="springboot-docs"></p><p>该模块 671 行代码，springboot 参考文件。</p><h4 id="spring-boot-parent"><a href="#spring-boot-parent" class="headerlink" title="spring-boot-parent"></a>spring-boot-parent</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8dxfnij31kw0zrqkw.jpg" alt="springboot-parent"></p><p>该模块是其他项目的 parent，该模块的父模块是 spring-boot-dependencies。</p><h4 id="spring-boot-properties-migrator"><a href="#spring-boot-properties-migrator" class="headerlink" title="spring-boot-properties-migrator"></a>spring-boot-properties-migrator</h4><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs9wkyvsj30um18678o.jpg" alt="springboot-properties-migrator"></p><p>该模块有 495 行代码，在 Spring Boot 2.0 中，许多配置属性被重新命名/删除，开发人员需要更新<code>application.properties</code>/ <code>application.yml</code>相应的配置。为了帮助你解决这一问题，Spring Boot 发布了一个新<code>spring-boot-properties-migrator</code>模块。一旦作为该模块作为依赖被添加到你的项目中，它不仅会分析应用程序的环境，而且还会在启动时打印诊断信息，而且还会在运行时为您暂时迁移属性。在您的应用程序迁移期间，这个模块是必备的，完成迁移后，请确保从项目的依赖关系中删除此模块。</p><h4 id="spring-boot-starters"><a href="#spring-boot-starters" class="headerlink" title="spring-boot-starters"></a>spring-boot-starters</h4><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs8foqadj31he1hwh5l.jpg" alt="springboot-starter"></p><p>Starter POMs 是由很多方便的依赖集合组成，如果你需要使用某种技术，通过添加少量的jar就可以把相关的依赖加入到项目中去。</p><p>虽然你看得到有这么多 starter，但是却没有一行 Java 代码，意不意外？</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs84zby0j31kw0xdkb0.jpg" alt="springboot-starter-activemq"></p><p>这确实是 Spring Boot 自动配置的关键之处，后面我可以讲讲。</p><h4 id="spring-boot-test"><a href="#spring-boot-test" class="headerlink" title="spring-boot-test"></a>spring-boot-test</h4><p>测试代码！有 10980 行代码。</p><h4 id="spring-boot-test-autoconfigure"><a href="#spring-boot-test-autoconfigure" class="headerlink" title="spring-boot-test-autoconfigure"></a>spring-boot-test-autoconfigure</h4><p>自动配置的测试代码，有 6063 行代码。</p><h4 id="spring-boot-tools"><a href="#spring-boot-tools" class="headerlink" title="spring-boot-tools"></a>spring-boot-tools</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8kcu5ej30ri0lqwh5.jpg" alt="springboot-tools"></p><ul><li><p>spring-boot-antlib</p><p>Spring Boot AntLib 模块为 Apache Ant 提供了基本的 Spring Boot 支持。 您可以使用该模块创建可执行文件夹。 要使用该模块，您需要在 build.xml 中声明一个额外的 spring-boot 命名空间，如以下示例所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:ivy</span>=<span class="string">"antlib:org.apache.ivy.ant"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:spring-boot</span>=<span class="string">"antlib:org.springframework.boot.ant"</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"myapp"</span> <span class="attr">default</span>=<span class="string">"build"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>您需要记住使用 -lib 选项启动 Ant，如以下示例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant -lib &lt;folder containing spring-boot-antlib-2.1.0.BUILD-SNAPSHOT.jar&gt;</span><br></pre></td></tr></table></figure></li><li><p>Spring-boot-autoconfigure-processor</p><p>spring boot 自动配置的核心类</p></li><li><p>Spring-boot-configuration-metadata</p><p>Spring boot 配置元数据</p></li><li><p>Spring-boot-configuration-processor</p><p>spring boot 配置的核心</p></li><li><p>Spring-boot-gradle-plugin</p><p>Spring Boot Gradle 插件在 Gradle 中提供了 Spring Boot 支持，可以打包成可执行 jar 或 war ，运行 Spring Boot 应用程序，并使用 spring-boot-dependencies 提供的依赖关系管理。 它需要 Gradle 4.0 或更高版本。</p></li><li><p>Spring-boot-maven-plugin</p><p>Spring Boot Maven Plugin 在 Maven 中提供了 Spring Boot 支持，让您可以打包成可执行 jar 或 war 应用，并“就地”运行应用程序。 要使用它，你必须使用 Maven 3.2（或更高版本）。</p></li><li><p>Spring-boot-loader</p><p>spring-boot-load 模块通过自定义 jar 包结构，自定义类加载器，优雅的实现了嵌套 jar 资源的加载，通过打包时候重新设置启动类和组织 jar 结构，通过运行时设置自定义加载器来实现嵌套 jar 资源加载。</p></li><li><p>Spring-boot-loader-tools</p><p>spring-boot-load 模块的工具模块</p></li><li><p>Spring-boot-test-support</p><p>测试</p></li></ul><h3 id="spring-boot-samples"><a href="#spring-boot-samples" class="headerlink" title="spring-boot-samples"></a>spring-boot-samples</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqhsa4qklcj31kw11y7ud.jpg" alt="springboot-samples"></p><p>样例 demo 比较多，大家看源码的时候可以拿这些现成 demo 测试。</p><h3 id="spring-boot-tests"><a href="#spring-boot-tests" class="headerlink" title="spring-boot-tests"></a>spring-boot-tests</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs8cezdbj30ui1dqagt.jpg" alt="springboot-tests"></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(七)：SpringApplication 深入探索</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要分析了下 Spring boot 项目源码结构。包含 Spring boot 核心源码、样例 demo、测试。分析了项目的整体结构后，后面才能够有的放矢的去读源码。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>虽然源码很难，但随着不断的探索，源码在你面前将会一览无遗，享受这种探索后的成就感！加油！骚年！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhraflay7j31hc0zk0z1.jpg&quot; alt=&quot;fireworks-2585843_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</title>
    <link href="http://yoursite.com/2018/04/15/springboot2_code/"/>
    <id>http://yoursite.com/2018/04/15/springboot2_code/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-05-02T13:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqdma0kpk1j31hc0zkqox.jpg" alt="night-photograph-2183637_1920"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>前几天面试的时候，被问过 Spring Boot 的自动配置源码怎么实现的，没看过源码的我只能投降👦了。</p><p>这不，赶紧来补补了，所以才有了这篇文章的出现，Spring Boot 2. 0 源码阅读环境的搭建中还遇到点问题，被坑死了，还好解决了，感谢群里的小伙伴！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/</a></p><h3 id="项目下载"><a href="#项目下载" class="headerlink" title="项目下载"></a>项目下载</h3><p>从 <a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/releases</a> 可以看到所有版本的下载地址，我这里选择的是 Spring Boot 2 中最新的  <a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.0.1.RELEASE" target="_blank" rel="noopener">v2.0.1.RELEASE </a> 版本，下载后，然后解压。获取代码之前，请先确保你的 JDK 版本是 1.8 以上哦。</p><h3 id="项目编译"><a href="#项目编译" class="headerlink" title="项目编译"></a>项目编译</h3><p>进入 spring-boot-2.0.1.RELEASE 的目录下，执行下面的命令。</p><h4 id="跳过测试用例编译"><a href="#跳过测试用例编译" class="headerlink" title="跳过测试用例编译"></a>跳过测试用例编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mvn clean install -DskipTests -Pfast //跳过测试用例</span><br></pre></td></tr></table></figure><p>跳过测试用例可以加快编译的速度。</p><p>先看下运行成功的效果：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqdm9wd342j31gc1mc7n7.jpg" alt="springboot201"></p><p>只花了 6 分多钟就好了。</p><h4 id="全量编译"><a href="#全量编译" class="headerlink" title="全量编译"></a>全量编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mvn -f spring-boot-project -Pfull clean install</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqdm9xd4pdj31kw18l7s3.jpg" alt="springboot2-error3"></p><p>全量编译竟然报错，一波未平，一波又起！</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqdm9y57j4j31kw0e7wls.jpg" alt="2018-04-15_15-37-25"></p><p>看网上的解决方法是：在项目的 pom.xml 文件中的 <code>&lt;properties&gt;</code> 添加 <code>&lt;javadocExecutable&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javadocExecutable</span>&gt;</span>$&#123;java.home&#125;/../bin/javadoc<span class="tag">&lt;/<span class="name">javadocExecutable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此方法虽然管用，但是只是临时的，需要对每个项目都进行添加。</p><p>问题产生的原因应该是，mvn 拿到的 JAVA_HOME 位置应该是 ${JAVA_HOME}/jre 而不是 jdk 位置。</p><p>后面又看官方的 README 上面写的执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mvn clean install</span><br></pre></td></tr></table></figure><p>执行后也是有各种报错，尝试了很久解决，最后花了好几个小时才到下面这图：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqdma1lfkdj31kw0yqh5s.jpg" alt="springboot2-error4"></p><p>太折腾人了，太麻烦了！</p><p>暂时就不全量编译了，我们就直接把现在 <code>跳过测试用例编译</code>  后的项目导入到 IDEA 中去。</p><h3 id="导入项目工程"><a href="#导入项目工程" class="headerlink" title="导入项目工程"></a>导入项目工程</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqdma2dis9j31ia10447y.jpg" alt="import"></p><p>导入后将那些测试的 module 标记为 maven 项目，然后后面自己再根据测试用例去跟源码吧。</p><p>导入后项目没出现报错，美滋滋，后面源码可以看起来。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fqdm9ipwfhj31kw0zkkj1.jpg" alt="success02"></p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><p>在这之前，我自己创建项目 Spring Boot 2 项目都是失败的，maven 运行项目（mvn clean install）报错如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fqdm9wsmiqj31gc1mc7n7.jpg" alt="springboot2-error2"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fqdm9zrq04j31kw0wru0p.jpg" alt="springboot2-error"></p><p>通过上图可以发现报错的罪魁祸首是由于找不到 org.yaml.snakeyaml  1.19 的包，这个依赖死活下不下来，苦逼了😢。</p><p>一开始以为是公司配的 maven setting.xml 文件有问题（公司私服有问题），导致我这个  org.yaml.snakeyaml  1.19 的包一直下载不来。后来我叫群里的好友帮忙测试下能不能创建 Spring Boot 2 项目，结果他们都行的。我就换成了他们阿里云镜像的 setting 文件，结果在我这还是不行的。真是醉了，我干脆直接叫他把 maven 本地仓库中的 org.yaml.snakeyaml  1.19 整个包都发给我，结果再次创建 Spring Boot 2 项目就能成功了。美滋滋😄！</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqdm9yr6s8j31kw0o3tkj.jpg" alt="springboot2-success"></p><p>然后就蹭着现在环境 OK，开始搭建我的 Spring Boot 2 源码阅读环境！</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(七)：SpringApplication 深入探索</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>源码不骗人，多看看！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fqdma0kpk1j31hc0zkqox.jpg&quot; alt=&quot;night-photograph-2183637_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</title>
    <link href="http://yoursite.com/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/"/>
    <id>http://yoursite.com/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/</id>
    <published>2018-04-12T16:00:00.000Z</published>
    <updated>2018-04-19T16:10:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqc4n57tj4j31hc0zktmm.jpg" alt="pocket-watch-3156771_1920"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>好久没更新文章了，本来打算在毕业之前不更新了，这里，对不住了，我又更新了。😝😝</p><p>之前翻译了两篇 Spring Boot 2.0 的文章，<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a>   和  <a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>今天就继续详细探究 Spring Boot 2.0 里面的改变。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/</a></p><h3 id="配置改变"><a href="#配置改变" class="headerlink" title="配置改变"></a>配置改变</h3><p>配置属性在 1.5.10.RELEASE 和 2.0.0.RELEASE 两个版本之间的改变：</p><h4 id="启用键"><a href="#启用键" class="headerlink" title="启用键"></a>启用键</h4><p>下面的表是 2.0.0.RELEASE 版本中的弃用键：</p><table><thead><tr><th>Key</th><th>Replacement（替代）</th><th>原因</th></tr></thead><tbody><tr><td><code>spring.datasource.hikari.initialization-fail-fast</code></td><td></td><td></td></tr><tr><td><code>spring.main.web-environment</code></td><td><code>spring.main.web-application-type</code></td></tr></tbody></table><h4 id="新键"><a href="#新键" class="headerlink" title="新键"></a>新键</h4><p>下面的表是 2.0.0.RELEASE 版本中新的键：</p><table><thead><tr><th>Key</th><th>Default value（默认值）</th><th>描述</th></tr></thead><tbody><tr><td><code>logging.file.max-history</code></td><td><code>0</code></td><td>要保存的归档日志文件的最大值</td></tr><tr><td><code>logging.file.max-size</code></td><td><code>10MB</code></td><td>日志文件最大容量</td></tr><tr><td><code>logging.pattern.dateformat</code></td><td><code>yyyy-MM-dd HH:mm:ss.SSS</code></td><td>日志的日期格式</td></tr><tr><td><code>management.endpoint.auditevents.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.auditevents.enabled</code></td><td><code>true</code></td><td>是否启用 auditevents 端点</td></tr><tr><td><code>management.endpoint.beans.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.beans.enabled</code></td><td><code>true</code></td><td>是否启用 bean 端点</td></tr><tr><td><code>management.endpoint.conditions.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.conditions.enabled</code></td><td><code>true</code></td><td>是否启用 conditions 端点</td></tr><tr><td><code>management.endpoint.configprops.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.configprops.enabled</code></td><td><code>true</code></td><td>是否启用 configprops 端点</td></tr><tr><td><code>management.endpoint.configprops.keys-to-sanitize</code></td><td><code>password,secret,key,token,    .credentials.,vcap_services</code></td><td>Keys that should be sanitized</td></tr><tr><td><code>management.endpoint.env.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.env.enabled</code></td><td><code>true</code></td><td>是否启用 env 端点</td></tr><tr><td><code>management.endpoint.env.keys-to-sanitize</code></td><td><code>password,secret,key,token,   .credentials.,vcap_services</code></td><td>Keys that should be sanitized.</td></tr><tr><td><code>management.endpoint.flyway.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.flyway.enabled</code></td><td><code>true</code></td><td>是否启用 flyway 端点</td></tr><tr><td><code>management.endpoint.health.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.health.enabled</code></td><td><code>true</code></td><td>是否启用 health 端点</td></tr><tr><td><code>management.endpoint.health.roles</code></td><td></td><td>角色用于确定用户是否有权显示详细信息</td></tr><tr><td><code>management.endpoint.health.show-details</code></td><td><code>never</code></td><td>何时显示完整的健康详情</td></tr><tr><td><code>management.endpoint.heapdump.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.heapdump.enabled</code></td><td><code>true</code></td><td>是否启用 heapdump 端点</td></tr><tr><td><code>management.endpoint.httptrace.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.httptrace.enabled</code></td><td><code>true</code></td><td>是否启用 httptrace 端点</td></tr><tr><td><code>management.endpoint.info.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.info.enabled</code></td><td><code>true</code></td><td>是否启用 info 端点</td></tr><tr><td><code>management.endpoint.jolokia.config</code></td><td></td><td>Jolokia 设置</td></tr><tr><td><code>management.endpoint.jolokia.enabled</code></td><td><code>true</code></td><td>是否启用 jolokia 端点</td></tr><tr><td><code>management.endpoint.liquibase.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.liquibase.enabled</code></td><td><code>true</code></td><td>是否启用 liquibase 端点</td></tr><tr><td><code>management.endpoint.logfile.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.logfile.enabled</code></td><td><code>true</code></td><td>是否启用 logfile 端点</td></tr><tr><td><code>management.endpoint.logfile.external-file</code></td><td></td><td>要访问的外部日志文件</td></tr><tr><td><code>management.endpoint.loggers.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.loggers.enabled</code></td><td><code>true</code></td><td>是否启用 loggers 端点</td></tr><tr><td><code>management.endpoint.mappings.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.mappings.enabled</code></td><td><code>true</code></td><td>是否启用 mappings 端点</td></tr><tr><td><code>management.endpoint.metrics.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.metrics.enabled</code></td><td><code>true</code></td><td>是否启用 metrics 端点</td></tr><tr><td><code>management.endpoint.prometheus.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.prometheus.enabled</code></td><td><code>true</code></td><td>是否启用 prometheus 端点</td></tr><tr><td><code>management.endpoint.scheduledtasks.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.scheduledtasks.enabled</code></td><td><code>true</code></td><td>是否启用 scheduledtasks 端点</td></tr><tr><td><code>management.endpoint.sessions.enabled</code></td><td><code>true</code></td><td>是否启用 sessions 端点</td></tr><tr><td><code>management.endpoint.shutdown.enabled</code></td><td><code>false</code></td><td>是否启用 shutdown 端点</td></tr><tr><td><code>management.endpoint.threaddump.cache.time-to-live</code></td><td><code>0ms</code></td><td>可以缓存响应的最长时间</td></tr><tr><td><code>management.endpoint.threaddump.enabled</code></td><td><code>true</code></td><td>是否启用 threaddump 端点</td></tr><tr><td><code>management.endpoints.enabled-by-default</code></td><td></td><td>是否启用或者关闭所有的端点</td></tr><tr><td><code>management.endpoints.jmx.domain</code></td><td><code>org.springframework.boot</code></td><td>端点 JMX 域名</td></tr><tr><td><code>management.endpoints.jmx.exposure.exclude</code></td><td></td><td>应排除的端点 ID</td></tr><tr><td><code>management.endpoints.jmx.exposure.include</code></td><td><code>*</code></td><td>应包含的端点 ID 或全部 <code>*</code></td></tr><tr><td><code>management.endpoints.jmx.static-names</code></td><td></td><td>追加到所有表示端点的 MBean 的ObjectName 的静态属性.</td></tr><tr><td><code>management.endpoints.jmx.unique-names</code></td><td><code>false</code></td><td>是否确保 ObjectNames 在发生冲突时被修改</td></tr><tr><td><code>management.endpoints.web.base-path</code></td><td><code>/actuator</code></td><td>Web 端点的基本路径</td></tr><tr><td><code>management.endpoints.web.cors.allow-credentials</code></td><td></td><td>是否支持凭证</td></tr><tr><td><code>management.endpoints.web.cors.allowed-headers</code></td><td></td><td>Comma-separated list of headers to allow in a request. ‘*’ allows all headers.</td></tr><tr><td><code>management.endpoints.web.cors.allowed-methods</code></td><td></td><td>Comma-separated list of methods to allow. ‘*’ allows all methods.</td></tr><tr><td><code>management.endpoints.web.cors.allowed-origins</code></td><td></td><td>Comma-separated list of origins to allow. ‘*’ allows all origins.</td></tr><tr><td><code>management.endpoints.web.cors.exposed-headers</code></td><td></td><td>Comma-separated list of headers to include in a response.</td></tr><tr><td><code>management.endpoints.web.cors.max-age</code></td><td><code>1800s</code></td><td>How long the response from a pre-flight request can be cached by clients.</td></tr><tr><td><code>management.endpoints.web.exposure.exclude</code></td><td></td><td>Endpoint IDs that should be excluded.</td></tr><tr><td><code>management.endpoints.web.exposure.include</code></td><td><code>health,info</code></td><td>Endpoint IDs that should be included or ‘*’ for all.</td></tr><tr><td><code>management.endpoints.web.path-mapping</code></td><td></td><td>Mapping between endpoint IDs and the path that should expose them.</td></tr><tr><td><code>management.health.influxdb.enabled</code></td><td><code>true</code></td><td>Whether to enable InfluxDB health check.</td></tr><tr><td><code>management.health.neo4j.enabled</code></td><td><code>true</code></td><td>Whether to enable Neo4j health check.</td></tr><tr><td><code>management.health.status.http-mapping</code></td><td></td><td>Mapping of health statuses to HTTP status codes.</td></tr><tr><td><code>management.metrics.binders.files.enabled</code></td><td><code>true</code></td><td>Whether to enable files metrics.</td></tr><tr><td><code>management.metrics.binders.integration.enabled</code></td><td><code>true</code></td><td>Whether to enable Spring Integration metrics.</td></tr><tr><td><code>management.metrics.binders.jvm.enabled</code></td><td><code>true</code></td><td>Whether to enable JVM metrics.</td></tr><tr><td><code>management.metrics.binders.logback.enabled</code></td><td><code>true</code></td><td>Whether to enable Logback metrics.</td></tr><tr><td><code>management.metrics.binders.processor.enabled</code></td><td><code>true</code></td><td>Whether to enable processor metrics.</td></tr><tr><td><code>management.metrics.binders.uptime.enabled</code></td><td><code>true</code></td><td>Whether to enable uptime metrics.</td></tr><tr><td><code>management.metrics.distribution.percentiles</code></td><td></td><td>Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name.</td></tr><tr><td><code>management.metrics.distribution.percentiles-histogram</code></td><td></td><td>Whether meter IDs starting-with the specified name should be publish percentile histograms.</td></tr><tr><td><code>management.metrics.distribution.sla</code></td><td></td><td>Specific SLA boundaries for meter IDs starting-with the specified name.</td></tr><tr><td><code>management.metrics.enable</code></td><td></td><td>Whether meter IDs starting-with the specified name should be enabled.</td></tr><tr><td><code>management.metrics.export.atlas.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.atlas.config-refresh-frequency</code></td><td><code>10s</code></td><td>Frequency for refreshing config settings from the LWC service.</td></tr><tr><td><code>management.metrics.export.atlas.config-time-to-live</code></td><td><code>150s</code></td><td>Time to live for subscriptions from the LWC service.</td></tr><tr><td><code>management.metrics.export.atlas.config-uri</code></td><td><code>http://localhost:7101/     lwc/api/v1/expressions/local-dev</code></td><td>URI for the Atlas LWC endpoint to retrieve current subscriptions.</td></tr><tr><td><code>management.metrics.export.atlas.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.atlas.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.atlas.eval-uri</code></td><td><code>http://localhost:7101/ lwc/api/v1/evaluate</code></td><td>URI for the Atlas LWC endpoint to evaluate the data for a subscription.</td></tr><tr><td><code>management.metrics.export.atlas.lwc-enabled</code></td><td><code>false</code></td><td>Whether to enable streaming to Atlas LWC.</td></tr><tr><td><code>management.metrics.export.atlas.meter-time-to-live</code></td><td><code>15m</code></td><td>Time to live for meters that do not have any activity.</td></tr><tr><td><code>management.metrics.export.atlas.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.atlas.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.atlas.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.atlas.uri</code></td><td><code>http://localhost:7101/ api/v1/publish</code></td><td>URI of the Atlas server.</td></tr><tr><td><code>management.metrics.export.datadog.api-key</code></td><td></td><td>Datadog API key.</td></tr><tr><td><code>management.metrics.export.datadog.application-key</code></td><td></td><td>Datadog application key.</td></tr><tr><td><code>management.metrics.export.datadog.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.datadog.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.datadog.descriptions</code></td><td><code>true</code></td><td>Whether to publish descriptions metadata to Datadog.</td></tr><tr><td><code>management.metrics.export.datadog.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.datadog.host-tag</code></td><td><code>instance</code></td><td>Tag that will be mapped to “host” when shipping metrics to Datadog.</td></tr><tr><td><code>management.metrics.export.datadog.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.datadog.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.datadog.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.datadog.uri</code></td><td><code>https://app.datadoghq.com</code></td><td>URI to ship metrics to.</td></tr><tr><td><code>management.metrics.export.ganglia.addressing-mode</code></td><td><code>multicast</code></td><td>UDP addressing mode, either unicast or multicast.</td></tr><tr><td><code>management.metrics.export.ganglia.duration-units</code></td><td><code>milliseconds</code></td><td>Base time unit used to report durations.</td></tr><tr><td><code>management.metrics.export.ganglia.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to Ganglia is enabled.</td></tr><tr><td><code>management.metrics.export.ganglia.host</code></td><td><code>localhost</code></td><td>Host of the Ganglia server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.ganglia.port</code></td><td><code>8649</code></td><td>Port of the Ganglia server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.ganglia.protocol-version</code></td><td><code>3.1</code></td><td>Ganglia protocol version.</td></tr><tr><td><code>management.metrics.export.ganglia.rate-units</code></td><td><code>seconds</code></td><td>Base time unit used to report rates.</td></tr><tr><td><code>management.metrics.export.ganglia.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.ganglia.time-to-live</code></td><td><code>1</code></td><td>Time to live for metrics on Ganglia.</td></tr><tr><td><code>management.metrics.export.graphite.duration-units</code></td><td><code>milliseconds</code></td><td>Base time unit used to report durations.</td></tr><tr><td><code>management.metrics.export.graphite.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to Graphite is enabled.</td></tr><tr><td><code>management.metrics.export.graphite.host</code></td><td><code>localhost</code></td><td>Host of the Graphite server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.graphite.port</code></td><td><code>2004</code></td><td>Port of the Graphite server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.graphite.protocol</code></td><td><code>pickled</code></td><td>Protocol to use while shipping data to Graphite.</td></tr><tr><td><code>management.metrics.export.graphite.rate-units</code></td><td><code>seconds</code></td><td>Base time unit used to report rates.</td></tr><tr><td><code>management.metrics.export.graphite.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.graphite.tags-as-prefix</code></td><td>``</td><td>For the default naming convention, turn the specified tag keys into part of the metric prefix.</td></tr><tr><td><code>management.metrics.export.influx.auto-create-db</code></td><td><code>true</code></td><td>Whether to create the Influx database if it does not exist before attempting to publish metrics to it.</td></tr><tr><td><code>management.metrics.export.influx.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.influx.compressed</code></td><td><code>true</code></td><td>Whether to enable GZIP compression of metrics batches published to Influx.</td></tr><tr><td><code>management.metrics.export.influx.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.influx.consistency</code></td><td><code>one</code></td><td>Write consistency for each point.</td></tr><tr><td><code>management.metrics.export.influx.db</code></td><td><code>mydb</code></td><td>Tag that will be mapped to “host” when shipping metrics to Influx.</td></tr><tr><td><code>management.metrics.export.influx.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.influx.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.influx.password</code></td><td></td><td>Login password of the Influx server.</td></tr><tr><td><code>management.metrics.export.influx.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.influx.retention-policy</code></td><td></td><td>Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).</td></tr><tr><td><code>management.metrics.export.influx.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.influx.uri</code></td><td><code>http://localhost:8086</code></td><td>URI of the Influx server.</td></tr><tr><td><code>management.metrics.export.influx.user-name</code></td><td></td><td>Login user of the Influx server.</td></tr><tr><td><code>management.metrics.export.jmx.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to JMX is enabled.</td></tr><tr><td><code>management.metrics.export.jmx.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.newrelic.account-id</code></td><td></td><td>New Relic account ID.</td></tr><tr><td><code>management.metrics.export.newrelic.api-key</code></td><td></td><td>New Relic API key.</td></tr><tr><td><code>management.metrics.export.newrelic.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.newrelic.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.newrelic.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.newrelic.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.newrelic.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.newrelic.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.newrelic.uri</code></td><td><code>https://insights-collector    .newrelic.com</code></td><td>URI to ship metrics to.</td></tr><tr><td><code>management.metrics.export.prometheus.descriptions</code></td><td><code>true</code></td><td>Whether to enable publishing descriptions as part of the scrape payload to Prometheus.</td></tr><tr><td><code>management.metrics.export.prometheus.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to Prometheus is enabled.</td></tr><tr><td><code>management.metrics.export.prometheus.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.signalfx.access-token</code></td><td></td><td>SignalFX access token.</td></tr><tr><td><code>management.metrics.export.signalfx.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.signalfx.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.signalfx.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.signalfx.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.signalfx.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.signalfx.source</code></td><td></td><td>Uniquely identifies the app instance that is publishing metrics to SignalFx.</td></tr><tr><td><code>management.metrics.export.signalfx.step</code></td><td><code>10s</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.signalfx.uri</code></td><td><code>https://ingest.signalfx.com</code></td><td>URI to ship metrics to.</td></tr><tr><td><code>management.metrics.export.simple.enabled</code></td><td><code>true</code></td><td>Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.</td></tr><tr><td><code>management.metrics.export.simple.mode</code></td><td><code>cumulative</code></td><td>Counting mode.</td></tr><tr><td><code>management.metrics.export.simple.step</code></td><td><code>1m</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.statsd.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to StatsD is enabled.</td></tr><tr><td><code>management.metrics.export.statsd.flavor</code></td><td><code>datadog</code></td><td>StatsD line protocol to use.</td></tr><tr><td><code>management.metrics.export.statsd.host</code></td><td><code>localhost</code></td><td>Host of the StatsD server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.statsd.max-packet-length</code></td><td><code>1400</code></td><td>Total length of a single payload should be kept within your network’s MTU.</td></tr><tr><td><code>management.metrics.export.statsd.polling-frequency</code></td><td><code>10s</code></td><td>How often gauges will be polled.</td></tr><tr><td><code>management.metrics.export.statsd.port</code></td><td><code>8125</code></td><td>Port of the StatsD server to receive exported metrics.</td></tr><tr><td><code>management.metrics.export.statsd.publish-unchanged-meters</code></td><td><code>true</code></td><td>Whether to send unchanged meters to the StatsD server.</td></tr><tr><td><code>management.metrics.export.statsd.queue-size</code></td><td><code>2147483647</code></td><td>Maximum size of the queue of items waiting to be sent to the StatsD server.</td></tr><tr><td><code>management.metrics.export.wavefront.api-token</code></td><td></td><td>API token used when publishing metrics directly to the Wavefront API host.</td></tr><tr><td><code>management.metrics.export.wavefront.batch-size</code></td><td><code>10000</code></td><td>Number of measurements per request to use for this backend.</td></tr><tr><td><code>management.metrics.export.wavefront.connect-timeout</code></td><td><code>1s</code></td><td>Connection timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.wavefront.enabled</code></td><td><code>true</code></td><td>Whether exporting of metrics to this backend is enabled.</td></tr><tr><td><code>management.metrics.export.wavefront.global-prefix</code></td><td></td><td>Global prefix to separate metrics originating from this app’s white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.</td></tr><tr><td><code>management.metrics.export.wavefront.num-threads</code></td><td><code>2</code></td><td>Number of threads to use with the metrics publishing scheduler.</td></tr><tr><td><code>management.metrics.export.wavefront.read-timeout</code></td><td><code>10s</code></td><td>Read timeout for requests to this backend.</td></tr><tr><td><code>management.metrics.export.wavefront.source</code></td><td></td><td>Unique identifier for the app instance that is the source of metrics being published to Wavefront.</td></tr><tr><td><code>management.metrics.export.wavefront.step</code></td><td><code>10s</code></td><td>Step size (i.e. reporting frequency) to use.</td></tr><tr><td><code>management.metrics.export.wavefront.uri</code></td><td><code>https://longboard.wavefront.com</code></td><td>URI to ship metrics to.</td></tr><tr><td><code>management.metrics.use-global-registry</code></td><td><code>true</code></td><td>Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics.</td></tr><tr><td><code>management.metrics.web.client.max-uri-tags</code></td><td><code>100</code></td><td>Maximum number of unique URI tag values allowed.</td></tr><tr><td><code>management.metrics.web.client.requests-metric-name</code></td><td><code>http.client.requests</code></td><td>Name of the metric for sent requests.</td></tr><tr><td><code>management.metrics.web.server.auto-time-requests</code></td><td><code>true</code></td><td>Whether requests handled by Spring MVC or WebFlux should be automatically timed.</td></tr><tr><td><code>management.metrics.web.server.requests-metric-name</code></td><td><code>http.server.requests</code></td><td>Name of the metric for received requests.</td></tr><tr><td><code>management.server.add-application-context-header</code></td><td><code>false</code></td><td>Add the “X-Application-Context” HTTP header in each response.</td></tr><tr><td><code>management.server.address</code></td><td></td><td>Network address to which the management endpoints should bind.</td></tr><tr><td><code>management.server.port</code></td><td></td><td>Management endpoint HTTP port (uses the same port as the application by default).</td></tr><tr><td><code>management.server.servlet.context-path</code></td><td><code>Management endpoint context-path (for instance,</code>/management).</td><td></td></tr><tr><td><code>management.server.ssl.ciphers</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.client-auth</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.enabled</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.enabled-protocols</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-alias</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-password</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-store</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-store-password</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-store-provider</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.key-store-type</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.protocol</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.trust-store</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.trust-store-password</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.trust-store-provider</code></td><td></td><td></td></tr><tr><td><code>management.server.ssl.trust-store-type</code></td><td></td><td></td></tr><tr><td><code>management.trace.http.enabled</code></td><td><code>true</code></td><td>Whether to enable HTTP request-response tracing.</td></tr><tr><td><code>management.trace.http.include</code></td><td><code>request-headers,response-headers, cookies,errors</code></td><td>Items to be included in the trace.</td></tr><tr><td><code>server.error.include-exception</code></td><td><code>false</code></td><td>Include the “exception” attribute.</td></tr><tr><td><code>server.http2.enabled</code></td><td></td><td></td></tr><tr><td><code>server.jetty.accesslog.append</code></td><td><code>false</code></td><td>Append to log.</td></tr><tr><td><code>server.jetty.accesslog.date-format</code></td><td><code>dd/MMM/yyyy:HH:mm:ss Z</code></td><td>Timestamp format of the request log.</td></tr><tr><td><code>server.jetty.accesslog.enabled</code></td><td><code>false</code></td><td>Enable access log.</td></tr><tr><td><code>server.jetty.accesslog.extended-format</code></td><td><code>false</code></td><td>Enable extended NCSA format.</td></tr><tr><td><code>server.jetty.accesslog.file-date-format</code></td><td></td><td>Date format to place in log file name.</td></tr><tr><td><code>server.jetty.accesslog.filename</code></td><td></td><td>Log filename.</td></tr><tr><td><code>server.jetty.accesslog.locale</code></td><td></td><td>Locale of the request log.</td></tr><tr><td><code>server.jetty.accesslog.log-cookies</code></td><td><code>false</code></td><td>Enable logging of the request cookies.</td></tr><tr><td><code>server.jetty.accesslog.log-latency</code></td><td><code>false</code></td><td>Enable logging of request processing time.</td></tr><tr><td><code>server.jetty.accesslog.log-server</code></td><td><code>false</code></td><td>Enable logging of the request hostname.</td></tr><tr><td><code>server.jetty.accesslog.retention-period</code></td><td><code>31</code></td><td>Number of days before rotated log files are deleted.</td></tr><tr><td><code>server.jetty.accesslog.time-zone</code></td><td><code>GMT</code></td><td>Timezone of the request log.</td></tr><tr><td><code>server.servlet.application-display-name</code></td><td><code>application</code></td><td>Display name of the application.</td></tr><tr><td><code>server.servlet.context-parameters</code></td><td></td><td>Servlet context init parameters.</td></tr><tr><td><code>server.servlet.context-path</code></td><td></td><td>Context path of the application.</td></tr><tr><td><code>server.servlet.jsp.class-name</code></td><td></td><td></td></tr><tr><td><code>server.servlet.jsp.init-parameters</code></td><td></td><td></td></tr><tr><td><code>server.servlet.jsp.registered</code></td><td></td><td></td></tr><tr><td><code>server.servlet.path</code></td><td><code>/</code></td><td>Path of the main dispatcher servlet.</td></tr><tr><td><code>server.servlet.session.cookie.comment</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.domain</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.http-only</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.max-age</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.name</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.path</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.cookie.secure</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.persistent</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.store-dir</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.timeout</code></td><td></td><td></td></tr><tr><td><code>server.servlet.session.tracking-modes</code></td><td></td><td></td></tr><tr><td><code>server.tomcat.max-http-header-size</code></td><td><code>0</code></td><td>Maximum size, in bytes, of the HTTP message header.</td></tr><tr><td><code>server.tomcat.resource.cache-ttl</code></td><td></td><td>Time-to-live of the static resource cache.</td></tr><tr><td><code>server.tomcat.use-relative-redirects</code></td><td></td><td>Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.</td></tr><tr><td><code>server.undertow.eager-filter-init</code></td><td><code>true</code></td><td>Whether servlet filters should be initialized on startup.</td></tr><tr><td><code>spring.banner.charset</code></td><td><code>UTF-8</code></td><td>Banner file encoding.</td></tr><tr><td><code>spring.banner.image.height</code></td><td></td><td>Height of the banner image in chars (default based on image height).</td></tr><tr><td><code>spring.banner.image.invert</code></td><td><code>false</code></td><td>Whether images should be inverted for dark terminal themes.</td></tr><tr><td><code>spring.banner.image.location</code></td><td><code>classpath:banner.gif</code></td><td>Banner image file location (jpg or png can also be used).</td></tr><tr><td><code>spring.banner.image.margin</code></td><td><code>2</code></td><td>Left hand image margin in chars.</td></tr><tr><td><code>spring.banner.image.width</code></td><td><code>76</code></td><td>Width of the banner image in chars.</td></tr><tr><td><code>spring.banner.location</code></td><td><code>classpath:banner.txt</code></td><td>Banner text resource location.</td></tr><tr><td><code>spring.batch.initialize-schema</code></td><td><code>embedded</code></td><td>Database schema initialization mode.</td></tr><tr><td><code>spring.cache.redis.cache-null-values</code></td><td><code>true</code></td><td>Allow caching null values.</td></tr><tr><td><code>spring.cache.redis.key-prefix</code></td><td></td><td>Key prefix.</td></tr><tr><td><code>spring.cache.redis.time-to-live</code></td><td></td><td>Entry expiration.</td></tr><tr><td><code>spring.cache.redis.use-key-prefix</code></td><td><code>true</code></td><td>Whether to use the key prefix when writing to Redis.</td></tr><tr><td><code>spring.config.additional-location</code></td><td></td><td>Config file locations used in addition to the defaults.</td></tr><tr><td><code>spring.data.cassandra.connect-timeout</code></td><td></td><td>Socket option: connection time out.</td></tr><tr><td><code>spring.data.cassandra.pool.heartbeat-interval</code></td><td><code>30s</code></td><td>Heartbeat interval after which a message is sent on an idle connection to make sure it’s still alive.</td></tr><tr><td><code>spring.data.cassandra.pool.idle-timeout</code></td><td><code>120s</code></td><td>Idle timeout before an idle connection is removed.</td></tr><tr><td><code>spring.data.cassandra.pool.max-queue-size</code></td><td><code>256</code></td><td>Maximum number of requests that get queued if no connection is available.</td></tr><tr><td><code>spring.data.cassandra.pool.pool-timeout</code></td><td><code>5000ms</code></td><td>Pool timeout when trying to acquire a connection from a host’s pool.</td></tr><tr><td><code>spring.data.cassandra.read-timeout</code></td><td></td><td>Socket option: read time out.</td></tr><tr><td><code>spring.data.cassandra.repositories.type</code></td><td><code>auto</code></td><td>Type of Cassandra repositories to enable.</td></tr><tr><td><code>spring.data.couchbase.repositories.type</code></td><td><code>auto</code></td><td>Type of Couchbase repositories to enable.</td></tr><tr><td><code>spring.data.mongodb.repositories.type</code></td><td><code>auto</code></td><td>Type of Mongo repositories to enable.</td></tr><tr><td><code>spring.data.neo4j.auto-index</code></td><td><code>none</code></td><td>Auto index mode.</td></tr><tr><td><code>spring.data.web.pageable.default-page-size</code></td><td><code>20</code></td><td>Default page size.</td></tr><tr><td><code>spring.data.web.pageable.max-page-size</code></td><td><code>2000</code></td><td>Maximum page size to be accepted.</td></tr><tr><td><code>spring.data.web.pageable.one-indexed-parameters</code></td><td><code>false</code></td><td>Whether to expose and assume 1-based page number indexes.</td></tr><tr><td><code>spring.data.web.pageable.page-parameter</code></td><td><code>page</code></td><td>Page index parameter name.</td></tr><tr><td><code>spring.data.web.pageable.prefix</code></td><td>``</td><td>General prefix to be prepended to the page number and page size parameters.</td></tr><tr><td><code>spring.data.web.pageable.qualifier-delimiter</code></td><td><code>_</code></td><td>Delimiter to be used between the qualifier and the actual page number and size properties.</td></tr><tr><td><code>spring.data.web.pageable.size-parameter</code></td><td><code>size</code></td><td>Page size parameter name.</td></tr><tr><td><code>spring.data.web.sort.sort-parameter</code></td><td><code>sort</code></td><td>Sort parameter name.</td></tr><tr><td><code>spring.datasource.hikari.initialization-fail-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.hikari.metrics-tracker-factory</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.hikari.scheduled-executor</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.hikari.scheduled-executor-service</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.hikari.schema</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.initialization-mode</code></td><td><code>embedded</code></td><td>Initialize the datasource with available DDL and DML scripts.</td></tr><tr><td><code>spring.devtools.restart.log-condition-evaluation-delta</code></td><td><code>true</code></td><td>Whether to log the condition evaluation delta upon restart.</td></tr><tr><td><code>spring.flyway.baseline-description</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.baseline-on-migrate</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.baseline-version</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.check-location</code></td><td><code>true</code></td><td>Whether to check that migration scripts location exists.</td></tr><tr><td><code>spring.flyway.clean-disabled</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.clean-on-validation-error</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.dry-run-output</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.enabled</code></td><td><code>true</code></td><td>是否启用 flyway.</td></tr><tr><td><code>spring.flyway.encoding</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.error-handlers</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.group</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.ignore-future-migrations</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.ignore-missing-migrations</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.init-sqls</code></td><td></td><td>SQL statements to execute to initialize a connection immediately after obtaining it.</td></tr><tr><td><code>spring.flyway.installed-by</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.locations</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.mixed</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.out-of-order</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.password</code></td><td></td><td>如果您想让 Flyway 创建自己的DataSource，可以使用 JDBC 密码</td></tr><tr><td><code>spring.flyway.placeholder-prefix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.placeholder-replacement</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.placeholder-suffix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.placeholders</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.repeatable-sql-migration-prefix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.schemas</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.skip-default-callbacks</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.skip-default-resolvers</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.sql-migration-prefix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.sql-migration-separator</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.sql-migration-suffix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.sql-migration-suffixes</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.table</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.target</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.undo-sql-migration-prefix</code></td><td></td><td></td></tr><tr><td><code>spring.flyway.url</code></td><td></td><td>要迁移的数据库的 JDBC URL</td></tr><tr><td><code>spring.flyway.user</code></td><td></td><td>登录要迁移数据库的用户名</td></tr><tr><td><code>spring.flyway.validate-on-migrate</code></td><td></td><td></td></tr><tr><td><code>spring.gson.date-format</code></td><td></td><td>序列化 Date 对象时使用的格式</td></tr><tr><td><code>spring.gson.disable-html-escaping</code></td><td></td><td>Whether to disable the escaping of HTML characters such as ‘&lt;’, ‘&gt;’, etc.</td></tr><tr><td><code>spring.gson.disable-inner-class-serialization</code></td><td></td><td>Whether to exclude inner classes during serialization.</td></tr><tr><td><code>spring.gson.enable-complex-map-key-serialization</code></td><td></td><td>Whether to enable serialization of complex map keys (i.e. non-primitives).</td></tr><tr><td><code>spring.gson.exclude-fields-without-expose-annotation</code></td><td></td><td>Whether to exclude all fields from consideration for serialization or deserialization that do not have the “Expose” annotation.</td></tr><tr><td><code>spring.gson.field-naming-policy</code></td><td></td><td>Naming policy that should be applied to an object’s field during serialization and deserialization.</td></tr><tr><td><code>spring.gson.generate-non-executable-json</code></td><td></td><td>Whether to generate non executable JSON by prefixing the output with some special text.</td></tr><tr><td><code>spring.gson.lenient</code></td><td></td><td>Whether to be lenient about parsing JSON that doesn’t conform to RFC 4627.</td></tr><tr><td><code>spring.gson.long-serialization-policy</code></td><td></td><td>Serialization policy for Long and long types.</td></tr><tr><td><code>spring.gson.pretty-printing</code></td><td></td><td>Whether to output serialized JSON that fits in a page for pretty printing.</td></tr><tr><td><code>spring.gson.serialize-nulls</code></td><td></td><td>Whether to serialize null fields.</td></tr><tr><td><code>spring.influx.password</code></td><td></td><td>Influx 登录用户名密码</td></tr><tr><td><code>spring.influx.url</code></td><td></td><td>InfluxDB 数据库 URL</td></tr><tr><td><code>spring.influx.user</code></td><td></td><td>Influx 登录用户名</td></tr><tr><td><code>spring.integration.jdbc.initialize-schema</code></td><td><code>embedded</code></td><td>Database schema initialization mode.</td></tr><tr><td><code>spring.integration.jdbc.schema</code></td><td><code>classpath:org/springframework/ integration/jdbc/schema-@@platform@@.sql</code></td><td>Path to the SQL file to use to initialize the database schema.</td></tr><tr><td><code>spring.jdbc.template.fetch-size</code></td><td><code>-1</code></td><td>Number of rows that should be fetched from the database when more rows are needed.</td></tr><tr><td><code>spring.jdbc.template.max-rows</code></td><td><code>-1</code></td><td>Maximum number of rows.</td></tr><tr><td><code>spring.jdbc.template.query-timeout</code></td><td></td><td>Query timeout.</td></tr><tr><td><code>spring.jpa.mapping-resources</code></td><td></td><td>Mapping resources (equivalent to “mapping-file” entries in persistence.xml).</td></tr><tr><td><code>spring.jta.atomikos.datasource.concurrent-connection-validation</code></td><td></td><td></td></tr><tr><td><code>spring.jta.atomikos.properties.allow-sub-transactions</code></td><td><code>true</code></td><td>Specify whether sub-transactions are allowed.</td></tr><tr><td><code>spring.jta.atomikos.properties.default-max-wait-time-on-shutdown</code></td><td></td><td>How long should normal shutdown (no-force) wait for transactions to complete.</td></tr><tr><td><code>spring.jta.atomikos.properties.recovery.delay</code></td><td><code>10000ms</code></td><td>Delay between two recovery scans.</td></tr><tr><td><code>spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay</code></td><td><code>86400000ms</code></td><td>Delay after which recovery can cleanup pending (‘orphaned’) log entries.</td></tr><tr><td><code>spring.jta.atomikos.properties.recovery.max-retries</code></td><td><code>5</code></td><td>Number of retry attempts to commit the transaction before throwing an exception.</td></tr><tr><td><code>spring.jta.atomikos.properties.recovery.retry-interval</code></td><td><code>10000ms</code></td><td>Delay between retry attempts.</td></tr><tr><td><code>spring.kafka.admin.client-id</code></td><td></td><td>ID to pass to the server when making requests.</td></tr><tr><td><code>spring.kafka.admin.fail-fast</code></td><td><code>false</code></td><td>Whether to fail fast if the broker is not available on startup.</td></tr><tr><td><code>spring.kafka.admin.properties</code></td><td></td><td>Additional admin-specific properties used to configure the client.</td></tr><tr><td><code>spring.kafka.admin.ssl.key-password</code></td><td></td><td>Password of the private key in the key store file.</td></tr><tr><td><code>spring.kafka.admin.ssl.keystore-location</code></td><td></td><td>Location of the key store file.</td></tr><tr><td><code>spring.kafka.admin.ssl.keystore-password</code></td><td></td><td>Store password for the key store file.</td></tr><tr><td><code>spring.kafka.admin.ssl.truststore-location</code></td><td></td><td>Location of the trust store file.</td></tr><tr><td><code>spring.kafka.admin.ssl.truststore-password</code></td><td></td><td>Store password for the trust store file.</td></tr><tr><td><code>spring.kafka.consumer.properties</code></td><td></td><td>Additional consumer-specific properties used to configure the client.</td></tr><tr><td><code>spring.kafka.consumer.ssl.key-password</code></td><td></td><td>Password of the private key in the key store file.</td></tr><tr><td><code>spring.kafka.consumer.ssl.keystore-location</code></td><td></td><td>Location of the key store file.</td></tr><tr><td><code>spring.kafka.consumer.ssl.keystore-password</code></td><td></td><td>Store password for the key store file.</td></tr><tr><td><code>spring.kafka.consumer.ssl.truststore-location</code></td><td></td><td>Location of the trust store file.</td></tr><tr><td><code>spring.kafka.consumer.ssl.truststore-password</code></td><td></td><td>Store password for the trust store file.</td></tr><tr><td><code>spring.kafka.jaas.control-flag</code></td><td><code>required</code></td><td>Control flag for login configuration.</td></tr><tr><td><code>spring.kafka.jaas.enabled</code></td><td><code>false</code></td><td>Whether to enable JAAS configuration.</td></tr><tr><td><code>spring.kafka.jaas.login-module</code></td><td><code>com.sun.security.auth           .module.Krb5LoginModule</code></td><td>Login module.</td></tr><tr><td><code>spring.kafka.jaas.options</code></td><td></td><td>Additional JAAS options.</td></tr><tr><td><code>spring.kafka.listener.client-id</code></td><td></td><td>Prefix for the listener’s consumer client.id property.</td></tr><tr><td><code>spring.kafka.listener.idle-event-interval</code></td><td></td><td>Time between publishing idle consumer events (no data received).</td></tr><tr><td><code>spring.kafka.listener.log-container-config</code></td><td></td><td>Whether to log the container configuration during initialization (INFO level).</td></tr><tr><td><code>spring.kafka.listener.monitor-interval</code></td><td></td><td>Time between checks for non-responsive consumers.</td></tr><tr><td><code>spring.kafka.listener.no-poll-threshold</code></td><td></td><td>Multiplier applied to “pollTimeout” to determine if a consumer is non-responsive.</td></tr><tr><td><code>spring.kafka.listener.type</code></td><td><code>single</code></td><td>Listener type.</td></tr><tr><td><code>spring.kafka.producer.properties</code></td><td></td><td>Additional producer-specific properties used to configure the client.</td></tr><tr><td><code>spring.kafka.producer.ssl.key-password</code></td><td></td><td>Password of the private key in the key store file.</td></tr><tr><td><code>spring.kafka.producer.ssl.keystore-location</code></td><td></td><td>Location of the key store file.</td></tr><tr><td><code>spring.kafka.producer.ssl.keystore-password</code></td><td></td><td>Store password for the key store file.</td></tr><tr><td><code>spring.kafka.producer.ssl.truststore-location</code></td><td></td><td>Location of the trust store file.</td></tr><tr><td><code>spring.kafka.producer.ssl.truststore-password</code></td><td></td><td>Store password for the trust store file.</td></tr><tr><td><code>spring.kafka.producer.transaction-id-prefix</code></td><td></td><td>When non empty, enables transaction support for producer.</td></tr><tr><td><code>spring.ldap.anonymous-read-only</code></td><td><code>false</code></td><td>Whether read-only operations should use an anonymous environment.</td></tr><tr><td><code>spring.liquibase.change-log</code></td><td><code>classpath:/db/changelog/     db.changelog-master.yaml</code></td><td>Change log configuration path.</td></tr><tr><td><code>spring.liquibase.check-change-log-location</code></td><td><code>true</code></td><td>Whether to check that the change log location exists.</td></tr><tr><td><code>spring.liquibase.contexts</code></td><td></td><td>Comma-separated list of runtime contexts to use.</td></tr><tr><td><code>spring.liquibase.default-schema</code></td><td></td><td>Default database schema.</td></tr><tr><td><code>spring.liquibase.drop-first</code></td><td><code>false</code></td><td>Whether to first drop the database schema.</td></tr><tr><td><code>spring.liquibase.enabled</code></td><td><code>true</code></td><td>Whether to enable Liquibase support.</td></tr><tr><td><code>spring.liquibase.labels</code></td><td></td><td>Comma-separated list of runtime labels to use.</td></tr><tr><td><code>spring.liquibase.parameters</code></td><td></td><td>Change log parameters.</td></tr><tr><td><code>spring.liquibase.password</code></td><td></td><td>Login password of the database to migrate.</td></tr><tr><td><code>spring.liquibase.rollback-file</code></td><td></td><td>File to which rollback SQL is written when an update is performed.</td></tr><tr><td><code>spring.liquibase.url</code></td><td></td><td>JDBC URL of the database to migrate.</td></tr><tr><td><code>spring.liquibase.user</code></td><td></td><td>Login user of the database to migrate.</td></tr><tr><td><code>spring.main.web-application-type</code></td><td></td><td>Flag to explicitly request a specific type of web application.</td></tr><tr><td><code>spring.messages.cache-duration</code></td><td></td><td>Loaded resource bundle files cache duration.</td></tr><tr><td><code>spring.messages.use-code-as-default-message</code></td><td><code>false</code></td><td>Whether to use the message code as the default message instead of throwing a “NoSuchMessageException”.</td></tr><tr><td><code>spring.mvc.contentnegotiation.favor-parameter</code></td><td><code>false</code></td><td>Whether a request parameter (“format” by default) should be used to determine the requested media type.</td></tr><tr><td><code>spring.mvc.contentnegotiation.favor-path-extension</code></td><td><code>false</code></td><td>Whether the path extension in the URL path should be used to determine the requested media type.</td></tr><tr><td><code>spring.mvc.contentnegotiation.media-types</code></td><td></td><td>Map file extensions to media types for content negotiation.</td></tr><tr><td><code>spring.mvc.contentnegotiation.parameter-name</code></td><td></td><td>Query parameter name to use when “favor-parameter” is enabled.</td></tr><tr><td><code>spring.mvc.pathmatch.use-registered-suffix-pattern</code></td><td><code>false</code></td><td>Whether suffix pattern matching should work only against extensions registered with “spring.mvc.contentnegotiation.media-types.*”.</td></tr><tr><td><code>spring.mvc.pathmatch.use-suffix-pattern</code></td><td><code>false</code></td><td>Whether to use suffix pattern match (“.*”) when matching patterns to requests.</td></tr><tr><td><code>spring.quartz.jdbc.initialize-schema</code></td><td><code>embedded</code></td><td>Database schema initialization mode.</td></tr><tr><td><code>spring.quartz.jdbc.schema</code></td><td><code>classpath:org/quartz/impl/ jdbcjobstore/ tables_@@platform@@.sql</code></td><td>Path to the SQL file to use to initialize the database schema.</td></tr><tr><td><code>spring.quartz.job-store-type</code></td><td><code>memory</code></td><td>Quartz job store type.</td></tr><tr><td><code>spring.quartz.properties</code></td><td></td><td>Additional Quartz Scheduler properties.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.acknowledge-mode</code></td><td></td><td>Acknowledge mode of container.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.auto-startup</code></td><td><code>true</code></td><td>Whether to start the container automatically on startup.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.consumers-per-queue</code></td><td></td><td>Number of consumers per queue.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.default-requeue-rejected</code></td><td></td><td>Whether rejected deliveries are re-queued by default.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.idle-event-interval</code></td><td></td><td>How often idle container events should be published.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.prefetch</code></td><td></td><td>Number of messages to be handled in a single request.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.enabled</code></td><td><code>false</code></td><td>Whether publishing retries are enabled.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.initial-interval</code></td><td><code>1000ms</code></td><td>Duration between the first and second attempt to deliver a message.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.max-attempts</code></td><td><code>3</code></td><td>Maximum number of attempts to deliver a message.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.max-interval</code></td><td><code>10000ms</code></td><td>Maximum duration between attempts.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.multiplier</code></td><td><code>1</code></td><td>Multiplier to apply to the previous retry interval.</td></tr><tr><td><code>spring.rabbitmq.listener.direct.retry.stateless</code></td><td><code>true</code></td><td>Whether retries are stateless or stateful.</td></tr><tr><td><code>spring.rabbitmq.listener.type</code></td><td><code>simple</code></td><td>Listener container type.</td></tr><tr><td><code>spring.rabbitmq.ssl.key-store-type</code></td><td><code>PKCS12</code></td><td>Key store type.</td></tr><tr><td><code>spring.rabbitmq.ssl.trust-store-type</code></td><td><code>JKS</code></td><td>Trust store type.</td></tr><tr><td><code>spring.rabbitmq.template.exchange</code></td><td>``</td><td>Name of the default exchange to use for send operations.</td></tr><tr><td><code>spring.rabbitmq.template.routing-key</code></td><td>``</td><td>Value of a default routing key to use for send operations.</td></tr><tr><td><code>spring.reactor.stacktrace-mode.enabled</code></td><td><code>false</code></td><td>Whether Reactor should collect stacktrace information at runtime.</td></tr><tr><td><code>spring.redis.jedis.pool.max-active</code></td><td><code>8</code></td><td>Maximum number of connections that can be allocated by the pool at a given time.</td></tr><tr><td><code>spring.redis.jedis.pool.max-idle</code></td><td><code>8</code></td><td>Maximum number of “idle” connections in the pool.</td></tr><tr><td><code>spring.redis.jedis.pool.max-wait</code></td><td><code>-1ms</code></td><td>Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted.</td></tr><tr><td><code>spring.redis.jedis.pool.min-idle</code></td><td><code>0</code></td><td>Target for the minimum number of idle connections to maintain in the pool.</td></tr><tr><td><code>spring.redis.lettuce.pool.max-active</code></td><td><code>8</code></td><td>Maximum number of connections that can be allocated by the pool at a given time.</td></tr><tr><td><code>spring.redis.lettuce.pool.max-idle</code></td><td><code>8</code></td><td>Maximum number of “idle” connections in the pool.</td></tr><tr><td><code>spring.redis.lettuce.pool.max-wait</code></td><td><code>-1ms</code></td><td>Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted.</td></tr><tr><td><code>spring.redis.lettuce.pool.min-idle</code></td><td><code>0</code></td><td>Target for the minimum number of idle connections to maintain in the pool.</td></tr><tr><td><code>spring.redis.lettuce.shutdown-timeout</code></td><td><code>100ms</code></td><td>Shutdown timeout.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.cache-private</code></td><td></td><td>Indicate that the response message is intended for a single user and must not be stored by a shared cache.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.cache-public</code></td><td></td><td>Indicate that any cache may store the response.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.max-age</code></td><td></td><td>Maximum time the response should be cached, in seconds if no duration suffix is not specified.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.must-revalidate</code></td><td></td><td>Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.no-cache</code></td><td></td><td>Indicate that the cached response can be reused only if re-validated with the server.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.no-store</code></td><td></td><td>Indicate to not cache the response in any case.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.no-transform</code></td><td></td><td>Indicate intermediaries (caches and others) that they should not transform the response content.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.proxy-revalidate</code></td><td></td><td>Same meaning as the “must-revalidate” directive, except that it does not apply to private caches.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.s-max-age</code></td><td></td><td>Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.stale-if-error</code></td><td></td><td>Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.</td></tr><tr><td><code>spring.resources.cache.cachecontrol.stale-while-revalidate</code></td><td></td><td>Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.</td></tr><tr><td><code>spring.resources.cache.period</code></td><td></td><td>Cache period for the resources served by the resource handler.</td></tr><tr><td><code>spring.security.filter.dispatcher-types</code></td><td><code>async,error,request</code></td><td>Security filter chain dispatcher types.</td></tr><tr><td><code>spring.security.filter.order</code></td><td><code>-100</code></td><td>Security filter chain order.</td></tr><tr><td><code>spring.security.oauth2.client.provider</code></td><td></td><td>OAuth provider details.</td></tr><tr><td><code>spring.security.oauth2.client.registration</code></td><td></td><td>OAuth client registrations.</td></tr><tr><td><code>spring.security.user.name</code></td><td><code>user</code></td><td>Default user name.</td></tr><tr><td><code>spring.security.user.password</code></td><td></td><td>Password for the default user name.</td></tr><tr><td><code>spring.security.user.roles</code></td><td></td><td>Granted roles for the default user name.</td></tr><tr><td><code>spring.servlet.multipart.enabled</code></td><td><code>true</code></td><td>Whether to enable support of multipart uploads.</td></tr><tr><td><code>spring.servlet.multipart.file-size-threshold</code></td><td><code>0</code></td><td>Threshold after which files are written to disk.</td></tr><tr><td><code>spring.servlet.multipart.location</code></td><td></td><td>Intermediate location of uploaded files.</td></tr><tr><td><code>spring.servlet.multipart.max-file-size</code></td><td><code>1MB</code></td><td>Max file size.</td></tr><tr><td><code>spring.servlet.multipart.max-request-size</code></td><td><code>10MB</code></td><td>Max request size.</td></tr><tr><td><code>spring.servlet.multipart.resolve-lazily</code></td><td><code>false</code></td><td>Whether to resolve the multipart request lazily at the time of file or parameter access.</td></tr><tr><td><code>spring.session.jdbc.cleanup-cron</code></td><td><code>0 * * * * *</code></td><td>Cron expression for expired session cleanup job.</td></tr><tr><td><code>spring.session.jdbc.initialize-schema</code></td><td><code>embedded</code></td><td>Database schema initialization mode.</td></tr><tr><td><code>spring.session.mongodb.collection-name</code></td><td><code>sessions</code></td><td>Collection name used to store sessions.</td></tr><tr><td><code>spring.session.redis.cleanup-cron</code></td><td><code>0 * * * * *</code></td><td>Cron expression for expired session cleanup job.</td></tr><tr><td><code>spring.session.servlet.filter-dispatcher-types</code></td><td><code>async,error,request</code></td><td>Session repository filter dispatcher types.</td></tr><tr><td><code>spring.session.servlet.filter-order</code></td><td></td><td>Session repository filter order.</td></tr><tr><td><code>spring.thymeleaf.enable-spring-el-compiler</code></td><td><code>false</code></td><td>Enable the SpringEL compiler in SpringEL expressions.</td></tr><tr><td><code>spring.thymeleaf.reactive.chunked-mode-view-names</code></td><td></td><td>Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.</td></tr><tr><td><code>spring.thymeleaf.reactive.full-mode-view-names</code></td><td></td><td>Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.</td></tr><tr><td><code>spring.thymeleaf.reactive.max-chunk-size</code></td><td><code>0</code></td><td>Maximum size of data buffers used for writing to the response, in bytes.</td></tr><tr><td><code>spring.thymeleaf.reactive.media-types</code></td><td></td><td>Media types supported by the view technology.</td></tr><tr><td><code>spring.thymeleaf.servlet.content-type</code></td><td><code>text/html</code></td><td>Content-Type value written to HTTP responses.</td></tr><tr><td><code>spring.webflux.date-format</code></td><td></td><td>Date format to use.</td></tr><tr><td><code>spring.webflux.static-path-pattern</code></td><td><code>/**</code></td><td>Path pattern used for static resources.</td></tr><tr><td><code>spring.webservices.wsdl-locations</code></td><td></td><td>Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.</td></tr></tbody></table><table><thead><tr><th>Key</th><th>Replacement（替代）</th><th>原因</th></tr></thead><tbody><tr><td><code>banner.charset</code></td><td><code>spring.banner.charset</code></td><td></td></tr><tr><td><code>banner.image.height</code></td><td><code>spring.banner.image.height</code></td><td></td></tr><tr><td><code>banner.image.invert</code></td><td><code>spring.banner.image.invert</code></td><td></td></tr><tr><td><code>banner.image.location</code></td><td><code>spring.banner.image.location</code></td><td></td></tr><tr><td><code>banner.image.margin</code></td><td><code>spring.banner.image.margin</code></td><td></td></tr><tr><td><code>banner.image.width</code></td><td><code>spring.banner.image.width</code></td><td></td></tr><tr><td><code>banner.location</code></td><td><code>spring.banner.location</code></td><td></td></tr><tr><td><code>endpoints.actuator.enabled</code></td><td></td><td>actuator  端点不再可用</td></tr><tr><td><code>endpoints.actuator.path</code></td><td></td><td>actuator  端点不再可用</td></tr><tr><td><code>endpoints.actuator.sensitive</code></td><td></td><td>actuator  端点不再可用</td></tr><tr><td><code>endpoints.auditevents.enabled</code></td><td><code>management.endpoint.  auditevents.enabled</code></td><td></td></tr><tr><td><code>endpoints.auditevents.path</code></td><td><code>management.endpoints.web.path-mapping.auditevents</code></td><td></td></tr><tr><td><code>endpoints.auditevents.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.autoconfig.enabled</code></td><td><code>management.endpoint.   conditions.enabled</code></td><td></td></tr><tr><td><code>endpoints.autoconfig.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.autoconfig.path</code></td><td><code>management.endpoints.web.path-mapping.conditions</code></td><td></td></tr><tr><td><code>endpoints.autoconfig.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.beans.enabled</code></td><td><code>management.endpoint.beans.enabled</code></td><td></td></tr><tr><td><code>endpoints.beans.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.beans.path</code></td><td><code>management.endpoints.web.path-mapping.beans</code></td><td></td></tr><tr><td><code>endpoints.beans.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.configprops.enabled</code></td><td><code>management.endpoint.   configprops.enabled</code></td><td></td></tr><tr><td><code>endpoints.configprops.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.configprops.keys-to-sanitize</code></td><td><code>management.endpoint.     configprops.keys-to-sanitize</code></td><td></td></tr><tr><td><code>endpoints.configprops.path</code></td><td><code>management.endpoints.web.path-mapping.configprops</code></td><td></td></tr><tr><td><code>endpoints.configprops.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.cors.allow-credentials</code></td><td><code>management.endpoints.      web.cors.allow-credentials</code></td><td></td></tr><tr><td><code>endpoints.cors.allowed-headers</code></td><td><code>management.endpoints.    web.cors.allowed-headers</code></td><td></td></tr><tr><td><code>endpoints.cors.allowed-methods</code></td><td><code>management.endpoints.    web.cors.allowed-methods</code></td><td></td></tr><tr><td><code>endpoints.cors.allowed-origins</code></td><td><code>management.endpoints.    web.cors.allowed-origins</code></td><td></td></tr><tr><td><code>endpoints.cors.exposed-headers</code></td><td><code>management.endpoints.    web.cors.exposed-headers</code></td><td></td></tr><tr><td><code>endpoints.cors.max-age</code></td><td><code>management.endpoints.        web.cors.max-age</code></td><td></td></tr><tr><td><code>endpoints.docs.curies.enabled</code></td><td></td><td>docs 端点不再可用</td></tr><tr><td><code>endpoints.docs.enabled</code></td><td></td><td>docs 端点不再可用</td></tr><tr><td><code>endpoints.docs.path</code></td><td></td><td>docs 端点不再可用</td></tr><tr><td><code>endpoints.docs.sensitive</code></td><td></td><td>docs 端点不再可用</td></tr><tr><td><code>endpoints.dump.enabled</code></td><td><code>management.endpoint.    threaddump.enabled</code></td><td></td></tr><tr><td><code>endpoints.dump.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.dump.path</code></td><td><code>management.endpoints.web.path-mapping.dump</code></td><td></td></tr><tr><td><code>endpoints.dump.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.enabled</code></td><td><code>management.endpoints.             enabled-by-default</code></td><td></td></tr><tr><td><code>endpoints.env.enabled</code></td><td><code>management.endpoint.env.enabled</code></td><td></td></tr><tr><td><code>endpoints.env.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.env.keys-to-sanitize</code></td><td><code>management.endpoint.             env.keys-to-sanitize</code></td><td></td></tr><tr><td><code>endpoints.env.path</code></td><td><code>management.endpoints.            web.path-mapping.env</code></td><td></td></tr><tr><td><code>endpoints.env.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.flyway.enabled</code></td><td><code>management.endpoint.flyway.enabled</code></td><td></td></tr><tr><td><code>endpoints.flyway.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.flyway.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.health.enabled</code></td><td><code>management.endpoint.health.enabled</code></td><td></td></tr><tr><td><code>endpoints.health.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.health.mapping</code></td><td><code>management.health.status.http-mapping</code></td><td></td></tr><tr><td><code>endpoints.health.path</code></td><td><code>management.endpoints.web.path-mapping.health</code></td><td></td></tr><tr><td><code>endpoints.health.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.health.time-to-live</code></td><td><code>management.endpoint.    health.cache.time-to-live</code></td><td></td></tr><tr><td><code>endpoints.heapdump.enabled</code></td><td><code>management.endpoint.heapdump.enabled</code></td><td></td></tr><tr><td><code>endpoints.heapdump.path</code></td><td><code>management.endpoints.web.path-mapping.heapdump</code></td><td></td></tr><tr><td><code>endpoints.heapdump.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.hypermedia.enabled</code></td><td></td><td>Actuator 中的 Hypermedia 不再可用</td></tr><tr><td><code>endpoints.info.enabled</code></td><td><code>management.endpoint.info.enabled</code></td><td></td></tr><tr><td><code>endpoints.info.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.info.path</code></td><td><code>management.endpoints.web.path-mapping.info</code></td><td></td></tr><tr><td><code>endpoints.info.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.jmx.domain</code></td><td><code>management.endpoints.jmx.domain</code></td><td></td></tr><tr><td><code>endpoints.jmx.enabled</code></td><td><code>management.endpoints. jmx.exposure.exclude</code></td><td></td></tr><tr><td><code>endpoints.jmx.static-names</code></td><td><code>management.endpoints.        jmx.static-names</code></td><td></td></tr><tr><td><code>endpoints.jmx.unique-names</code></td><td><code>management.endpoints.        jmx.unique-names</code></td><td></td></tr><tr><td><code>endpoints.jolokia.enabled</code></td><td><code>management.endpoint.     jolokia.enabled</code></td><td></td></tr><tr><td><code>endpoints.jolokia.path</code></td><td><code>management.endpoints.web.path-mapping.jolokia</code></td><td></td></tr><tr><td><code>endpoints.jolokia.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.liquibase.enabled</code></td><td><code>management.endpoint.   liquibase.enabled</code></td><td></td></tr><tr><td><code>endpoints.liquibase.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.liquibase.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.logfile.enabled</code></td><td><code>management.endpoint.     logfile.enabled</code></td><td></td></tr><tr><td><code>endpoints.logfile.external-file</code></td><td><code>management.endpoint.     logfile.external-file</code></td><td></td></tr><tr><td><code>endpoints.logfile.path</code></td><td><code>management.endpoints.web.path-mapping.logfile</code></td><td></td></tr><tr><td><code>endpoints.logfile.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.loggers.enabled</code></td><td><code>management.endpoint.      loggers.enabled</code></td><td></td></tr><tr><td><code>endpoints.loggers.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.loggers.path</code></td><td><code>management.endpoints.web.path-mapping.loggers</code></td><td></td></tr><tr><td><code>endpoints.loggers.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.mappings.enabled</code></td><td><code>management.endpoint.     mappings.enabled</code></td><td></td></tr><tr><td><code>endpoints.mappings.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.mappings.path</code></td><td><code>management.endpoints.web.path-mapping.mappings</code></td><td></td></tr><tr><td><code>endpoints.mappings.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.metrics.enabled</code></td><td><code>management.endpoint.metrics.enabled</code></td><td></td></tr><tr><td><code>endpoints.metrics.filter.counter-submissions</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>endpoints.metrics.filter.enabled</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>endpoints.metrics.filter.gauge-submissions</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>endpoints.metrics.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.metrics.path</code></td><td><code>management.endpoints.web.path-mapping.metrics</code></td><td></td></tr><tr><td><code>endpoints.metrics.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.shutdown.enabled</code></td><td><code>management.endpoint.     shutdown.enabled</code></td><td></td></tr><tr><td><code>endpoints.shutdown.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.shutdown.path</code></td><td><code>management.endpoints.web.path-mapping.shutdown</code></td><td></td></tr><tr><td><code>endpoints.shutdown.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>endpoints.trace.enabled</code></td><td><code>management.endpoint.     httptrace.enabled</code></td><td></td></tr><tr><td><code>endpoints.trace.filter.enabled</code></td><td><code>management.trace.http.enabled</code></td><td></td></tr><tr><td><code>endpoints.trace.id</code></td><td></td><td>端点标识符不再可定制</td></tr><tr><td><code>endpoints.trace.path</code></td><td><code>management.endpoints.web.path-mapping.httptrace</code></td><td></td></tr><tr><td><code>endpoints.trace.sensitive</code></td><td></td><td>终端敏感标志不再可定制，因为Spring Boot 不再提供可自定义的安全自动配置</td></tr><tr><td><code>error.path</code></td><td></td><td>Path of the error controller.</td></tr><tr><td><code>flyway.baseline-description</code></td><td><code>spring.flyway.baseline-description</code></td><td></td></tr><tr><td><code>flyway.baseline-on-migrate</code></td><td><code>spring.flyway.baseline-on-migrate</code></td><td></td></tr><tr><td><code>flyway.baseline-version</code></td><td><code>spring.flyway.baseline-version</code></td><td></td></tr><tr><td><code>flyway.check-location</code></td><td><code>spring.flyway.check-location</code></td><td></td></tr><tr><td><code>flyway.clean-on-validation-error</code></td><td><code>spring.flyway.                    clean-on-validation-error</code></td><td></td></tr><tr><td><code>flyway.enabled</code></td><td><code>spring.flyway.enabled</code></td><td></td></tr><tr><td><code>flyway.encoding</code></td><td><code>spring.flyway.encoding</code></td><td></td></tr><tr><td><code>flyway.ignore-failed-future-migration</code></td><td></td><td></td></tr><tr><td><code>flyway.init-sqls</code></td><td><code>spring.flyway.init-sqls</code></td><td></td></tr><tr><td><code>flyway.locations</code></td><td><code>spring.flyway.locations</code></td><td></td></tr><tr><td><code>flyway.out-of-order</code></td><td><code>spring.flyway.out-of-order</code></td><td></td></tr><tr><td><code>flyway.password</code></td><td><code>spring.flyway.password</code></td><td></td></tr><tr><td><code>flyway.placeholder-prefix</code></td><td><code>spring.flyway.placeholder-prefix</code></td><td></td></tr><tr><td><code>flyway.placeholder-replacement</code></td><td><code>spring.flyway.placeholder-replacement</code></td><td></td></tr><tr><td><code>flyway.placeholder-suffix</code></td><td><code>spring.flyway.placeholder-suffix</code></td><td></td></tr><tr><td><code>flyway.placeholders</code></td><td><code>spring.flyway.placeholders</code></td><td></td></tr><tr><td><code>flyway.schemas</code></td><td><code>spring.flyway.schemas</code></td><td></td></tr><tr><td><code>flyway.sql-migration-prefix</code></td><td><code>spring.flyway.sql-migration-prefix</code></td><td></td></tr><tr><td><code>flyway.sql-migration-separator</code></td><td><code>spring.flyway.sql-migration-separator</code></td><td></td></tr><tr><td><code>flyway.sql-migration-suffix</code></td><td><code>spring.flyway.sql-migration-suffixes</code></td><td></td></tr><tr><td><code>flyway.table</code></td><td><code>spring.flyway.table</code></td><td></td></tr><tr><td><code>flyway.target</code></td><td><code>spring.flyway.target</code></td><td></td></tr><tr><td><code>flyway.url</code></td><td><code>spring.flyway.url</code></td><td></td></tr><tr><td><code>flyway.user</code></td><td><code>spring.flyway.user</code></td><td></td></tr><tr><td><code>flyway.validate-on-migrate</code></td><td><code>spring.flyway.validate-on-migrate</code></td><td></td></tr><tr><td><code>jolokia.config</code></td><td><code>management.endpoint.jolokia.config</code></td><td></td></tr><tr><td><code>liquibase.change-log</code></td><td><code>spring.liquibase.change-log</code></td><td></td></tr><tr><td><code>liquibase.check-change-log-location</code></td><td><code>spring.liquibase.check-change-log-location</code></td><td></td></tr><tr><td><code>liquibase.contexts</code></td><td><code>spring.liquibase.contexts</code></td><td></td></tr><tr><td><code>liquibase.default-schema</code></td><td><code>spring.liquibase.default-schema</code></td><td></td></tr><tr><td><code>liquibase.drop-first</code></td><td><code>spring.liquibase.drop-first</code></td><td></td></tr><tr><td><code>liquibase.enabled</code></td><td><code>spring.liquibase.enabled</code></td><td></td></tr><tr><td><code>liquibase.labels</code></td><td><code>spring.liquibase.labels</code></td><td></td></tr><tr><td><code>liquibase.parameters</code></td><td><code>spring.liquibase.parameters</code></td><td></td></tr><tr><td><code>liquibase.password</code></td><td><code>spring.liquibase.password</code></td><td></td></tr><tr><td><code>liquibase.rollback-file</code></td><td><code>spring.liquibase.rollback-file</code></td><td></td></tr><tr><td><code>liquibase.url</code></td><td><code>spring.liquibase.url</code></td><td></td></tr><tr><td><code>liquibase.user</code></td><td><code>spring.liquibase.user</code></td><td></td></tr><tr><td><code>management.add-application-context-header</code></td><td><code>management.server.add-application-context-header</code></td><td></td></tr><tr><td><code>management.address</code></td><td><code>management.server.address</code></td><td></td></tr><tr><td><code>management.context-path</code></td><td><code>management.server.       servlet.context-path</code></td><td></td></tr><tr><td><code>management.port</code></td><td><code>management.server.port</code></td><td></td></tr><tr><td><code>management.security.enabled</code></td><td></td><td>现在提供全局 security 自动配置。</td></tr><tr><td><code>management.security.roles</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>management.security.sessions</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>management.shell.auth.jaas.domain</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.auth.key.path</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.auth.simple.user.name</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.auth.simple.user.password</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.auth.spring.roles</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.auth.type</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.ssh.auth-timeout</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.ssh.enabled</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.ssh.idle-timeout</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.ssh.key-path</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.ssh.port</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.telnet.enabled</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.shell.telnet.port</code></td><td></td><td>CRaSH 支持不再可用</td></tr><tr><td><code>management.ssl.ciphers</code></td><td><code>management.server.ssl.ciphers</code></td><td></td></tr><tr><td><code>management.ssl.client-auth</code></td><td><code>management.server.ssl.client-auth</code></td><td></td></tr><tr><td><code>management.ssl.enabled</code></td><td><code>management.server.ssl.enabled</code></td><td></td></tr><tr><td><code>management.ssl.enabled-protocols</code></td><td><code>management.server.ssl.enabled-protocols</code></td><td></td></tr><tr><td><code>management.ssl.key-alias</code></td><td><code>management.server.ssl.key-alias</code></td><td></td></tr><tr><td><code>management.ssl.key-password</code></td><td><code>management.server.ssl.key-password</code></td><td></td></tr><tr><td><code>management.ssl.key-store</code></td><td><code>management.server.ssl.key-store</code></td><td></td></tr><tr><td><code>management.ssl.key-store-password</code></td><td><code>management.server.ssl.key-store-password</code></td><td></td></tr><tr><td><code>management.ssl.key-store-provider</code></td><td><code>management.server.ssl.key-store-provider</code></td><td></td></tr><tr><td><code>management.ssl.key-store-type</code></td><td><code>management.server.ssl.key-store-type</code></td><td></td></tr><tr><td><code>management.ssl.protocol</code></td><td><code>management.server.ssl.protocol</code></td><td></td></tr><tr><td><code>management.ssl.trust-store</code></td><td><code>management.server.ssl.trust-store</code></td><td></td></tr><tr><td><code>management.ssl.trust-store-password</code></td><td><code>management.server.ssl.trust-store-password</code></td><td></td></tr><tr><td><code>management.ssl.trust-store-provider</code></td><td><code>management.server.ssl.trust-store-provider</code></td><td></td></tr><tr><td><code>management.ssl.trust-store-type</code></td><td><code>management.server.ssl.trust-store-type</code></td><td></td></tr><tr><td><code>management.trace.include</code></td><td><code>management.trace.http.include</code></td><td></td></tr><tr><td><code>security.basic.authorize-mode</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.basic.enabled</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.basic.path</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.basic.realm</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.enable-csrf</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.filter-dispatcher-types</code></td><td><code>spring.security.         filter.dispatcher-types</code></td><td></td></tr><tr><td><code>security.filter-order</code></td><td><code>spring.security.filter.order</code></td><td></td></tr><tr><td><code>security.headers.cache</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.content-security-policy</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.content-security-policy-mode</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.content-type</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.frame</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.hsts</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.headers.xss</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.ignored</code></td><td></td><td>security 自动配置不再可定制</td></tr><tr><td><code>security.oauth2.                authorization.check-token-access</code></td><td></td><td>Spring Security 访问规则用于检查令牌端点（例如，SpEL表达式，如“isAuthenticated（）”）</td></tr><tr><td><code>security.oauth2.authorization.realm</code></td><td></td><td>客户端身份验证的领域名称</td></tr><tr><td><code>security.oauth2.authorization.token-key-access</code></td><td></td><td>Spring Security访问规则用于检查令牌端点（例如，SpEL表达式，如“isAuthenticated（）”）</td></tr><tr><td><code>security.oauth2.client.access-token-uri</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.access-token-validity-seconds</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.additional-information</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.authentication-scheme</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.authorities</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.authorized-grant-types</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.auto-approve-scopes</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.client-authentication-scheme</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.client-id</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.client-secret</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.grant-type</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.id</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.pre-            established-redirect-uri</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.refresh-token-validity-seconds</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.registered-redirect-uri</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.resource-ids</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.scope</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.token-name</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.use-current-uri</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.client.user-authorization-uri</code></td><td></td><td></td></tr><tr><td><code>security.oauth2.resource.filter-order</code></td><td><code>0</code></td><td>用于验证令牌的过滤器链的顺序。</td></tr><tr><td><code>security.oauth2.resource.id</code></td><td></td><td>资源的标识符</td></tr><tr><td><code>security.oauth2.resource.jwk.key-set-uri</code></td><td></td><td>获取验证密钥以验证 JWT 令牌的 URI</td></tr><tr><td><code>security.oauth2.resource.jwt.key-uri</code></td><td></td><td>JWT 令牌的 URI</td></tr><tr><td><code>security.oauth2.resource.jwt.key-value</code></td><td></td><td>JWT 令牌的验证密钥</td></tr><tr><td><code>security.oauth2.resource.prefer-token-info</code></td><td><code>true</code></td><td>使用令牌信息，可以设置为 false以使用用户信息</td></tr><tr><td><code>security.oauth2.resource.service-id</code></td><td><code>resource</code></td><td></td></tr><tr><td><code>security.oauth2.resource.token-info-uri</code></td><td></td><td>token decoding 端点的 URI</td></tr><tr><td><code>security.oauth2.resource.token-type</code></td><td></td><td>使用 userInfoUri 时要发送的令牌类型。</td></tr><tr><td><code>security.oauth2.resource.user-info-uri</code></td><td></td><td>用户端点的 URI</td></tr><tr><td><code>security.oauth2.sso.filter-order</code></td><td></td><td>如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序（在这种情况下，可以改为提供顺序）。</td></tr><tr><td><code>security.oauth2.sso.login-path</code></td><td><code>/login</code></td><td>登录页面的路径，即触发重定向到 OAuth2 授权服务器的页面。</td></tr><tr><td><code>security.require-ssl</code></td><td></td><td>security 自动配置已不再可定制</td></tr><tr><td><code>security.sessions</code></td><td></td><td>security 自动配置已不再可定制</td></tr><tr><td><code>security.user.name</code></td><td><code>spring.security.user.name</code></td><td></td></tr><tr><td><code>security.user.password</code></td><td><code>spring.security.user.password</code></td><td></td></tr><tr><td><code>security.user.role</code></td><td><code>spring.security.user.roles</code></td><td></td></tr><tr><td><code>server.context-parameters</code></td><td><code>server.servlet.context-parameters</code></td><td></td></tr><tr><td><code>server.context-path</code></td><td><code>server.servlet.context-path</code></td><td></td></tr><tr><td><code>server.display-name</code></td><td><code>server.servlet.             application-display-name</code></td><td></td></tr><tr><td><code>server.jsp-servlet.class-name</code></td><td><code>server.servlet.jsp.class-name</code></td><td></td></tr><tr><td><code>server.jsp-servlet.init-parameters</code></td><td><code>server.servlet.jsp.init-parameters</code></td><td></td></tr><tr><td><code>server.jsp-servlet.registered</code></td><td><code>server.servlet.jsp.registered</code></td><td></td></tr><tr><td><code>server.servlet-path</code></td><td><code>server.servlet.path</code></td><td></td></tr><tr><td><code>server.session.cookie.comment</code></td><td><code>server.servlet.session.cookie.comment</code></td><td></td></tr><tr><td><code>server.session.cookie.domain</code></td><td><code>server.servlet.session.cookie.domain</code></td><td></td></tr><tr><td><code>server.session.cookie.http-only</code></td><td><code>server.servlet.       session.cookie.http-only</code></td><td></td></tr><tr><td><code>server.session.cookie.max-age</code></td><td><code>server.servlet.session.cookie.max-age</code></td><td></td></tr><tr><td><code>server.session.cookie.name</code></td><td><code>server.servlet.session.cookie.name</code></td><td></td></tr><tr><td><code>server.session.cookie.path</code></td><td><code>server.servlet.session.cookie.path</code></td><td></td></tr><tr><td><code>server.session.cookie.secure</code></td><td><code>server.servlet.session.cookie.secure</code></td><td></td></tr><tr><td><code>server.session.persistent</code></td><td><code>server.servlet.session.persistent</code></td><td></td></tr><tr><td><code>server.session.store-dir</code></td><td><code>server.servlet.session.store-dir</code></td><td></td></tr><tr><td><code>server.session.timeout</code></td><td><code>server.servlet.session.timeout</code></td><td></td></tr><tr><td><code>server.session.tracking-modes</code></td><td><code>server.servlet.session.tracking-modes</code></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.block-if-session-pool-is-full</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.block-if-session-pool-is-full-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.connection-factory</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.create-connection-on-startup</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.expiry-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.idle-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.max-connections</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.maximum-active-session-per-connection</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.properties</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.reconnect-on-exception</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.time-between-expiration-check-millis</code></td><td></td><td></td></tr><tr><td><code>spring.activemq.pool.configuration.use-anonymous-producers</code></td><td></td><td></td></tr><tr><td><code>spring.application.index</code></td><td></td><td>应用程序上下文 ID 默认情况下是唯一的</td></tr><tr><td><code>spring.batch.initializer.enabled</code></td><td><code>spring.batch.initialize-schema</code></td><td></td></tr><tr><td><code>spring.cache.guava.spec</code></td><td></td><td>用于创建缓存的规范</td></tr><tr><td><code>spring.cache.hazelcast.config</code></td><td></td><td>用于初始化 Hazelcast 的配置文件的位置</td></tr><tr><td><code>spring.data.cassandra.connect-timeout-millis</code></td><td><code>spring.data.          cassandra.connect-timeout</code></td><td></td></tr><tr><td><code>spring.data.cassandra.read-timeout-millis</code></td><td><code>spring.data.cassandra.read-timeout</code></td><td></td></tr><tr><td><code>spring.data.cassandra.repositories.enabled</code></td><td><code>spring.data.cassandra.    repositories.type</code></td><td></td></tr><tr><td><code>spring.data.couchbase.repositories.enabled</code></td><td><code>spring.data.couchbase.    repositories.type</code></td><td></td></tr><tr><td><code>spring.data.mongodb.repositories.enabled</code></td><td><code>spring.data.mongodb.    repositories.type</code></td><td></td></tr><tr><td><code>spring.data.neo4j.compiler</code></td><td></td><td>从 Neo4j 3 开始不再支持</td></tr><tr><td><code>spring.datasource.dbcp.access-to-underlying-connection-allowed</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.connection-init-sqls</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.default-auto-commit</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.default-catalog</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.default-read-only</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.default-transaction-isolation</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.driver-class-name</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.initial-size</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.log-abandoned</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.login-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.max-active</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.max-idle</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.max-open-prepared-statements</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.max-wait</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.min-evictable-idle-time-millis</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.min-idle</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.num-tests-per-eviction-run</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.password</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.pool-prepared-statements</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.remove-abandoned</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.remove-abandoned-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.test-on-borrow</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.test-on-return</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.test-while-idle</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.time-between-eviction-runs-millis</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.url</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.username</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.validation-query</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.dbcp.validation-query-timeout</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.hikari.connection-customizer-class-name</code></td><td></td><td></td></tr><tr><td><code>spring.datasource.initialize</code></td><td><code>spring.datasource.       initialization-mode</code></td><td></td></tr><tr><td><code>spring.devtools.remote.debug.enabled</code></td><td></td><td>远程 debug 已不再支持</td></tr><tr><td><code>spring.devtools.remote.debug.local-port</code></td><td></td><td>远程 debug 已不再支持</td></tr><tr><td><code>spring.http.multipart.enabled</code></td><td><code>spring.servlet.multipart.enabled</code></td><td></td></tr><tr><td><code>spring.http.multipart.file-size-threshold</code></td><td><code>spring.servlet.multipart.file-size-threshold</code></td><td></td></tr><tr><td><code>spring.http.multipart.location</code></td><td><code>spring.servlet.multipart.location</code></td><td></td></tr><tr><td><code>spring.http.multipart.max-file-size</code></td><td><code>spring.servlet.multipart.max-file-size</code></td><td></td></tr><tr><td><code>spring.http.multipart.max-request-size</code></td><td><code>spring.servlet.           multipart.max-request-size</code></td><td></td></tr><tr><td><code>spring.http.multipart.resolve-lazily</code></td><td><code>spring.servlet.multipart.resolve-lazily</code></td><td></td></tr><tr><td><code>spring.jpa.hibernate.naming.strategy</code></td><td></td><td>Hibernate 4 的自动配置已不再提供</td></tr><tr><td><code>spring.jta.atomikos.properties.console-log-level</code></td><td><code>warn</code></td><td></td></tr><tr><td><code>spring.messages.cache-seconds</code></td><td><code>spring.messages.cache-duration</code></td><td></td></tr><tr><td><code>spring.metrics.export.aggregate.key-pattern</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.aggregate.prefix</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.delay-millis</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.enabled</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.excludes</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.includes</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.redis.key</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.redis.prefix</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.send-latest</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.statsd.host</code></td><td><code>management.metrics.    export.statsd.host</code></td><td></td></tr><tr><td><code>spring.metrics.export.statsd.port</code></td><td><code>management.metrics.   export.statsd.port</code></td><td></td></tr><tr><td><code>spring.metrics.export.statsd.prefix</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.metrics.export.triggers</code></td><td></td><td>Metrics support 现在使用千分尺</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.enable-fallback</code></td><td><code>false</code></td><td>启用对回退解决方案的支持</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.enabled</code></td><td><code>false</code></td><td>启用 device 视图解析器</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.mobile-prefix</code></td><td><code>mobile/</code></td><td>用于查看移动设备名称的前缀</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.mobile-suffix</code></td><td>``</td><td>附加后缀以查看移动设备的名称</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.normal-prefix</code></td><td>``</td><td>用于查看普通设备名称的前缀.</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.normal-suffix</code></td><td>``</td><td>附加后缀以查看普通设备的名称</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.tablet-prefix</code></td><td><code>tablet/</code></td><td>前缀预设为查看平板电脑设备的名称</td></tr><tr><td><code>spring.mobile.devicedelegatingviewresolver.tablet-suffix</code></td><td>``</td><td>附加后缀以查看平板电脑设备的名称</td></tr><tr><td><code>spring.mobile.sitepreference.enabled</code></td><td><code>true</code></td><td>启用 SitePreferenceHandler.</td></tr><tr><td><code>spring.mvc.media-types</code></td><td><code>spring.mvc.    contentnegotiation.media-types</code></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.acknowledge-mode</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.auto-startup</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.concurrency</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.default-requeue-rejected</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.idle-event-interval</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.max-concurrency</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.prefetch</code></td><td></td><td></td></tr><tr><td><code>spring.rabbitmq.listener.retry.enabled</code></td><td><code>false</code></td><td>是否启用发布重试</td></tr><tr><td><code>spring.rabbitmq.listener.retry.initial-interval</code></td><td><code>1000</code></td><td>第一次和第二次尝试发布或传递讯息的时间间隔</td></tr><tr><td><code>spring.rabbitmq.listener.retry.max-attempts</code></td><td><code>3</code></td><td>尝试发布或传递邮件的最大次数</td></tr><tr><td><code>spring.rabbitmq.listener.retry.max-interval</code></td><td><code>10000</code></td><td>尝试之间的最大间隔</td></tr><tr><td><code>spring.rabbitmq.listener.retry.multiplier</code></td><td><code>1</code></td><td>于先前重试间隔的倍数</td></tr><tr><td><code>spring.rabbitmq.listener.retry.stateless</code></td><td><code>true</code></td><td>无论重试是无状态还是有状态</td></tr><tr><td><code>spring.rabbitmq.listener.transaction-size</code></td><td></td><td></td></tr><tr><td><code>spring.redis.pool.max-active</code></td><td><code>spring.redis.jedis.pool.max-idle</code></td><td></td></tr><tr><td><code>spring.redis.pool.max-idle</code></td><td><code>spring.redis.jedis.pool.max-idle</code></td><td></td></tr><tr><td><code>spring.redis.pool.max-wait</code></td><td><code>spring.redis.jedis.pool.max-wait</code></td><td></td></tr><tr><td><code>spring.redis.pool.min-idle</code></td><td><code>spring.redis.jedis.pool.min-idle</code></td><td></td></tr><tr><td><code>spring.resources.cache-period</code></td><td><code>spring.resources.cache.period</code></td><td></td></tr><tr><td><code>spring.sendgrid.password</code></td><td></td><td>不再支持使用用户名和密码 ( 使用 spring.sendgrid.api-key 代替 )</td></tr><tr><td><code>spring.sendgrid.username</code></td><td></td><td>不再支持使用用户名和密码 ( 使用 spring.sendgrid.api-key 代替 )</td></tr><tr><td><code>spring.session.jdbc.initializer.enabled</code></td><td><code>spring.session.         jdbc.initialize-schema</code></td><td></td></tr><tr><td><code>spring.session.mongo.collection-name</code></td><td><code>spring.session.mongodb.collection-name</code></td><td></td></tr><tr><td><code>spring.social.auto-connection-views</code></td><td><code>false</code></td><td>为支持的生产者启用连接状态视图</td></tr><tr><td><code>spring.social.facebook.app-id</code></td><td></td><td>Application id.</td></tr><tr><td><code>spring.social.facebook.app-secret</code></td><td></td><td>Application secret.</td></tr><tr><td><code>spring.social.linkedin.app-id</code></td><td></td><td>Application id.</td></tr><tr><td><code>spring.social.linkedin.app-secret</code></td><td></td><td>Application secret.</td></tr><tr><td><code>spring.social.twitter.app-id</code></td><td></td><td>Application id.</td></tr><tr><td><code>spring.social.twitter.app-secret</code></td><td></td><td>Application secret.</td></tr><tr><td><code>spring.thymeleaf.content-type</code></td><td><code>spring.thymeleaf.      servlet.content-type</code></td></tr></tbody></table><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><h3 id="相关文章-1"><a href="#相关文章-1" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>英文参考：<a href="">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Configuration-Changelog</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqc4n57tj4j31hc0zktmm.jpg&quot; alt=&quot;pocket-watch-3156771_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>写这么多系列博客，怪不得找不到女朋友</title>
    <link href="http://yoursite.com/2018/03/27/blogs/"/>
    <id>http://yoursite.com/2018/03/27/blogs/</id>
    <published>2018-03-26T16:00:00.000Z</published>
    <updated>2018-03-27T15:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fprrv5n1p2j31hc0u0tm6.jpg" alt="nature-3054445_1920"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>好几周没更新博客了，对不断支持我博客的童鞋们说声：“抱歉了！”。自己这段时间确实比较忙，而且还在抽空完成学校的毕业设计。今天晚上抽空把大学期间写过的博客弄一个系列文章合集，算是对大学这四年的一个总结，证明自己没白过。</p><a id="more"></a><p>熟悉我的人都知道我写博客的时间比较早，而且坚持的时间也比较久，一直到现在也是一直保持着更新状态。最早最早开始写博客是在 CSDN 上写的，然后在简书也写过一段时间，后来放弃了简书转战了掘金，以下图片是自己在掘金这一年的成果，快 <strong>1.5 万</strong>关注了，哈哈哈。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fprrv4ovhqj31kw0iaadw.jpg" alt="21"></p><p>去年过年前还收到掘金送来的专属礼物，真是激动，感谢掘金，希望越办越好！</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fprrv2qhutj31kw23vu0x.jpg" alt="IMG_20180206_125142"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fprrv7e4wvj31kw23vb29.jpg" alt="IMG_20180206_125159"></p><p>细数文章后，发现自己在实习的这段时间写的博客也挺多的，而且质量还比较高，经常上开发者头条、掘金等平台的首页推荐。在此，感谢实习期间组内大佬们的各种帮助！</p><p>这里再次说下写博客的好处：</p><ul><li>很好的用来总结自己所学的知识</li><li>遇到那么一群也写博客的大佬，有共同话题聊了</li><li>面试加分（在简历上放上自己的个人网站链接，面试官就可以更好的了解你，知道你所学知识的深度和广度）</li></ul><p>不要小看你的每一篇不起眼博客，用一个蚂蚁金服大佬跟我说的话叫做：<strong>厚积薄发</strong>！</p><p>不多说了，如果想和我交流的可以加我 qq 群：<strong>528776268</strong>    和我的微信：<strong>zhisheng_tian</strong></p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/03/27/blogs/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/03/27/blogs/</a></p><h3 id="系列文章合集"><a href="#系列文章合集" class="headerlink" title="系列文章合集"></a>系列文章合集</h3><h4 id="Spring-Boot-系列文章"><a href="#Spring-Boot-系列文章" class="headerlink" title="Spring Boot 系列文章"></a><strong>Spring Boot 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">Spring Boot系列文章（一）：SpringBoot Kafka 整合使用</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/01/17/SpringBoot-Admin/" target="_blank" rel="noopener">Spring Boot系列文章（二）：SpringBoot Admin 使用指南</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/01/26/SpringBoot-RabbitMQ/" target="_blank" rel="noopener">Spring Boot系列文章（三）：SpringBoot RabbitMQ 整合使用</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/01/27/SpringBoot-ActiveMQ/" target="_blank" rel="noopener">Spring Boot系列文章（四）：SpringBoot ActiveMQ 整合使用</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/01/28/RabbitMQ/" target="_blank" rel="noopener">Spring Boot系列文章（五）：SpringBoot RabbitMQ 整合进阶版</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/02/07/SpringBoot-RocketMQ/" target="_blank" rel="noopener">Spring Boot系列文章（六）：SpringBoot RocketMQ 整合使用和监控</a></p><p>7、更多请期待</p><h4 id="Spring-Boot-2-0-系列文章"><a href="#Spring-Boot-2-0-系列文章" class="headerlink" title="Spring Boot 2.0 系列文章"></a><strong>Spring Boot 2.0 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/" target="_blank" rel="noopener">Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解</a></p><p>3、后面绝对有更多文章出现的</p><h4 id="Docker-系列文章"><a href="#Docker-系列文章" class="headerlink" title="Docker 系列文章"></a><strong>Docker 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/11/26/Docker-harbor/" target="_blank" rel="noopener">Docker系列文章（一）：基于 Harbor 搭建 Docker 私有镜像仓库</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/01/25/Docker-install/" target="_blank" rel="noopener">Docker系列文章（二）：Mac 安装 Docker 及常用命令</a></p><p>3、同样，后面也会持续更新</p><h4 id="ElasticSearch-系列文章"><a href="#ElasticSearch-系列文章" class="headerlink" title="ElasticSearch 系列文章"></a><strong>ElasticSearch 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>2、 <a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>6、也有更多深入的文章</p><h4 id="搭建博客系列文章"><a href="#搭建博客系列文章" class="headerlink" title="搭建博客系列文章"></a><strong>搭建博客系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E5%88%A9%E7%94%A8Github%20Page%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/" target="_blank" rel="noopener">利用Github Page 搭建个人博客网站</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/04/13/Hexo-yilia-changyan/" target="_blank" rel="noopener">Github pages + Hexo 博客 yilia 主题使用畅言评论系统</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia/" target="_blank" rel="noopener">Hexo + yilia 搭建博客可能会遇到的所有疑问</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/06/13/Hexo-yilia-toc/" target="_blank" rel="noopener">Hexo + yilia 主题实现文章目录</a></p><p>5、这个系列看情况，可能还会有</p><h4 id="Java-系列文章"><a href="#Java-系列文章" class="headerlink" title="Java 系列文章"></a><strong>Java 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/06/13/String-new/" target="_blank" rel="noopener">关于String s = new String(“xyz”); 创建几个对象的问题</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/06/13/Java-Thread/" target="_blank" rel="noopener">《Java 多线程编程核心技术》学习笔记及总结</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/06/13/java-var/" target="_blank" rel="noopener">从对象深入分析 Java 中实例变量和类变量的区别</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/06/13/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%A9%B6Java%20%E4%B8%AD%20finally%20%E8%AF%AD%E5%8F%A5%E5%9D%97/" target="_blank" rel="noopener">深度探究Java 中 finally 语句块</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/06/13/%E8%A7%A3%E5%86%B3jdk1.8%E4%B8%AD%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%A4%B1%E8%B4%A5%EF%BC%88handshake_failure%EF%BC%89%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决jdk1.8中发送邮件失败（handshake_failure）问题</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/06/13/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20Web%20%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">深入分析 Java Web 中的中文编码问题</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/06/13/%E5%A5%87%E6%80%AA%E7%9A%84Java%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88128%20==%20128%E8%BF%94%E5%9B%9E%E4%B8%BAFalse%EF%BC%8C%E8%80%8C127%20==%20127%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%BATrue-/" target="_blank" rel="noopener">奇怪的Java题：为什么128 == 128返回为False，而127 == 127会返回为True?</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/06/13/java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">Java读取文件</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/06/13/HashMap-Hashtable/" target="_blank" rel="noopener">HashMap、Hashtable、HashSet 和 ConcurrentHashMap 的比较</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2017/06/13/Java%E8%BF%9E%E6%8E%A5Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">Java连接Oracle数据库的三种连接方式</a></p><p>11、<a href="http://www.54tianzhisheng.cn/2017/06/13/Java%20NIO%20%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Java NIO 系列教程</a></p><p>12、<a href="http://www.54tianzhisheng.cn/2017/06/13/Java-16-lession/" target="_blank" rel="noopener">《疯狂 Java 突破程序员基本功的 16 课》读书笔记</a></p><p>13、<a href="http://www.54tianzhisheng.cn/2017/06/17/%E8%AF%A6%E7%BB%86%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20ClassLoader%20%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">详细深入分析 Java ClassLoader 工作机制</a></p><p>14、<a href="http://www.54tianzhisheng.cn/2017/06/17/%E8%AF%A6%E8%A7%A3%20Filter%20%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="noopener">详解 Filter 过滤器</a></p><p>15、<a href="http://www.54tianzhisheng.cn/2017/06/23/java-io/" target="_blank" rel="noopener">Java IO流学习超详细总结（图文并茂）</a></p><p>16、<a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="noopener">通过源码详解 Servlet</a></p><p>17、<a href="http://www.54tianzhisheng.cn/2017/07/25/Java-performance-tuning/" target="_blank" rel="noopener">Java 性能调优需要格外注意的细节</a></p><p>18、<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="noopener">Java 线程池艺术探索</a></p><p>19、<a href="http://www.54tianzhisheng.cn/2017/06/13/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7jps%E3%80%81jstack%E3%80%81jmap%E3%80%81jhat%E3%80%81jstat%E7%AD%89%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat等使用详解</a></p><p>20、这个必须的持续更新下去</p><h4 id="Maven-系列文章"><a href="#Maven-系列文章" class="headerlink" title="Maven  系列文章"></a><strong>Maven  系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/10/14/Nexus3-Maven/" target="_blank" rel="noopener">Centos7 搭建最新 Nexus3 Maven 私服</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/11/11/Maven-dependencies-dependencyManagement/" target="_blank" rel="noopener">Maven 中 dependencies 与 dependencyManagement 的区别</a></p><h4 id="Kafka-系列文章"><a href="#Kafka-系列文章" class="headerlink" title="Kafka 系列文章"></a><strong>Kafka 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/" target="_blank" rel="noopener">Kafka 安装及快速入门</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">Spring Boot系列文章（一）：SpringBoot Kafka 整合使用</a></p><h4 id="Mybatis-系列文章"><a href="#Mybatis-系列文章" class="headerlink" title="Mybatis 系列文章"></a><strong>Mybatis 系列文章</strong></h4><p>1、<a href="http://blog.csdn.net/tzs_1041218129/article/details/53404326" target="_blank" rel="noopener">通过项目逐步深入了解Mybatis&lt;一&gt;</a></p><p>2、<a href="http://blog.csdn.net/tzs_1041218129/article/details/53449052" target="_blank" rel="noopener">通过项目逐步深入了解Mybatis&lt;二&gt;</a></p><p>3、<a href="http://blog.csdn.net/tzs_1041218129/article/details/53456677" target="_blank" rel="noopener">通过项目逐步深入了解Mybatis&lt;三&gt;</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/06/15/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E5%9B%9B" target="_blank" rel="noopener">通过项目逐步深入了解Mybatis（四)</a>/)</p><p>5、<a href="http://www.54tianzhisheng.cn/2017/06/13/MyBatis-foreach/" target="_blank" rel="noopener">MyBatis的foreach语句详解</a></p><p>6、期待它的源码解析文章吗？</p><h4 id="Nginx-系列文章"><a href="#Nginx-系列文章" class="headerlink" title="Nginx 系列文章"></a><strong>Nginx 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/08/18/Ubuntu-install-Nginx/" target="_blank" rel="noopener">Ubuntu16.10 安装 Nginx</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/08/05/Nginx/" target="_blank" rel="noopener">Nginx 基本知识快速入门</a></p><h4 id="Python-爬虫系列文章"><a href="#Python-爬虫系列文章" class="headerlink" title="Python 爬虫系列文章"></a><strong>Python 爬虫系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/06/13/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E5%B8%96%E5%AD%90/" target="_blank" rel="noopener">Python爬虫实战之爬取百度贴吧帖子</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/06/13/Pyspider%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94%20Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%20V2EX%20%E7%BD%91%E7%AB%99%E5%B8%96%E5%AD%90/" target="_blank" rel="noopener">Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/06/13/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91%E6%AE%B5%E5%AD%90/" target="_blank" rel="noopener">Python爬虫实战之爬取糗事百科段子</a></p><p>4、这个估计得等有机会再次学 Python 时再写</p><h4 id="RocketMQ-系列文章"><a href="#RocketMQ-系列文章" class="headerlink" title="RocketMQ 系列文章"></a><strong>RocketMQ 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2018/02/05/RocketMQ/" target="_blank" rel="noopener">RocketMQ系列文章（一）：RocketMQ 初探</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/02/06/RocketMQ-install/" target="_blank" rel="noopener">RocketMQ系列文章（二）：RocketMQ 安装及快速入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/02/07/rocketmq-example/" target="_blank" rel="noopener">RocketMQ系列文章（三）：RocketMQ 简单的消息示例</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/02/07/SpringBoot-RocketMQ/" target="_blank" rel="noopener">Spring Boot系列文章（六）：SpringBoot RocketMQ 整合使用和监控</a></p><h4 id="Spring-MVC-系列文章"><a href="#Spring-MVC-系列文章" class="headerlink" title="Spring MVC 系列文章"></a><strong>Spring MVC 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/06/13/Spring%20MVC%20+%20Hibernate%20JPA%20+%20Bootstrap%20%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">Spring MVC系列文章（一）：Spring MVC + Hibernate JPA + Bootstrap 搭建的博客系统 Demo</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/06/13/Spring%20MVC+Hibernate%20JPA%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/" target="_blank" rel="noopener">Spring MVC系列文章（二）：Spring MVC+Hibernate JPA搭建的博客系统项目中所遇到的坑</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC01/" target="_blank" rel="noopener">Spring MVC系列文章（三）：看透 Spring MVC 源代码分析与实践 —— 网站基础知识</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC02/" target="_blank" rel="noopener">Spring MVC系列文章（四）：看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/07/21/Spring-MVC03/" target="_blank" rel="noopener">Spring MVC系列文章（五）：看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/06/16/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Spring%20MVC%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">通过项目逐步深入了解Spring MVC（一）</a></p><h4 id="Netty-系列文章"><a href="#Netty-系列文章" class="headerlink" title="Netty 系列文章"></a><strong>Netty 系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/12/08/netty-01-env/" target="_blank" rel="noopener">Netty系列文章（一）：Netty 源码阅读之初始环境搭建</a></p><p>2、这个系列迟早会更新的。</p><h4 id="前端系列文章"><a href="#前端系列文章" class="headerlink" title="前端系列文章"></a><strong>前端系列文章</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/06/18/Bootstrap%E5%85%A5%E9%97%A8%E9%9C%80%E6%8E%8C%E6%8F%A1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">Bootstrap入门需掌握的知识点（一）</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/06/18/Bootstrap%E5%85%A5%E9%97%A8%E9%9C%80%E6%8E%8C%E6%8F%A1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">Bootstrap入门需掌握的知识点（二）</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/12/09/CodeMirror/" target="_blank" rel="noopener">使用 CodeMirror 打造属于自己的在线代码编辑器</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/06/23/AJAX/" target="_blank" rel="noopener">AJAX 学习</a></p><p>5、前端渣渣这个也要慢慢学习这块</p><h4 id="面试经验系列"><a href="#面试经验系列" class="headerlink" title="面试经验系列"></a><strong>面试经验系列</strong></h4><p>1、<a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/" target="_blank" rel="noopener">秋招第一站 —— 亚信科技</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/" target="_blank" rel="noopener">秋招第二站 —— 内推爱奇艺（一面二面）</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/" target="_blank" rel="noopener">秋招第三站 —— 内推阿里（一面）</a></p><p>4、 <a href="http://www.54tianzhisheng.cn/2017/09/17/Interview-summary/" target="_blank" rel="noopener">面试过阿里等互联网大公司，我知道了这些套路</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/08/28/recommend-books/" target="_blank" rel="noopener">那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h4><p>还有一些其他方面的技术文章，算不是系列文章，比较零散，还有就是一些随笔文章，就不把它们放在合集里了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用自己的一句话：<strong>坑要一个个填，路要一步步走！前人栽树，后人乘凉，学会感恩！</strong></p><p>建了个不错的微信群，如果有感兴趣的可以加我微信，对我回复  <strong>加群</strong> ，然后会拉你进群交流。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp0t1jn6s4j30qi0z10x1.jpg" alt="1520091522031"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp3jkmizmpj30o00didgn.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fprrv5n1p2j31hc0u0tm6.jpg&quot; alt=&quot;nature-3054445_1920&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;好几周没更新博客了，对不断支持我博客的童鞋们说声：“抱歉了！”。自己这段时间确实比较忙，而且还在抽空完成学校的毕业设计。今天晚上抽空把大学期间写过的博客弄一个系列文章合集，算是对大学这四年的一个总结，证明自己没白过。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客合集" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%90%88%E9%9B%86/"/>
    
  </entry>
  
</feed>
